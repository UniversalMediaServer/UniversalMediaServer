<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<!--
		DMS consists of two major parts: DMS itself and the third party software needed to
		run it. While DMS itself is 100% pure Java, some of the third party software is
		not. This means building a platform specific distribution boils down to first
		building the dms.jar and then assembling all application resources.

		Note that Maven 3 does not automatically install all dependencies, unlike Maven 2.
		To install external dependencies to your local repository, run the following commands:

		mvn external:install

		To build DMS, do:

			mvn clean package

		After building, the "target" directory will contain the binary.
		To generate a full source code report, do:

			mvn site

		After generating, the "target/site" directory will contain the reports.
	-->

	<modelVersion>4.0.0</modelVersion>
	<groupId>net.pms</groupId>
	<artifactId>ums</artifactId>
	<name>Universal Media Server</name>
	<packaging>jar</packaging>
	<version>8.2.0</version>
	<url>http://www.universalmediaserver.com/</url>
	<inceptionYear>2012</inceptionYear>

	<organization>
		<name>Universal Media Server</name>
		<url>http://www.universalmediaserver.com/</url>
	</organization>
	<licenses>
		<license>
			<name>GNU General Public License version 2</name>
			<url>http://www.gnu.org/licenses/gpl-2.0.txt</url>
			<distribution>manual</distribution>
		</license>
	</licenses>
	<description>
		Universal Media Server is a cross-platform DLNA-compliant UPnP Media Server.
		Originally written to support the PlayStation 3, Universal Media Server has been
		expanded to support a range of other media renderers, including smartphones,
		televisions, music players and more.
	</description>
	<scm>
		<connection>scm:git:git://github.com/UniversalMediaServer/UniversalMediaServer.git</connection>
		<developerConnection>scm:git:git@github.com:UniversalMediaServer/UniversalMediaServer.git</developerConnection>
		<tag>master</tag>
		<url>https://github.com/UniversalMediaServer/UniversalMediaServer</url>
	</scm>
	<issueManagement>
		<system>GitHub</system>
		<url>https://github.com/UniversalMediaServer/UniversalMediaServer/issues</url>
	</issueManagement>
	<properties>
		<!-- NSIS needs a version without "-SNAPSHOT" or "-b1" -->
		<project.version.short>8.2.0</project.version.short>
		<cuelib-version>1.2.1-2008-06-13</cuelib-version>

		<!-- In versions after 1.6.0, they removed code that the MovieInfo plugin relies on -->
		<jgoodies-forms-version>1.6.0</jgoodies-forms-version>

		<!-- Version 2.7.0 is the last free version. The latest libraries are shipped only with the commercial JGoodies Smart Client -->
		<jgoodies-looks-version>2.7.0</jgoodies-looks-version>

		<!-- Skip 4.65-1.05-RC because it doesn't work, author is working on fixing it -->
		<sevenzip-version>9.20-2.00beta</sevenzip-version>

		<twelvemonkeys-imageio-version>3.4.1</twelvemonkeys-imageio-version>

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.external-resources>${project.basedir}/src/main/external-resources</project.external-resources>
		<project.binaries>${project.basedir}/target/bin</project.binaries>

		<project.binaries-base>http://universalmediaserver.com/svn/binaries</project.binaries-base>
		<binary-revision>83</binary-revision>

		<maven-javadoc-plugin-version>2.10.4</maven-javadoc-plugin-version>
		<git-commit-id-plugin-version>2.2.3</git-commit-id-plugin-version>
		<maven-assembly-plugin-version>3.1.0</maven-assembly-plugin-version>
		<maven-enforcer-plugin-version>1.4.1</maven-enforcer-plugin-version>

		<!--
			org.slf4j:slf4j-api is shared with
				- su.litvak.chromecast:api-v2
				- fm.last:coverartarchive-api
				- com.github.oshi:oshi-core

			Check the org.slf4j:slf4j-api version of the other libraries before upgrading
		-->
		<logback-version>1.2.3</logback-version>
		<surefire-version>2.20</surefire-version>

		<!--
			net.java.dev.jna:jna-platform is shared with
				- com.github.oshi:oshi-core

			Check the net.java.dev.jna:jna-platform version of the other library before upgrading
		-->
		<jna-version>4.4.0</jna-version>

		<!--
			 use the Windows makensis.exe for Windows builds unless
			 the system makensis is explicitly selected via the
			 system-makensis profile
		 -->
		<makensis-bin>${project.external-resources}/third-party/nsis/makensis.exe</makensis-bin>
	</properties>
	<pluginRepositories>
		<pluginRepository>
			<id>ossrh</id>
			<name>Sonatype OSS Repository</name>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
			<layout>default</layout>
		</pluginRepository>
	</pluginRepositories>
	<repositories>
		<repository>
			<id>4thline-repo</id>
			<url>http://4thline.org/m2</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>jaudiotagger-repository</id>
			<url>https://dl.bintray.com/ijabz/maven</url>
		</repository>
	</repositories>
	<dependencies>
		<!-- TODO this can be removed when MEncoder is removed -->
		<dependency>
			<groupId>org.beanshell</groupId>
			<artifactId>bsh-core</artifactId>
			<version>2.0b4</version>
		</dependency>
		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<version>3.2.2</version>
		</dependency>
		<dependency>
			<groupId>commons-configuration</groupId>
			<artifactId>commons-configuration</artifactId>
			<!--
				commons-logging:commons-logging is shared with
					- com.github.junrar:junrar
					- fm.last:coverartarchive-api

				Check the commons-logging:commons-logging version of the other libraries before upgrading
			-->
			<version>1.10</version>
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpasyncclient</artifactId>
			<version>4.1.4</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<!--
				commons-io:commons-io is shared with
					- fm.last:coverartarchive-api

				Check the commons-io:commons-io version of the library before upgrading
			-->
			<version>2.6</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.7</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-text</artifactId>
			<version>1.3</version><!-- Versions above 1.3 require Java 8 -->
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>1.4.199</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback-version}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>${logback-version}</version>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.8.2</version>
		</dependency>
		<dependency>
			<groupId>io.netty</groupId>
			<artifactId>netty</artifactId> <!-- Use 'netty-all' for 4.0 or above -->
			<version>3.10.6.Final</version>
			<scope>compile</scope>
		</dependency>

		<!-- maven replacement for nsisant-1.2.jar -->
		<dependency>
			<groupId>maven</groupId>
			<artifactId>maven-nsis-plugin</artifactId>
			<version>2.1</version>
		</dependency>
		<dependency>
			<groupId>com.rometools</groupId>
			<artifactId>rome</artifactId>
			<!--
				org.slf4j:slf4j-api is shared with
					- ch.qos.logback:logback-classic
					- su.litvak.chromecast
					- fm.last:coverartarchive-api
					- com.github.oshi:oshi-core

				Check the org.slf4j:slf4j-api version of the other libraries before upgrading
			-->
			<version>1.9.0</version>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>net.coobird</groupId>
			<artifactId>thumbnailator</artifactId>
			<version>[0.4, 0.5)</version>
		</dependency>

		<!--
			If any ImageIO plugins are added or removed, corresponding changes
		 	must be made in src/main/external-resources/META-INF/services
		 -->
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-bmp</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-core</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-icns</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-iff</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-jpeg</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-hdr</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-metadata</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-pcx</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-pict</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-pnm</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-psd</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-sgi</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-tga</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-tiff</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.drewnoakes</groupId>
			<artifactId>metadata-extractor</artifactId>
			<version>2.10.1</version>
		</dependency>
		<dependency>
			<groupId>net.jthink</groupId>
			<artifactId>jaudiotagger</artifactId>
			<version>2.2.5</version>
		</dependency>
		<dependency>
			<groupId>com.jgoodies</groupId>
			<artifactId>jgoodies-forms</artifactId>
			<version>${jgoodies-forms-version}</version>
		</dependency>
		<dependency>
			<groupId>com.jgoodies</groupId>
			<artifactId>jgoodies-looks</artifactId>
			<version>${jgoodies-looks-version}</version>
		</dependency>
		<dependency>
			<groupId>com.github.junrar</groupId>
			<artifactId>junrar</artifactId>
			<!--
				commons-logging:commons-logging is shared with
					- commons-configuration:commons-configuration
					- fm.last:coverartarchive-api

				Check the commons-logging:commons-logging version of the other libraries before upgrading
			-->
			<version>1.0.1</version>
		</dependency>

		<!-- XXX: not Mavenized: https://code.google.com/p/cuelib/ -->
		<dependency>
			<groupId>jwbroek.cuelib</groupId>
			<artifactId>cuelib</artifactId>
			<version>${cuelib-version}</version>
		</dependency>

		<dependency>
			<groupId>xmlwise</groupId>
			<artifactId>xmlwise</artifactId>
			<version>1.2.11</version>
		</dependency>
		<dependency>
		    <groupId>net.sf.sevenzipjbinding</groupId>
		    <artifactId>sevenzipjbinding</artifactId>
		    <version>${sevenzip-version}</version>
		</dependency>
		<dependency>
		    <groupId>net.sf.sevenzipjbinding</groupId>
		    <artifactId>sevenzipjbinding-all-platforms</artifactId>
		    <version>${sevenzip-version}</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.easytesting</groupId>
			<artifactId>fest-util</artifactId>
			<version>1.2.5</version>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<!-- Use 3.x for Java 8 -->
			<version>2.5.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>net.java.dev.jna</groupId>
			<artifactId>jna</artifactId>
			<version>${jna-version}</version>
		</dependency>
		<dependency>
			<groupId>net.java.dev.jna</groupId>
			<artifactId>jna-platform</artifactId>
			<version>${jna-version}</version>
		</dependency>
		<dependency>
			<groupId>org.fourthline.cling</groupId>
			<artifactId>cling-core</artifactId>
			<version>2.1.2</version>
		</dependency>
		<dependency>
			<groupId>org.fourthline.cling</groupId>
			<artifactId>cling-support</artifactId>
			<version>2.1.2</version>
		</dependency>
		<dependency>
			<groupId>org.seamless</groupId>
			<artifactId>seamless-http</artifactId>
			<version>1.1.2</version>
		</dependency>
		<dependency>
			<groupId>org.seamless</groupId>
			<artifactId>seamless-util</artifactId>
			<version>1.1.2</version>
		</dependency>
		<dependency>
			<groupId>org.seamless</groupId>
			<artifactId>seamless-xml</artifactId>
			<version>1.1.2</version>
		</dependency>
		<dependency>
			<groupId>com.samskivert</groupId>
			<artifactId>jmustache</artifactId>
			<version>1.12</version>
		</dependency>
		<dependency>
			<groupId>su.litvak.chromecast</groupId>
			<artifactId>api-v2</artifactId>
			<!--
				org.slf4j:slf4j-api is shared with
					- ch.qos.logback:logback-classic
					- fm.last:coverartarchive-api
					- com.github.oshi:oshi-core

				Check the org.slf4j:slf4j-api version of the other libraries before upgrading
			-->
			<version>0.10.0</version>
		</dependency>
		<dependency>
			<groupId>com.ibm.icu</groupId>
			<artifactId>icu4j</artifactId>
			<version>59.1</version>
		</dependency>
		<dependency>
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>annotations</artifactId>
			<version>3.0.1u2</version>
		</dependency>
		<dependency>
			<groupId>fm.last</groupId>
			<artifactId>coverartarchive-api</artifactId>
			<!--
				org.slf4j:slf4j-api is shared with
					- ch.qos.logback:logback-classic
					- su.litvak.chromecast
					- com.github.oshi:oshi-core

				Check the org.slf4j:slf4j-api version of the other libraries before upgrading

				commons-logging:commons-logging is shared with
					- commons-configuration:commons-configuration
					- com.github.junrar:junrar

				Check the commons-logging:commons-logging version of the other libraries before upgrading

				commons-io:commons-io is shared with
					- net.pms:dms

				Check the commons-io:commons-io version before upgrading
			-->
			<version>2.1.0</version>
			<exclusions>
				<!-- This should never have been a dependency in the first place -->
				<exclusion>
					<groupId>com.google.code.findbugs</groupId>
					<artifactId>jsr305</artifactId>
				</exclusion>
				<exclusion>
					<groupId>commons-io</groupId>
					<artifactId>commons-io</artifactId>
				</exclusion>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.httpcomponents</groupId>
					<artifactId>httpclient</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.github.oshi</groupId>
			<artifactId>oshi-core</artifactId>
			<!--
				org.slf4j:slf4j-api is shared with
					- ch.qos.logback:logback-classic
					- su.litvak.chromecast
					- fm.last:coverartarchive-api

				Check the org.slf4j:slf4j-api version of the other libraries before upgrading

				net.java.dev.jna:jna-platform is shared with
					- net.pms:dms

				Check the net.java.dev.jna:jna-platform version before upgrading
			-->
			<version>3.4.3</version>
		</dependency>
		<!-- FIX ERROR:  java.lang.NoSuchMethodError: org.codehaus.plexus.util.xml.pull.MXParser -->
		<dependency>
		    <groupId>org.codehaus.plexus</groupId>
		    <artifactId>plexus</artifactId>
		    <version>5.1</version>
		    <type>pom</type>
		</dependency>
		<dependency>
		    <groupId>org.codehaus.plexus</groupId>
		    <artifactId>plexus-utils</artifactId>
		    <version>3.1.0</version>
		</dependency>
		<!-- FIX ERROR: Exception in thread "main" java.lang.NoSuchMethodError: com.google.common.base.Preconditions.checkArgument -->
		<dependency>
		    <groupId>com.google.guava</groupId>
		    <artifactId>guava-parent</artifactId>
		    <version>26.0-jre</version>
		    <type>pom</type>
		</dependency>
		<dependency>
		    <groupId>org.codehaus</groupId>
		    <artifactId>codehaus-parent</artifactId>
		    <version>4</version>
		    <type>pom</type>
		</dependency>
		<dependency>
		    <groupId>net.lingala.zip4j</groupId>
		    <artifactId>zip4j</artifactId>
		    <version>1.3.2</version>
		</dependency>

		<!-- start of JAXB dependencies -->
		<!--
			Those dependencies could be removed as soon as we drop support for Java 8,
			and add "-add-modules java.xml.bind" as a app command line argument
		-->
		<dependency>
			<groupId>javax.xml.soap</groupId>
			<artifactId>javax.xml.soap-api</artifactId>
			<version>1.4.0</version>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.messaging.saaj</groupId>
			<artifactId>saaj-impl</artifactId>
			<version>1.5.0</version>
		</dependency>
		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>2.3.1</version>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-core</artifactId>
			<version>2.3.0.1</version>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-impl</artifactId>
			<version>2.3.1</version>
		</dependency>
		<!-- end of JAXB dependencies -->
	</dependencies>
	<build>
		<defaultGoal>assembly:assembly</defaultGoal>

		<!-- specify how files in src/main/resources are bundled in the target jar -->
		<resources>
			<!-- 1) package unfiltered resources -->

			<!--
				This needs to be defined explicitly if a <resources>...</resources>
				section is used
			-->
			<resource>
				<directory>src/main/resources</directory>
				<!--
					By default, Maven packages resources in the top-level of the jar e.g.

						/example.res

					The old DMS ant build packaged them in a "resources" directory
					e.g:

						/resources/example.res

					Currently, we preserve the old destination. If this is ever changed
					to the Maven default, a handful of files will need to be changed to
					reference "/example.res" rather than "/resources/example.res"
				-->
				<targetPath>resources</targetPath>
				<excludes>
					<exclude>project.properties</exclude>
				</excludes>

				<!-- Avoid inadvertently filtering binaries -->
				<filtering>false</filtering>
			</resource>

			<!-- 2) package filtered resources -->
			<resource>
				<directory>src/main/resources</directory>
				<targetPath>resources</targetPath>
				<includes>
					<include>project.properties</include>
				</includes>

				<!-- Filter to replace Maven properties -->
				<filtering>true</filtering>
			</resource>

			<!-- 3) package filtered NSIS header files -->
			<resource>
				<directory>src/main/external-resources/nsis</directory>
				<includes>
					<include>extra.nsh</include>
				</includes>

				<!-- Filter to replace Maven properties -->
				<filtering>true</filtering>
				<targetPath>..</targetPath>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<includes>
					<include>project.properties</include>
				</includes>
				<targetPath>resources</targetPath>

				<!-- Enable the use of Maven properties -->
				<filtering>true</filtering>
			</testResource>
			<!--*.srt files to test charset detection and *json to test filename prettification-->
			<testResource>
				<directory>src/test/resources/net/pms/util</directory>
				<includes>
					<include>*.srt</include>
					<include>*.json</include>
				</includes>
				<targetPath>net/pms/util</targetPath>
			</testResource>
		</testResources>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<configuration>

						<!--
							1) Force language because JUnit tests depend on English language strings

							2) Use our JNA dependency rather than the system's - fixes
							the following error on Linux (Ubuntu 12.04 with system
							jna-3.2.7.jar via libjna-java):

							There is an incompatible JNA native library installed on this system.
						-->
						<argLine>-Duser.language=en -Djna.nosys=true -XX:-UseSplitVerifier</argLine> <!-- only one argLine element is processed -->
					</configuration>
					<version>${surefire-version}</version>
				</plugin>

				<!--
					This plugin's configuration is used to run crowdin plugin from the command line,
					it has no influence on the Maven build itself.
				-->
				<plugin>
					<groupId>org.digitalmediaserver</groupId>
					<artifactId>crowdin-maven-plugin</artifactId>
					<version>0.4.1</version>
					<configuration>
						<project>${project}</project>
						<languageFilesFolder>${project.basedir}/src/main/resources/i18n</languageFilesFolder>
						<downloadFolder>${project.basedir}/extras/crowdin</downloadFolder>
						<statusFile>${project.basedir}/src/main/resources/languages.properties</statusFile>
						<crowdinServerId>crowdin-ums</crowdinServerId>
						<pushFileName>messages.properties</pushFileName>
						<pushFileTitle>Universal Media Server</pushFileTitle>
						<projectName>Universal Media Server</projectName>
					</configuration>
				</plugin>

				<!--
					This plugin's configuration is used to store Eclipse m2e settings only.
					It has no influence on the Maven build itself.
				-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-antrun-plugin
										</artifactId>
										<versionRange>
											[1.7,)
										</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											pl.project13.maven
										</groupId>
										<artifactId>
											git-commit-id-plugin
										</artifactId>
										<versionRange>
											[${git-commit-id-plugin-version},)
										</versionRange>
										<goals>
											<goal>revision</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											com.universalmediaserver
										</groupId>
										<artifactId>
											external-maven-plugin
										</artifactId>
										<versionRange>
											[0.1,)
										</versionRange>
										<goals>
											<goal>clean</goal>
											<goal>deploy</goal>
											<goal>install</goal>
											<goal>resolve</goal>
											<goal>localinstall</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute></execute>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>com.universalmediaserver</groupId>
										<artifactId>
											crowdin-maven-plugin
										</artifactId>
										<versionRange>
											[0.1,)
										</versionRange>
										<goals>
											<goal>fetch</goal>
											<goal>push</goal>
											<goal>build</goal>
											<goal>apply</goal>
											<goal>pull</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute></execute>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>1.4.1</version>
				<executions>
					<execution>
						<id>enforce</id>
						<configuration>
							<rules>
								<dependencyConvergence/>
								<!-- this is not required, but is recommended for plugin version checks -->
								<requireMavenVersion>
									<version>3.0.0</version>
								</requireMavenVersion>
							</rules>
						</configuration>
						<goals>
							<goal>enforce</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!--
				Plugin to add git commit information properties.
				These are used in the project.properties files.
				See: https://github.com/ktoso/maven-git-commit-id-plugin
			-->
			<plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
				<version>${git-commit-id-plugin-version}</version>
				<executions>
					<execution>
						<phase>initialize</phase>
						<goals>
							<goal>revision</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<dateFormat>yyyy-MM-dd</dateFormat>
					<verbose>false</verbose>
					<generateGitPropertiesFile>false</generateGitPropertiesFile>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.7.0</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
					<testSource>1.7</testSource>
					<testTarget>1.7</testTarget>
					<compilerArgument>${compilerArgument}</compilerArgument>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.10</version>
				<configuration>
					<additionalProjectnatures>
						<projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
					</additionalProjectnatures>
					<additionalBuildcommands>
						<buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
					</additionalBuildcommands>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>
					<wtpversion>1.5</wtpversion>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-idea-plugin</artifactId>
				<version>2.2.1</version>
				<configuration>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>
					<dependenciesAsLibraries>true</dependenciesAsLibraries>
					<useFullNames>false</useFullNames>
				</configuration>
			</plugin>

			<!--
				This plugin will take care of installing the external dependencies that do not
				exist in a public Maven repository. That is why we store some jar files in the
				"src/main/external-resources/lib" directory and have this plugin take care of
				the installation at build time.

				Checksums can be calculated with "openssl sha1 [filename]".
			-->
			<plugin>
				<groupId>com.universalmediaserver</groupId>
				<artifactId>external-maven-plugin</artifactId>
				<version>0.2</version>
				<inherited>false</inherited>
				<configuration>
					<disableSSLValidation>true</disableSSLValidation>
					<stagingDirectory>${project.build.directory}/dependencies/</stagingDirectory>
					<createChecksum>true</createChecksum>
					<artifactItems>
						<artifactItem>
							<groupId>jwbroek.cuelib</groupId>
							<artifactId>cuelib</artifactId>
							<version>${cuelib-version}</version>
							<downloadUrl>http://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/cuelib/cuelib-${cuelib-version}.jar</downloadUrl>
							<checksum>d03b6b960b3b83a2a419e8b5f07b6ba4bd18387b</checksum>
						</artifactItem>
					</artifactItems>
				</configuration>
				<executions>
					<execution>
						<id>clean-external-dependencies</id>
						<phase>clean</phase>
						<goals>
							<goal>clean</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>3.6</version>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.doxia</groupId>
						<artifactId>doxia-module-docbook-simple</artifactId>
						<version>1.7</version>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>
	</build>

	<!-- Set reports for the maven site plugin -->
	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>2.9</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>index</report>
							<report>dependencies</report>
							<report>dependency-convergence</report>
							<report>dependency-management</report>
							<report>plugins</report>
						</reports>
					</reportSet>
		        </reportSets>
			</plugin>

			<!-- DMS tests report -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>${surefire-version}</version>
				<configuration>
					<showSuccess>false</showSuccess>
				</configuration>
			</plugin>

			<!-- Javadoc -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>${maven-javadoc-plugin-version}</version>
				<configuration>
					<quiet>true</quiet>
					<tags>
						<tag>
							<name>todo</name>
							<placement>a</placement>
							<head>To Do:</head>
						</tag>
						<tag>
							<name>review</name>
							<placement>a</placement>
							<head>Review:</head>
						</tag>
					</tags>
					<detectJavaApiLink>false</detectJavaApiLink>
					<links>
						<link>http://docs.oracle.com/javase/7/docs/api/</link>
					</links>

					<!--
						Doclet to generate class diagrams inside Javadoc.
						Requires the installation of Graphviz (http://www.graphviz.org/)
					-->
					<doclet>org.jboss.apiviz.APIviz</doclet>
					<docletArtifact>
						<groupId>org.jboss.apiviz</groupId>
						<artifactId>apiviz</artifactId>
						<version>1.3.2.GA</version>
					</docletArtifact>
					<useStandardDocletOptions>true</useStandardDocletOptions>
				</configuration>
			</plugin>

			<!-- Class dependency report -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jdepend-maven-plugin</artifactId>
				<version>2.0</version>
			</plugin>

			<!-- Findbugs report -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
				<version>3.0.5</version>
			</plugin>

			<!-- Checkstyle report -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>2.17</version>
				<configuration>
					<configLocation>CheckStyle.xml</configLocation>
				</configuration>
			</plugin>

			<!-- Cobertura Test Coverage report -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<version>2.7</version>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>3.7</version>
				<configuration>
					<linkXref>false</linkXref>
					<sourceEncoding>utf-8</sourceEncoding>
					<minimumTokens>100</minimumTokens>
					<targetJdk>1.7</targetJdk>
				</configuration>
			</plugin>

			<plugin>
				<groupId>com.github.jrh3k5</groupId>
				<artifactId>l10n-maven-plugin</artifactId>
				<version>1.4</version>
				<configuration>
					<failBuild>true</failBuild>
					<messagesFile>${project.basedir}/src/main/resources/i18n/messages.properties</messagesFile>
					<translatedMessagesPattern>src/main/resources/i18n/messages*.properties</translatedMessagesPattern>
				</configuration>
			</plugin>
		</plugins>
	</reporting>

	<profiles>
		<profile>
			<id>system-makensis</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>

			<properties>
				<!-- if selected, use the system makensis on Linux, Mac OS X &c. -->
				<makensis-bin>makensis</makensis-bin>
			</properties>
		</profile>

		<!--
			Windows profile: takes care of building the final package for Microsoft Windows
		-->
		<profile>
			<id>windows</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<os>
					<family>windows</family>
				</os>
			</activation>

			<build>
				<plugins>
					<!-- Plugin to assemble ums-x.x.x-jar-with-dependencies.jar -->
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
							<configuration>
								<descriptors>
									<descriptor>${project.basedir}/src/main/assembly/jar-with-dependencies.xml</descriptor>
								</descriptors>
								<archive>
									<manifest>
										<mainClass>net.pms.PMS</mainClass>
										<!--
											this is required to make the ImageIo image "plugins" provided by jai-imageio-core-standalone work.
											without it, the following exception is thrown when DMS starts:

										Configuration error: java.util.ServiceConfigurationError: javax.imageio.spi.ImageInputStreamSpi:
											Provider com.sun.media.imageioimpl.stream.ChannelImageInputStreamSpi could not be instantiated:
												java.lang.IllegalArgumentException: vendorName == null!

										See: https://thierrywasyl.wordpress.com/2009/07/24/jai-how-to-solve-vendorname-null-exception/
									-->
									<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
								</manifest>
							</archive>
						</configuration>
						<executions>
							<execution>
								<id>make-jar-with-dependencies-win</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>single</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<!--
						Plugin to move the dms-x.x.x-jar-with-dependencies.jar to dms.jar
					-->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.8</version>
						<executions>
							<execution>
								<id>process-resources-windows</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target unless="offline">
										<!-- Make sure the download folders exist -->
										<mkdir dir="${project.binaries}" />
										<mkdir dir="${project.binaries}/win32" />
										<mkdir dir="${project.binaries}/win32/avisynth" />
										<mkdir dir="${project.binaries}/win32/codecs" />
										<mkdir dir="${project.binaries}/win32/fonts" />
										<mkdir dir="${project.binaries}/win32/fonts/conf.avail" />
										<mkdir dir="${project.binaries}/win32/fonts/conf.d" />
										<mkdir dir="${project.binaries}/win32/interframe" />
										<mkdir dir="${project.binaries}/win32/mplayer" />
										<mkdir dir="${project.binaries}/win32/service" />

										<!-- Download all necessary Windows binaries. Keep the same structure because NSIS expects it that way. -->
										<get src="${project.binaries-base}/MediaInfo.dll?p=${binary-revision}" dest="${project.binaries}/MediaInfo.dll"  usetimestamp="true" />
										<get src="${project.binaries-base}/MediaInfo64.dll?p=${binary-revision}" dest="${project.binaries}/MediaInfo64.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/MediaInfo-License.html?p=${binary-revision}" dest="${project.binaries}/MediaInfo-License.html" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/LICENSE-dsnative.txt?p=${binary-revision}" dest="${project.binaries}/win32/LICENSE-dsnative.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/LICENSE-mplayer.txt?p=${binary-revision}" dest="${project.binaries}/win32/LICENSE-mplayer.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/builds.txt?p=${binary-revision}" dest="${project.binaries}/win32/builds.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/dcrawMS.exe?p=${binary-revision}" dest="${project.binaries}/win32/dcrawMS.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/ffmpeg.exe?p=${binary-revision}" dest="${project.binaries}/win32/ffmpeg.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/ffmpeg64.exe?p=${binary-revision}" dest="${project.binaries}/win32/ffmpeg64.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/flac.exe?p=${binary-revision}" dest="${project.binaries}/win32/flac.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mencoder.exe?p=${binary-revision}" dest="${project.binaries}/win32/mencoder.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mplayer.exe?p=${binary-revision}" dest="${project.binaries}/win32/mplayer.exe"  usetimestamp="true" />
										<get src="${project.binaries-base}/win32/tsMuxeR.exe?p=${binary-revision}" dest="${project.binaries}/win32/tsMuxeR.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/tsMuxeR-new.exe?p=${binary-revision}" dest="${project.binaries}/win32/tsMuxeR-new.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/vcomp100.dll?p=${binary-revision}" dest="${project.binaries}/win32/vcomp100.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/avisynth/avisynth.exe?p=${binary-revision}" dest="${project.binaries}/win32/avisynth/avisynth.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/drv33260.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/drv33260.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/drv43260.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/drv43260.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/drvc.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/drvc.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/pncrt.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/pncrt.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/sipr3260.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/sipr3260.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/tokr3260.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/tokr3260.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/wma9dmod.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/wma9dmod.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/wmv9dmod.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/wmv9dmod.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/wmvdmod.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/wmvdmod.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/fonts.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/fonts.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/10-scale-bitmap-fonts.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/10-scale-bitmap-fonts.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/20-unhint-small-vera.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/20-unhint-small-vera.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/30-metric-aliases.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/30-metric-aliases.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/30-urw-aliases.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/30-urw-aliases.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/40-nonlatin.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/40-nonlatin.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/45-latin.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/45-latin.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/49-sansserif.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/49-sansserif.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/50-user.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/50-user.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/51-local.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/51-local.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/60-latin.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/60-latin.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/65-fonts-persian.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/65-fonts-persian.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/65-nonlatin.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/65-nonlatin.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/69-unifont.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/69-unifont.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/80-delicious.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/80-delicious.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/90-synthetic.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/90-synthetic.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/README?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/README" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/interframe/InterFrame2.avsi?p=${binary-revision}" dest="${project.binaries}/win32/interframe/InterFrame2.avsi" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/interframe/svpflow1.dll?p=${binary-revision}" dest="${project.binaries}/win32/interframe/svpflow1.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/interframe/svpflow2.dll?p=${binary-revision}" dest="${project.binaries}/win32/interframe/svpflow2.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mplayer/config?p=${binary-revision}" dest="${project.binaries}/win32/mplayer/config" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mplayer/input.conf?p=${binary-revision}" dest="${project.binaries}/win32/mplayer/input.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mplayer/subfont.ttf?p=${binary-revision}" dest="${project.binaries}/win32/mplayer/subfont.ttf" usetimestamp="true" />
									</target>
								</configuration>
							</execution>
							<execution>
								<id>prepare-package-windows</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<!-- Copy the dms-x.x.x-jar-with-dependencies.jar to dms.jar -->
										<copy file="${project.basedir}/target/${project.artifactId}-${project.version}-jar-with-dependencies.jar"
										      tofile="${project.basedir}/target/${project.artifactId}.jar" overwrite="true" />

										<!-- MediaInfo library needs to be in the standard library path to be found -->
										<copy file="${project.binaries}/MediaInfo.dll" todir="${project.basedir}" />
										<copy file="${project.binaries}/MediaInfo64.dll" todir="${project.basedir}" />
										<copy file="${project.binaries}/MediaInfo-License.html" todir="${project.basedir}" />

										<!-- Copy the wrapper to its destination -->
										<mkdir dir="${project.basedir}/win32/service" />
										<copy todir="${project.basedir}/win32/service" overwrite="true">
											<fileset dir="${project.external-resources}/third-party/wrapper" />
										</copy>

										<!-- Copy the custom jnidispatch.dll for Windows XP -->
										<mkdir dir="${project.basedir}/win32/winxp" />
										<copy file="${project.external-resources}/lib/winxp/jnidispatch.dll" todir="${project.basedir}/win32/winxp" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!--
						Plugin to build a Windows installer using the nullsoft scriptable install system (NSIS)
						The "generate-project" goal generates a file "target/project.nsh", which contains the
						definitions for project variables like "${PROJECT_BASEDIR}" that can be used in the
						"dms.nsi" and "setup.nsi" files.
					-->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>nsis-maven-plugin</artifactId>
						<version>1.0-SNAPSHOT</version>
						<executions>
							<execution>
								<id>build-setup-windows</id>
								<configuration>
									<makensisBin>${makensis-bin}</makensisBin>
									<outputFile>${project.build.directory}/UMS-setup.exe</outputFile>
									<setupScript>${project.external-resources}/nsis/setup.nsi</setupScript>
								</configuration>
								<phase>package</phase>
								<goals>
									<goal>generate-project</goal>
									<goal>compile</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!--
			Windows standalone x86 profile: takes care of building the final package for Microsoft Windows
			that runs its own version of Java Runtime Environment
		-->
		<profile>
			<id>windows-standalone-x86</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<os>
					<family>windows</family>
				</os>
			</activation>

			<build>
				<plugins>
					<!-- Plugin to create the program executable to use our JRE instead of the system one -->
					<plugin>
						<groupId>com.akathist.maven.plugins.launch4j</groupId>
						<artifactId>launch4j-maven-plugin</artifactId>
						<version>1.7.25</version>
						<executions>
							<execution>
								<id>l4j-clui</id>
								<phase>package</phase>
								<goals>
									<goal>launch4j</goal>
								</goals>
								<configuration>
									<errTitle></errTitle>
									<cmdLine></cmdLine>
									<chdir>.</chdir>
									<priority>normal</priority>
									<downloadUrl>http://java.com/download</downloadUrl>
									<supportUrl></supportUrl>
									<stayAlive>false</stayAlive>
									<restartOnCrash>false</restartOnCrash>
									<manifest></manifest>
									<singleInstance>
										<mutexName>Universal Media Server</mutexName>
										<windowTitle>Universal Media Server</windowTitle>
									</singleInstance>
									<headerType>gui</headerType>
									<outfile>target/UMS.exe</outfile>
									<jar>ums.jar</jar>
									<classPath>
										<mainClass>net.pms.PMS</mainClass>
									</classPath>
									<dontWrapJar>true</dontWrapJar>
									<icon>src\main\external-resources\icon.ico</icon>
									<jre>
									  <path>jre-x86</path>
									  <bundledJre64Bit>false</bundledJre64Bit>
									  <bundledJreAsFallback>false</bundledJreAsFallback>
									  <minVersion>1.7.0</minVersion>
									  <maxVersion>1.8.0</maxVersion>
									  <jdkPreference>preferJdk</jdkPreference>
									  <runtimeBits>32/64</runtimeBits>
									  <opts>-Xmx768M -Djava.net.preferIPv4Stack=true -Dfile.encoding=UTF-8 -classpath update.jar;ums.jar net.pms.PMS</opts>
									</jre>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Plugin to assemble ums-x.x.x-jar-with-dependencies.jar -->
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<configuration>
							<descriptors>
								<descriptor>${project.basedir}/src/main/assembly/jar-with-dependencies.xml</descriptor>
							</descriptors>
							<archive>
								<manifest>
									<mainClass>net.pms.PMS</mainClass>
									<!--
										this is required to make the ImageIo image "plugins" provided by jai-imageio-core-standalone work.
										without it, the following exception is thrown when PMS starts:

										Configuration error: java.util.ServiceConfigurationError: javax.imageio.spi.ImageInputStreamSpi:
											Provider com.sun.media.imageioimpl.stream.ChannelImageInputStreamSpi could not be instantiated:
												java.lang.IllegalArgumentException: vendorName == null!

										See: https://thierrywasyl.wordpress.com/2009/07/24/jai-how-to-solve-vendorname-null-exception/
									-->
									<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
								</manifest>
							</archive>
						</configuration>
						<executions>
							<execution>
								<id>make-jar-with-dependencies-win</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>single</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<!--
						Plugin to move the ums-x.x.x-jar-with-dependencies.jar to ums.jar
					-->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.8</version>
						<executions>
							<execution>
								<id>process-resources-windows</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target unless="offline">
										<!-- Make sure the download folders exist -->
										<mkdir dir="${project.binaries}" />
										<mkdir dir="${project.binaries}/jre-x86" />
										<mkdir dir="${project.binaries}/jre-x86/bin" />
										<mkdir dir="${project.binaries}/jre-x86/bin/client" />
										<mkdir dir="${project.binaries}/jre-x86/bin/dtplugin" />
										<mkdir dir="${project.binaries}/jre-x86/bin/plugin2" />
										<mkdir dir="${project.binaries}/jre-x86/lib" />
										<mkdir dir="${project.binaries}/jre-x86/lib/applet" />
										<mkdir dir="${project.binaries}/jre-x86/lib/cmm" />
										<mkdir dir="${project.binaries}/jre-x86/lib/deploy" />
										<mkdir dir="${project.binaries}/jre-x86/lib/ext" />
										<mkdir dir="${project.binaries}/jre-x86/lib/fonts" />
										<mkdir dir="${project.binaries}/jre-x86/lib/i386" />
										<mkdir dir="${project.binaries}/jre-x86/lib/images" />
										<mkdir dir="${project.binaries}/jre-x86/lib/images/cursors" />
										<mkdir dir="${project.binaries}/jre-x86/lib/jfr" />
										<mkdir dir="${project.binaries}/jre-x86/lib/management" />
										<mkdir dir="${project.binaries}/jre-x86/lib/security" />
										<mkdir dir="${project.binaries}/jre-x86/lib/security/policy/limited" />
										<mkdir dir="${project.binaries}/jre-x86/lib/security/policy/unlimited" />
										<mkdir dir="${project.binaries}/win32" />
										<mkdir dir="${project.binaries}/win32/avisynth" />
										<mkdir dir="${project.binaries}/win32/codecs" />
										<mkdir dir="${project.binaries}/win32/dvrms" />
										<mkdir dir="${project.binaries}/win32/fonts" />
										<mkdir dir="${project.binaries}/win32/fonts/conf.avail" />
										<mkdir dir="${project.binaries}/win32/fonts/conf.d" />
										<mkdir dir="${project.binaries}/win32/interframe" />
										<mkdir dir="${project.binaries}/win32/mplayer" />
										<mkdir dir="${project.binaries}/win32/service" />

										<!-- Download all necessary Windows binaries. Keep the same structure because NSIS expects it that way. -->
										<get src="${project.binaries-base}/MediaInfo.dll?p=${binary-revision}" dest="${project.binaries}/MediaInfo.dll"  usetimestamp="true" />
										<get src="${project.binaries-base}/MediaInfo-License.html?p=${binary-revision}" dest="${project.binaries}/MediaInfo-License.html" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/LICENSE-dsnative.txt?p=${binary-revision}" dest="${project.binaries}/win32/LICENSE-dsnative.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/LICENSE-mplayer.txt?p=${binary-revision}" dest="${project.binaries}/win32/LICENSE-mplayer.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/builds.txt?p=${binary-revision}" dest="${project.binaries}/win32/builds.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/dcrawMS.exe?p=${binary-revision}" dest="${project.binaries}/win32/dcrawMS.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/ffmpeg.exe?p=${binary-revision}" dest="${project.binaries}/win32/ffmpeg.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/flac.exe?p=${binary-revision}" dest="${project.binaries}/win32/flac.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mencoder.exe?p=${binary-revision}" dest="${project.binaries}/win32/mencoder.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mplayer.exe?p=${binary-revision}" dest="${project.binaries}/win32/mplayer.exe"  usetimestamp="true" />
										<get src="${project.binaries-base}/win32/tsMuxeR.exe?p=${binary-revision}" dest="${project.binaries}/win32/tsMuxeR.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/tsMuxeR-new.exe?p=${binary-revision}" dest="${project.binaries}/win32/tsMuxeR-new.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/vcomp100.dll?p=${binary-revision}" dest="${project.binaries}/win32/vcomp100.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/avisynth/avisynth.exe?p=${binary-revision}" dest="${project.binaries}/win32/avisynth/avisynth.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/drv33260.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/drv33260.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/drv43260.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/drv43260.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/drvc.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/drvc.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/pncrt.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/pncrt.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/sipr3260.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/sipr3260.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/tokr3260.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/tokr3260.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/wma9dmod.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/wma9dmod.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/wmv9dmod.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/wmv9dmod.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/wmvdmod.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/wmvdmod.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/dvrms/ffmpeg_MPGMUX.exe?p=${binary-revision}" dest="${project.binaries}/win32/dvrms/ffmpeg_MPGMUX.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/dvrms/pthreadGC2.dll?p=${binary-revision}" dest="${project.binaries}/win32/dvrms/pthreadGC2.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/fonts.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/fonts.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/10-scale-bitmap-fonts.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/10-scale-bitmap-fonts.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/20-unhint-small-vera.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/20-unhint-small-vera.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/30-metric-aliases.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/30-metric-aliases.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/30-urw-aliases.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/30-urw-aliases.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/40-nonlatin.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/40-nonlatin.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/45-latin.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/45-latin.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/49-sansserif.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/49-sansserif.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/50-user.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/50-user.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/51-local.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/51-local.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/60-latin.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/60-latin.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/65-fonts-persian.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/65-fonts-persian.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/65-nonlatin.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/65-nonlatin.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/69-unifont.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/69-unifont.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/80-delicious.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/80-delicious.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/90-synthetic.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/90-synthetic.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/README?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/README" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/interframe/InterFrame2.avsi?p=${binary-revision}" dest="${project.binaries}/win32/interframe/InterFrame2.avsi" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/interframe/svpflow1.dll?p=${binary-revision}" dest="${project.binaries}/win32/interframe/svpflow1.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/interframe/svpflow2.dll?p=${binary-revision}" dest="${project.binaries}/win32/interframe/svpflow2.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/COPYRIGHT?p=${binary-revision}" dest="${project.binaries}/jre-x86/COPYRIGHT" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/LICENSE?p=${binary-revision}" dest="${project.binaries}/jre-x86/LICENSE" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/README.txt?p=${binary-revision}" dest="${project.binaries}/jre-x86/README.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/release?p=${binary-revision}" dest="${project.binaries}/jre-x86/release" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/THIRDPARTYLICENSEREADME.txt?p=${binary-revision}" dest="${project.binaries}/jre-x86/THIRDPARTYLICENSEREADME.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/THIRDPARTYLICENSEREADME-JAVAFX.txt?p=${binary-revision}" dest="${project.binaries}/jre-x86/THIRDPARTYLICENSEREADME-JAVAFX.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/Welcome.html?p=${binary-revision}" dest="${project.binaries}/jre-x86/Welcome.html" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-core-console-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-core-console-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-core-datetime-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-core-datetime-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-core-debug-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-core-debug-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-core-errorhandling-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-core-errorhandling-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-core-file-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-core-file-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-core-file-l1-2-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-core-file-l1-2-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-core-file-l2-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-core-file-l2-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-core-handle-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-core-handle-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-core-heap-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-core-heap-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-core-interlocked-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-core-interlocked-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-core-libraryloader-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-core-libraryloader-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-core-localization-l1-2-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-core-localization-l1-2-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-core-memory-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-core-memory-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-core-namedpipe-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-core-namedpipe-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-core-processenvironment-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-core-processenvironment-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-core-processthreads-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-core-processthreads-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-core-processthreads-l1-1-1.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-core-processthreads-l1-1-1.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-core-profile-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-core-profile-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-core-rtlsupport-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-core-rtlsupport-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-core-string-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-core-string-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-core-synch-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-core-synch-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-core-synch-l1-2-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-core-synch-l1-2-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-core-sysinfo-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-core-sysinfo-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-core-timezone-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-core-timezone-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-core-util-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-core-util-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-crt-conio-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-crt-conio-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-crt-convert-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-crt-convert-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-crt-environment-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-crt-environment-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-crt-filesystem-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-crt-filesystem-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-crt-heap-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-crt-heap-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-crt-locale-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-crt-locale-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-crt-math-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-crt-math-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-crt-multibyte-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-crt-multibyte-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-crt-private-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-crt-private-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-crt-process-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-crt-process-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-crt-runtime-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-crt-runtime-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-crt-stdio-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-crt-stdio-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-crt-string-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-crt-string-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-crt-time-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-crt-time-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/api-ms-win-crt-utility-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/api-ms-win-crt-utility-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/awt.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/awt.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/bci.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/bci.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/concrt140.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/concrt140.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/dcpr.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/dcpr.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/decora_sse.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/decora_sse.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/deploy.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/deploy.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/dt_shmem.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/dt_shmem.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/dt_socket.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/dt_socket.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/eula.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/eula.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/fontmanager.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/fontmanager.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/fxplugins.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/fxplugins.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/glass.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/glass.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/glib-lite.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/glib-lite.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/gstreamer-lite.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/gstreamer-lite.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/hprof.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/hprof.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/instrument.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/instrument.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/j2pcsc.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/j2pcsc.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/j2pkcs11.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/j2pkcs11.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/jaas_nt.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/jaas_nt.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/jabswitch.exe?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/jabswitch.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/java.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/java.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/java.exe?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/java.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/java_crw_demo.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/java_crw_demo.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/JavaAccessBridge-32.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/JavaAccessBridge-32.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/javacpl.cpl?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/javacpl.cpl" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/javacpl.exe?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/javacpl.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/javafx_font.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/javafx_font.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/javafx_font_t2k.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/javafx_font_t2k.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/javafx_iio.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/javafx_iio.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/java-rmi.exe?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/java-rmi.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/javaw.exe?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/javaw.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/javaws.exe?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/javaws.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/jawt.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/jawt.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/JAWTAccessBridge-32.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/JAWTAccessBridge-32.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/jdwp.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/jdwp.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/jfr.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/jfr.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/jfxmedia.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/jfxmedia.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/jfxwebkit.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/jfxwebkit.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/jjs.exe?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/jjs.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/jli.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/jli.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/jp2iexp.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/jp2iexp.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/jp2launcher.exe?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/jp2launcher.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/jp2native.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/jp2native.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/jp2ssv.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/jp2ssv.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/jpeg.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/jpeg.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/jsdt.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/jsdt.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/jsound.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/jsound.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/jsoundds.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/jsoundds.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/kcms.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/kcms.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/keytool.exe?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/keytool.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/kinit.exe?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/kinit.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/klist.exe?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/klist.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/ktab.exe?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/ktab.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/lcms.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/lcms.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/management.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/management.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/mlib_image.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/mlib_image.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/msvcp140.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/msvcp140.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/msvcr100.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/msvcr100.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/net.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/net.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/nio.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/nio.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/npt.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/npt.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/orbd.exe?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/orbd.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/pack200.exe?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/pack200.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/policytool.exe?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/policytool.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/prism_common.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/prism_common.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/prism_d3d.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/prism_d3d.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/prism_sw.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/prism_sw.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/resource.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/resource.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/rmid.exe?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/rmid.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/rmiregistry.exe?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/rmiregistry.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/servertool.exe?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/servertool.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/splashscreen.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/splashscreen.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/ssv.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/ssv.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/ssvagent.exe?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/ssvagent.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/sunec.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/sunec.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/sunmscapi.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/sunmscapi.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/t2k.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/t2k.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/tnameserv.exe?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/tnameserv.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/ucrtbase.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/ucrtbase.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/unpack.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/unpack.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/unpack200.exe?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/unpack200.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/vcruntime140.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/vcruntime140.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/verify.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/verify.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/w2k_lsa_auth.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/w2k_lsa_auth.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/WindowsAccessBridge-32.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/WindowsAccessBridge-32.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/wsdetect.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/wsdetect.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/zip.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/zip.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/client/classes.jsa?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/client/classes.jsa" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/client/jvm.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/client/jvm.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/client/Xusage.txt?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/client/Xusage.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/dtplugin/deployJava1.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/dtplugin/deployJava1.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/dtplugin/npdeployJava1.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/dtplugin/npdeployJava1.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/plugin2/msvcr100.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/plugin2/msvcr100.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/bin/plugin2/npjp2.dll?p=${binary-revision}" dest="${project.binaries}/jre-x86/bin/plugin2/npjp2.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/accessibility.properties?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/accessibility.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/calendars.properties?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/calendars.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/charsets.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/charsets.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/classlist?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/classlist" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/content-types.properties?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/content-types.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/currency.data?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/currency.data" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/deploy.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/deploy.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/flavormap.properties?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/flavormap.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/fontconfig.bfc?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/fontconfig.bfc" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/fontconfig.properties.src?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/fontconfig.properties.src" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/hijrah-config-umalqura.properties?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/hijrah-config-umalqura.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/javafx.properties?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/javafx.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/javaws.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/javaws.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/jce.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/jce.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/jfr.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/jfr.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/jfxswt.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/jfxswt.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/jsse.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/jsse.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/jvm.hprof.txt?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/jvm.hprof.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/logging.properties?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/logging.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/management-agent.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/management-agent.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/meta-index?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/meta-index" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/net.properties?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/net.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/plugin.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/plugin.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/psfont.properties.ja?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/psfont.properties.ja" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/psfontj2d.properties?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/psfontj2d.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/resources.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/resources.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/rt.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/rt.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/sound.properties?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/sound.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/tzdb.dat?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/tzdb.dat" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/tzmappings?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/tzmappings" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/cmm/CIEXYZ.pf?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/cmm/CIEXYZ.pf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/cmm/GRAY.pf?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/cmm/GRAY.pf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/cmm/LINEAR_RGB.pf?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/cmm/LINEAR_RGB.pf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/cmm/PYCC.pf?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/cmm/PYCC.pf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/cmm/sRGB.pf?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/cmm/sRGB.pf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/deploy/ffjcext.zip?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/deploy/ffjcext.zip" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/deploy/messages.properties?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/deploy/messages.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/deploy/messages_de.properties?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/deploy/messages_de.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/deploy/messages_es.properties?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/deploy/messages_es.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/deploy/messages_fr.properties?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/deploy/messages_fr.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/deploy/messages_it.properties?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/deploy/messages_it.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/deploy/messages_ja.properties?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/deploy/messages_ja.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/deploy/messages_ko.properties?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/deploy/messages_ko.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/deploy/messages_pt_BR.properties?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/deploy/messages_pt_BR.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/deploy/messages_sv.properties?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/deploy/messages_sv.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/deploy/messages_zh_CN.properties?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/deploy/messages_zh_CN.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/deploy/messages_zh_HK.properties?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/deploy/messages_zh_HK.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/deploy/messages_zh_TW.properties?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/deploy/messages_zh_TW.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/deploy/splash.gif?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/deploy/splash.gif" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/deploy/splash@2x.gif?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/deploy/splash@2x.gif" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/deploy/splash_11@2x-lic.gif?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/deploy/splash_11@2x-lic.gif" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/deploy/splash_11-lic.gif?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/deploy/splash_11-lic.gif" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/ext/access-bridge-32.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/ext/access-bridge-32.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/ext/cldrdata.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/ext/cldrdata.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/ext/dnsns.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/ext/dnsns.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/ext/jaccess.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/ext/jaccess.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/ext/jfxrt.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/ext/jfxrt.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/ext/localedata.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/ext/localedata.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/ext/meta-index?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/ext/meta-index" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/ext/nashorn.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/ext/nashorn.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/ext/sunec.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/ext/sunec.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/ext/sunjce_provider.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/ext/sunjce_provider.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/ext/sunmscapi.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/ext/sunmscapi.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/ext/sunpkcs11.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/ext/sunpkcs11.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/ext/zipfs.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/ext/zipfs.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/fonts/LucidaBrightDemiBold.ttf?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/fonts/LucidaBrightDemiBold.ttf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/fonts/LucidaBrightDemiItalic.ttf?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/fonts/LucidaBrightDemiItalic.ttf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/fonts/LucidaBrightItalic.ttf?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/fonts/LucidaBrightItalic.ttf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/fonts/LucidaBrightRegular.ttf?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/fonts/LucidaBrightRegular.ttf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/fonts/LucidaSansDemiBold.ttf?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/fonts/LucidaSansDemiBold.ttf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/fonts/LucidaSansRegular.ttf?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/fonts/LucidaSansRegular.ttf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/fonts/LucidaTypewriterBold.ttf?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/fonts/LucidaTypewriterBold.ttf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/fonts/LucidaTypewriterRegular.ttf?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/fonts/LucidaTypewriterRegular.ttf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/i386/jvm.cfg?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/i386/jvm.cfg" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/images/cursors/cursors.properties?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/images/cursors/cursors.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/images/cursors/invalid32x32.gif?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/images/cursors/invalid32x32.gif" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/images/cursors/win32_CopyDrop32x32.gif?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/images/cursors/win32_CopyDrop32x32.gif" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/images/cursors/win32_CopyNoDrop32x32.gif?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/images/cursors/win32_CopyNoDrop32x32.gif" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/images/cursors/win32_LinkDrop32x32.gif?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/images/cursors/win32_LinkDrop32x32.gif" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/images/cursors/win32_LinkNoDrop32x32.gif?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/images/cursors/win32_LinkNoDrop32x32.gif" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/images/cursors/win32_MoveDrop32x32.gif?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/images/cursors/win32_MoveDrop32x32.gif" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/images/cursors/win32_MoveNoDrop32x32.gif?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/images/cursors/win32_MoveNoDrop32x32.gif" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/jfr/default.jfc?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/jfr/default.jfc" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/jfr/profile.jfc?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/jfr/profile.jfc" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/management/jmxremote.access?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/management/jmxremote.access" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/management/jmxremote.password.template?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/management/jmxremote.password.template" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/management/management.properties?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/management/management.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/management/snmp.acl.template?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/management/snmp.acl.template" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/security/blacklist?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/security/blacklist" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/security/blacklisted.certs?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/security/blacklisted.certs" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/security/cacerts?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/security/cacerts" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/security/java.policy?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/security/java.policy" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/security/java.security?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/security/java.security" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/security/javaws.policy?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/security/javaws.policy" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/security/trusted.libraries?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/security/trusted.libraries" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/security/policy/limited/local_policy.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/security/policy/limited/local_policy.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/security/policy/limited/US_export_policy.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/security/policy/limited/US_export_policy.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/security/policy/unlimited/local_policy.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/security/policy/unlimited/local_policy.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x86/lib/security/policy/unlimited/US_export_policy.jar?p=${binary-revision}" dest="${project.binaries}/jre-x86/lib/security/policy/unlimited/US_export_policy.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mplayer/config?p=${binary-revision}" dest="${project.binaries}/win32/mplayer/config" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mplayer/input.conf?p=${binary-revision}" dest="${project.binaries}/win32/mplayer/input.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mplayer/subfont.ttf?p=${binary-revision}" dest="${project.binaries}/win32/mplayer/subfont.ttf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/service/wrapper-community-license-1.1.txt?p=${binary-revision}" dest="${project.binaries}/win32/service/wrapper-community-license-1.1.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/service/wrapper.conf?p=${binary-revision}" dest="${project.binaries}/win32/service/wrapper.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/service/wrapper.dll?p=${binary-revision}" dest="${project.binaries}/win32/service/wrapper.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/service/wrapper.exe?p=${binary-revision}" dest="${project.binaries}/win32/service/wrapper.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/service/wrapper.jar?p=${binary-revision}" dest="${project.binaries}/win32/service/wrapper.jar" usetimestamp="true" />

										<!-- Make sure the destination folder for the service wrapper exists and copy the files. -->
										<mkdir dir="${project.basedir}/win32/service" />
										<copy todir="${project.basedir}/win32/service" overwrite="true">
											<fileset dir="${project.binaries}/win32/service" />
										</copy>
									</target>
								</configuration>
							</execution>
							<execution>
								<id>prepare-package-windows</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<!-- Copy the ums-x.x.x-jar-with-dependencies.jar to ums.jar -->
										<copy file="${project.basedir}/target/${project.artifactId}-${project.version}-jar-with-dependencies.jar"
										      tofile="${project.basedir}/target/${project.artifactId}.jar" overwrite="true" />

										<!-- MediaInfo library needs to be in the standard library path to be found -->
										<copy file="${project.binaries}/MediaInfo.dll" todir="${project.basedir}" />
										<copy file="${project.binaries}/MediaInfo-License.html" todir="${project.basedir}" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!--
						Plugin to build a Windows installer using the nullsoft scriptable install system (NSIS)
						The "generate-project" goal generates a file "target/project.nsh", which contains the
						definitions for project variables like "${PROJECT_BASEDIR}" that can be used in the
						"pms.nsi" and "setup.nsi" files.
					-->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>nsis-maven-plugin</artifactId>
						<version>1.0-SNAPSHOT</version>
						<executions>
							<execution>
								<id>build-setup-windows</id>
								<configuration>
									<makensisBin>${makensis-bin}</makensisBin>
									<outputFile>${project.build.directory}/UMS-setup.exe</outputFile>
									<setupScript>${project.external-resources}/nsis/setup-standalone-x86.nsi</setupScript>
								</configuration>
								<phase>package</phase>
								<goals>
									<goal>generate-project</goal>
									<goal>compile</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!--
			Windows standalone x86 profile: takes care of building the final package for Microsoft Windows
			that runs its own version of Java Runtime Environment
		-->
		<profile>
			<id>windows-standalone-x64</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<os>
					<family>windows</family>
				</os>
			</activation>

			<build>
				<plugins>
					<!-- Plugin to create the program executable to use our JRE instead of the system one -->
					<plugin>
						<groupId>com.akathist.maven.plugins.launch4j</groupId>
						<artifactId>launch4j-maven-plugin</artifactId>
						<version>1.7.25</version>
						<executions>
							<execution>
								<id>l4j-clui</id>
								<phase>package</phase>
								<goals>
									<goal>launch4j</goal>
								</goals>
								<configuration>
									<errTitle></errTitle>
									<cmdLine></cmdLine>
									<chdir>.</chdir>
									<priority>normal</priority>
									<downloadUrl>http://java.com/download</downloadUrl>
									<supportUrl></supportUrl>
									<stayAlive>false</stayAlive>
									<restartOnCrash>false</restartOnCrash>
									<manifest></manifest>
									<singleInstance>
										<mutexName>Universal Media Server</mutexName>
										<windowTitle>Universal Media Server</windowTitle>
									</singleInstance>
									<headerType>gui</headerType>
									<outfile>target/UMS.exe</outfile>
									<jar>ums.jar</jar>
									<classPath>
										<mainClass>net.pms.PMS</mainClass>
									</classPath>
									<dontWrapJar>true</dontWrapJar>
									<icon>src\main\external-resources\icon.ico</icon>
									<jre>
									  <path>jre-x64</path>
									  <bundledJre64Bit>true</bundledJre64Bit>
									  <bundledJreAsFallback>false</bundledJreAsFallback>
									  <minVersion>1.7.0</minVersion>
									  <maxVersion>1.8.0</maxVersion>
									  <jdkPreference>preferJdk</jdkPreference>
									  <runtimeBits>64/32</runtimeBits>
									  <opts>-Xmx1280M -Djava.net.preferIPv4Stack=true -Dfile.encoding=UTF-8 -classpath update.jar;ums.jar net.pms.PMS</opts>
									</jre>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Plugin to assemble ums-x.x.x-jar-with-dependencies.jar -->
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<configuration>
							<descriptors>
								<descriptor>${project.basedir}/src/main/assembly/jar-with-dependencies.xml</descriptor>
							</descriptors>
							<archive>
								<manifest>
									<mainClass>net.pms.PMS</mainClass>
									<!--
										this is required to make the ImageIo image "plugins" provided by jai-imageio-core-standalone work.
										without it, the following exception is thrown when PMS starts:

										Configuration error: java.util.ServiceConfigurationError: javax.imageio.spi.ImageInputStreamSpi:
											Provider com.sun.media.imageioimpl.stream.ChannelImageInputStreamSpi could not be instantiated:
												java.lang.IllegalArgumentException: vendorName == null!

										See: https://thierrywasyl.wordpress.com/2009/07/24/jai-how-to-solve-vendorname-null-exception/
									-->
									<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
								</manifest>
							</archive>
						</configuration>
						<executions>
							<execution>
								<id>make-jar-with-dependencies-win</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>single</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<!--
						Plugin to move the ums-x.x.x-jar-with-dependencies.jar to ums.jar
					-->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.8</version>
						<executions>
							<execution>
								<id>process-resources-windows</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target unless="offline">
										<!-- Make sure the download folders exist -->
										<mkdir dir="${project.binaries}" />
										<mkdir dir="${project.binaries}/jre-x64" />
										<mkdir dir="${project.binaries}/jre-x64/bin" />
										<mkdir dir="${project.binaries}/jre-x64/bin/dtplugin" />
										<mkdir dir="${project.binaries}/jre-x64/bin/plugin2" />
										<mkdir dir="${project.binaries}/jre-x64/bin/server" />
										<mkdir dir="${project.binaries}/jre-x64/lib" />
										<mkdir dir="${project.binaries}/jre-x64/lib/amd64" />
										<mkdir dir="${project.binaries}/jre-x64/lib/applet" />
										<mkdir dir="${project.binaries}/jre-x64/lib/cmm" />
										<mkdir dir="${project.binaries}/jre-x64/lib/deploy" />
										<mkdir dir="${project.binaries}/jre-x64/lib/ext" />
										<mkdir dir="${project.binaries}/jre-x64/lib/fonts" />
										<mkdir dir="${project.binaries}/jre-x64/lib/images" />
										<mkdir dir="${project.binaries}/jre-x64/lib/images/cursors" />
										<mkdir dir="${project.binaries}/jre-x64/lib/jfr" />
										<mkdir dir="${project.binaries}/jre-x64/lib/management" />
										<mkdir dir="${project.binaries}/jre-x64/lib/security" />
										<mkdir dir="${project.binaries}/jre-x64/lib/security/policy/limited" />
										<mkdir dir="${project.binaries}/jre-x64/lib/security/policy/unlimited" />
										<mkdir dir="${project.binaries}/win32" />
										<mkdir dir="${project.binaries}/win32/avisynth" />
										<mkdir dir="${project.binaries}/win32/codecs" />
										<mkdir dir="${project.binaries}/win32/dvrms" />
										<mkdir dir="${project.binaries}/win32/fonts" />
										<mkdir dir="${project.binaries}/win32/fonts/conf.avail" />
										<mkdir dir="${project.binaries}/win32/fonts/conf.d" />
										<mkdir dir="${project.binaries}/win32/interframe" />
										<mkdir dir="${project.binaries}/win32/mplayer" />
										<mkdir dir="${project.binaries}/win32/service" />

										<!-- Download all necessary Windows binaries. Keep the same structure because NSIS expects it that way. -->
										<get src="${project.binaries-base}/MediaInfo64.dll?p=${binary-revision}" dest="${project.binaries}/MediaInfo64.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/MediaInfo-License.html?p=${binary-revision}" dest="${project.binaries}/MediaInfo-License.html" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/LICENSE-dsnative.txt?p=${binary-revision}" dest="${project.binaries}/win32/LICENSE-dsnative.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/LICENSE-mplayer.txt?p=${binary-revision}" dest="${project.binaries}/win32/LICENSE-mplayer.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/builds.txt?p=${binary-revision}" dest="${project.binaries}/win32/builds.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/dcrawMS.exe?p=${binary-revision}" dest="${project.binaries}/win32/dcrawMS.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/ffmpeg64.exe?p=${binary-revision}" dest="${project.binaries}/win32/ffmpeg64.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/flac.exe?p=${binary-revision}" dest="${project.binaries}/win32/flac.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mencoder.exe?p=${binary-revision}" dest="${project.binaries}/win32/mencoder.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mplayer.exe?p=${binary-revision}" dest="${project.binaries}/win32/mplayer.exe"  usetimestamp="true" />
										<get src="${project.binaries-base}/win32/tsMuxeR.exe?p=${binary-revision}" dest="${project.binaries}/win32/tsMuxeR.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/tsMuxeR-new.exe?p=${binary-revision}" dest="${project.binaries}/win32/tsMuxeR-new.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/vcomp100.dll?p=${binary-revision}" dest="${project.binaries}/win32/vcomp100.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/avisynth/avisynth.exe?p=${binary-revision}" dest="${project.binaries}/win32/avisynth/avisynth.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/drv33260.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/drv33260.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/drv43260.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/drv43260.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/drvc.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/drvc.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/pncrt.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/pncrt.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/sipr3260.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/sipr3260.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/tokr3260.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/tokr3260.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/wma9dmod.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/wma9dmod.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/wmv9dmod.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/wmv9dmod.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/wmvdmod.dll?p=${binary-revision}" dest="${project.binaries}/win32/codecs/wmvdmod.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/dvrms/ffmpeg_MPGMUX.exe?p=${binary-revision}" dest="${project.binaries}/win32/dvrms/ffmpeg_MPGMUX.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/dvrms/pthreadGC2.dll?p=${binary-revision}" dest="${project.binaries}/win32/dvrms/pthreadGC2.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/fonts.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/fonts.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/10-scale-bitmap-fonts.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/10-scale-bitmap-fonts.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/20-unhint-small-vera.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/20-unhint-small-vera.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/30-metric-aliases.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/30-metric-aliases.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/30-urw-aliases.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/30-urw-aliases.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/40-nonlatin.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/40-nonlatin.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/45-latin.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/45-latin.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/49-sansserif.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/49-sansserif.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/50-user.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/50-user.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/51-local.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/51-local.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/60-latin.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/60-latin.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/65-fonts-persian.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/65-fonts-persian.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/65-nonlatin.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/65-nonlatin.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/69-unifont.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/69-unifont.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/80-delicious.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/80-delicious.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/90-synthetic.conf?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/90-synthetic.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/README?p=${binary-revision}" dest="${project.binaries}/win32/fonts/conf.d/README" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/interframe/InterFrame2.avsi?p=${binary-revision}" dest="${project.binaries}/win32/interframe/InterFrame2.avsi" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/interframe/svpflow1.dll?p=${binary-revision}" dest="${project.binaries}/win32/interframe/svpflow1.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/interframe/svpflow2.dll?p=${binary-revision}" dest="${project.binaries}/win32/interframe/svpflow2.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/COPYRIGHT?p=${binary-revision}" dest="${project.binaries}/jre-x64/COPYRIGHT" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/LICENSE?p=${binary-revision}" dest="${project.binaries}/jre-x64/LICENSE" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/README.txt?p=${binary-revision}" dest="${project.binaries}/jre-x64/README.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/release?p=${binary-revision}" dest="${project.binaries}/jre-x64/release" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/THIRDPARTYLICENSEREADME.txt?p=${binary-revision}" dest="${project.binaries}/jre-x64/THIRDPARTYLICENSEREADME.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/THIRDPARTYLICENSEREADME-JAVAFX.txt?p=${binary-revision}" dest="${project.binaries}/jre-x64/THIRDPARTYLICENSEREADME-JAVAFX.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/Welcome.html?p=${binary-revision}" dest="${project.binaries}/jre-x64/Welcome.html" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-core-console-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-core-console-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-core-datetime-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-core-datetime-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-core-debug-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-core-debug-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-core-errorhandling-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-core-errorhandling-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-core-file-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-core-file-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-core-file-l1-2-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-core-file-l1-2-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-core-file-l2-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-core-file-l2-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-core-handle-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-core-handle-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-core-heap-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-core-heap-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-core-interlocked-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-core-interlocked-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-core-libraryloader-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-core-libraryloader-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-core-localization-l1-2-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-core-localization-l1-2-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-core-memory-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-core-memory-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-core-namedpipe-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-core-namedpipe-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-core-processenvironment-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-core-processenvironment-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-core-processthreads-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-core-processthreads-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-core-processthreads-l1-1-1.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-core-processthreads-l1-1-1.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-core-profile-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-core-profile-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-core-rtlsupport-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-core-rtlsupport-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-core-string-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-core-string-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-core-synch-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-core-synch-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-core-synch-l1-2-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-core-synch-l1-2-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-core-sysinfo-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-core-sysinfo-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-core-timezone-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-core-timezone-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-core-util-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-core-util-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-crt-conio-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-crt-conio-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-crt-convert-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-crt-convert-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-crt-environment-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-crt-environment-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-crt-filesystem-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-crt-filesystem-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-crt-heap-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-crt-heap-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-crt-locale-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-crt-locale-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-crt-math-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-crt-math-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-crt-multibyte-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-crt-multibyte-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-crt-private-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-crt-private-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-crt-process-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-crt-process-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-crt-runtime-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-crt-runtime-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-crt-stdio-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-crt-stdio-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-crt-string-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-crt-string-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-crt-time-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-crt-time-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/api-ms-win-crt-utility-l1-1-0.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/api-ms-win-crt-utility-l1-1-0.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/awt.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/awt.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/bci.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/bci.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/concrt140.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/concrt140.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/dcpr.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/dcpr.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/decora_sse.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/decora_sse.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/deploy.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/deploy.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/dt_shmem.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/dt_shmem.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/dt_socket.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/dt_socket.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/eula.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/eula.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/fontmanager.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/fontmanager.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/fxplugins.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/fxplugins.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/glass.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/glass.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/glib-lite.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/glib-lite.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/gstreamer-lite.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/gstreamer-lite.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/hprof.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/hprof.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/instrument.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/instrument.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/j2pcsc.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/j2pcsc.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/j2pkcs11.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/j2pkcs11.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/jaas_nt.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/jaas_nt.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/jabswitch.exe?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/jabswitch.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/java.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/java.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/java.exe?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/java.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/java_crw_demo.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/java_crw_demo.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/JavaAccessBridge-64.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/JavaAccessBridge-64.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/javacpl.cpl?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/javacpl.cpl" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/javacpl.exe?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/javacpl.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/javafx_font.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/javafx_font.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/javafx_font_t2k.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/javafx_font_t2k.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/javafx_iio.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/javafx_iio.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/java-rmi.exe?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/java-rmi.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/javaw.exe?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/javaw.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/javaws.exe?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/javaws.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/jawt.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/jawt.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/JAWTAccessBridge-64.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/JAWTAccessBridge-64.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/jdwp.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/jdwp.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/jfr.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/jfr.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/jfxmedia.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/jfxmedia.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/jfxwebkit.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/jfxwebkit.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/jjs.exe?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/jjs.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/jli.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/jli.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/jp2iexp.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/jp2iexp.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/jp2launcher.exe?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/jp2launcher.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/jp2native.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/jp2native.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/jp2ssv.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/jp2ssv.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/jpeg.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/jpeg.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/jsdt.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/jsdt.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/jsound.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/jsound.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/jsoundds.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/jsoundds.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/kcms.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/kcms.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/keytool.exe?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/keytool.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/kinit.exe?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/kinit.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/klist.exe?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/klist.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/ktab.exe?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/ktab.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/lcms.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/lcms.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/management.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/management.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/mlib_image.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/mlib_image.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/msvcp140.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/msvcp140.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/msvcr100.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/msvcr100.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/net.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/net.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/nio.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/nio.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/npt.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/npt.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/orbd.exe?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/orbd.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/pack200.exe?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/pack200.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/policytool.exe?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/policytool.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/prism_common.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/prism_common.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/prism_d3d.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/prism_d3d.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/prism_sw.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/prism_sw.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/resource.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/resource.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/rmid.exe?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/rmid.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/rmiregistry.exe?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/rmiregistry.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/servertool.exe?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/servertool.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/splashscreen.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/splashscreen.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/ssv.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/ssv.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/ssvagent.exe?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/ssvagent.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/sunec.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/sunec.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/sunmscapi.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/sunmscapi.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/t2k.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/t2k.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/tnameserv.exe?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/tnameserv.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/ucrtbase.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/ucrtbase.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/unpack.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/unpack.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/unpack200.exe?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/unpack200.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/vcruntime140.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/vcruntime140.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/verify.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/verify.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/w2k_lsa_auth.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/w2k_lsa_auth.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/WindowsAccessBridge-64.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/WindowsAccessBridge-64.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/wsdetect.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/wsdetect.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/zip.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/zip.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/dtplugin/deployJava1.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/dtplugin/deployJava1.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/dtplugin/npdeployJava1.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/dtplugin/npdeployJava1.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/plugin2/msvcr100.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/plugin2/msvcr100.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/plugin2/npjp2.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/plugin2/npjp2.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/server/classes.jsa?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/server/classes.jsa" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/server/jvm.dll?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/server/jvm.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/bin/server/Xusage.txt?p=${binary-revision}" dest="${project.binaries}/jre-x64/bin/server/Xusage.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/accessibility.properties?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/accessibility.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/calendars.properties?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/calendars.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/charsets.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/charsets.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/classlist?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/classlist" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/content-types.properties?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/content-types.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/currency.data?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/currency.data" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/deploy.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/deploy.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/flavormap.properties?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/flavormap.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/fontconfig.bfc?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/fontconfig.bfc" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/fontconfig.properties.src?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/fontconfig.properties.src" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/hijrah-config-umalqura.properties?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/hijrah-config-umalqura.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/javafx.properties?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/javafx.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/javaws.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/javaws.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/jce.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/jce.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/jfr.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/jfr.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/jfxswt.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/jfxswt.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/jsse.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/jsse.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/jvm.hprof.txt?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/jvm.hprof.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/logging.properties?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/logging.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/management-agent.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/management-agent.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/meta-index?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/meta-index" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/net.properties?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/net.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/plugin.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/plugin.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/psfont.properties.ja?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/psfont.properties.ja" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/psfontj2d.properties?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/psfontj2d.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/resources.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/resources.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/rt.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/rt.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/sound.properties?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/sound.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/tzdb.dat?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/tzdb.dat" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/tzmappings?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/tzmappings" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/cmm/CIEXYZ.pf?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/cmm/CIEXYZ.pf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/cmm/GRAY.pf?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/cmm/GRAY.pf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/cmm/LINEAR_RGB.pf?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/cmm/LINEAR_RGB.pf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/cmm/PYCC.pf?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/cmm/PYCC.pf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/cmm/sRGB.pf?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/cmm/sRGB.pf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/deploy/ffjcext.zip?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/deploy/ffjcext.zip" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/deploy/messages.properties?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/deploy/messages.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/deploy/messages_de.properties?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/deploy/messages_de.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/deploy/messages_es.properties?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/deploy/messages_es.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/deploy/messages_fr.properties?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/deploy/messages_fr.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/deploy/messages_it.properties?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/deploy/messages_it.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/deploy/messages_ja.properties?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/deploy/messages_ja.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/deploy/messages_ko.properties?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/deploy/messages_ko.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/deploy/messages_pt_BR.properties?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/deploy/messages_pt_BR.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/deploy/messages_sv.properties?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/deploy/messages_sv.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/deploy/messages_zh_CN.properties?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/deploy/messages_zh_CN.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/deploy/messages_zh_HK.properties?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/deploy/messages_zh_HK.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/deploy/messages_zh_TW.properties?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/deploy/messages_zh_TW.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/deploy/splash.gif?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/deploy/splash.gif" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/deploy/splash@2x.gif?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/deploy/splash@2x.gif" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/deploy/splash_11@2x-lic.gif?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/deploy/splash_11@2x-lic.gif" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/deploy/splash_11-lic.gif?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/deploy/splash_11-lic.gif" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/ext/access-bridge-64.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/ext/access-bridge-64.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/ext/cldrdata.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/ext/cldrdata.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/ext/dnsns.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/ext/dnsns.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/ext/jaccess.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/ext/jaccess.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/ext/jfxrt.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/ext/jfxrt.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/ext/localedata.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/ext/localedata.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/ext/meta-index?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/ext/meta-index" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/ext/nashorn.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/ext/nashorn.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/ext/sunec.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/ext/sunec.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/ext/sunjce_provider.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/ext/sunjce_provider.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/ext/sunmscapi.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/ext/sunmscapi.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/ext/sunpkcs11.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/ext/sunpkcs11.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/ext/zipfs.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/ext/zipfs.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/fonts/LucidaBrightDemiBold.ttf?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/fonts/LucidaBrightDemiBold.ttf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/fonts/LucidaBrightDemiItalic.ttf?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/fonts/LucidaBrightDemiItalic.ttf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/fonts/LucidaBrightItalic.ttf?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/fonts/LucidaBrightItalic.ttf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/fonts/LucidaBrightRegular.ttf?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/fonts/LucidaBrightRegular.ttf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/fonts/LucidaSansDemiBold.ttf?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/fonts/LucidaSansDemiBold.ttf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/fonts/LucidaSansRegular.ttf?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/fonts/LucidaSansRegular.ttf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/fonts/LucidaTypewriterBold.ttf?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/fonts/LucidaTypewriterBold.ttf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/fonts/LucidaTypewriterRegular.ttf?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/fonts/LucidaTypewriterRegular.ttf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/amd64/jvm.cfg?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/amd64/jvm.cfg" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/images/cursors/cursors.properties?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/images/cursors/cursors.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/images/cursors/invalid32x32.gif?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/images/cursors/invalid32x32.gif" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/images/cursors/win32_CopyDrop32x32.gif?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/images/cursors/win32_CopyDrop32x32.gif" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/images/cursors/win32_CopyNoDrop32x32.gif?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/images/cursors/win32_CopyNoDrop32x32.gif" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/images/cursors/win32_LinkDrop32x32.gif?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/images/cursors/win32_LinkDrop32x32.gif" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/images/cursors/win32_LinkNoDrop32x32.gif?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/images/cursors/win32_LinkNoDrop32x32.gif" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/images/cursors/win32_MoveDrop32x32.gif?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/images/cursors/win32_MoveDrop32x32.gif" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/images/cursors/win32_MoveNoDrop32x32.gif?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/images/cursors/win32_MoveNoDrop32x32.gif" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/jfr/default.jfc?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/jfr/default.jfc" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/jfr/profile.jfc?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/jfr/profile.jfc" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/management/jmxremote.access?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/management/jmxremote.access" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/management/jmxremote.password.template?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/management/jmxremote.password.template" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/management/management.properties?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/management/management.properties" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/management/snmp.acl.template?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/management/snmp.acl.template" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/security/blacklist?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/security/blacklist" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/security/blacklisted.certs?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/security/blacklisted.certs" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/security/cacerts?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/security/cacerts" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/security/java.policy?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/security/java.policy" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/security/java.security?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/security/java.security" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/security/javaws.policy?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/security/javaws.policy" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/security/trusted.libraries?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/security/trusted.libraries" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/security/policy/limited/local_policy.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/security/policy/limited/local_policy.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/security/policy/limited/US_export_policy.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/security/policy/limited/US_export_policy.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/security/policy/unlimited/local_policy.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/security/policy/unlimited/local_policy.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre-x64/lib/security/policy/unlimited/US_export_policy.jar?p=${binary-revision}" dest="${project.binaries}/jre-x64/lib/security/policy/unlimited/US_export_policy.jar" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mplayer/config?p=${binary-revision}" dest="${project.binaries}/win32/mplayer/config" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mplayer/input.conf?p=${binary-revision}" dest="${project.binaries}/win32/mplayer/input.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mplayer/subfont.ttf?p=${binary-revision}" dest="${project.binaries}/win32/mplayer/subfont.ttf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/service/wrapper-community-license-1.1.txt?p=${binary-revision}" dest="${project.binaries}/win32/service/wrapper-community-license-1.1.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/service/wrapper.conf?p=${binary-revision}" dest="${project.binaries}/win32/service/wrapper.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/service/wrapper.dll?p=${binary-revision}" dest="${project.binaries}/win32/service/wrapper.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/service/wrapper.exe?p=${binary-revision}" dest="${project.binaries}/win32/service/wrapper.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/service/wrapper.jar?p=${binary-revision}" dest="${project.binaries}/win32/service/wrapper.jar" usetimestamp="true" />

										<!-- Make sure the destination folder for the service wrapper exists and copy the files. -->
										<mkdir dir="${project.basedir}/win32/service" />
										<copy todir="${project.basedir}/win32/service" overwrite="true">
											<fileset dir="${project.binaries}/win32/service" />
										</copy>
									</target>
								</configuration>
							</execution>
							<execution>
								<id>prepare-package-windows</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<!-- Copy the ums-x.x.x-jar-with-dependencies.jar to ums.jar -->
										<copy file="${project.basedir}/target/${project.artifactId}-${project.version}-jar-with-dependencies.jar"
										      tofile="${project.basedir}/target/${project.artifactId}.jar" overwrite="true" />

										<!-- MediaInfo library needs to be in the standard library path to be found -->
										<copy file="${project.binaries}/MediaInfo64.dll" todir="${project.basedir}" />
										<copy file="${project.binaries}/MediaInfo-License.html" todir="${project.basedir}" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!--
						Plugin to build a Windows installer using the nullsoft scriptable install system (NSIS)
						The "generate-project" goal generates a file "target/project.nsh", which contains the
						definitions for project variables like "${PROJECT_BASEDIR}" that can be used in the
						"pms.nsi" and "setup.nsi" files.
					-->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>nsis-maven-plugin</artifactId>
						<version>1.0-SNAPSHOT</version>
						<executions>
							<execution>
								<id>build-setup-windows</id>
								<configuration>
									<makensisBin>${makensis-bin}</makensisBin>
									<outputFile>${project.build.directory}/UMS-setup.exe</outputFile>
									<setupScript>${project.external-resources}/nsis/setup-standalone-x64.nsi</setupScript>
								</configuration>
								<phase>package</phase>
								<goals>
									<goal>generate-project</goal>
									<goal>compile</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!--
			Linux profile: takes care of building the final package for Linux
		-->
		<profile>
			<id>linux</id>
			<!--
				this setting does the right thing on Linux
				and is needed for the Hudson profile to work
			-->
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>

			<build>
				<plugins>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<executions>
							<!-- Assemble a jar with dependencies -->
							<execution>
								<id>make-jar-with-dependencies-linux</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/jar-with-dependencies.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>

							<!-- Assemble the DMS distribution file. -->
							<execution>
								<id>build-pms-linux</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/assembly-linux.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!--
						Use the antrun plugin to:

						Download FFmpeg and tsMuxeR to ${project.binaries}
						Copy the dms-x.x.x-jar-with-dependencies.jar to dms.jar
					-->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.8</version>
						<executions>
							<execution>
								<id>process-resources-linux</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target unless="offline">
										<!-- Make sure the binaries folder exists -->
										<mkdir dir="${project.binaries}" />
										<mkdir dir="${project.binaries}/linux" />										

										<!-- Download binaries -->
										<get src="${project.binaries-base}/linux/ffmpeg?p=${binary-revision}" dest="${project.binaries}/linux/ffmpeg" usetimestamp="true" />
										<get src="${project.binaries-base}/linux/ffmpeg64?p=${binary-revision}" dest="${project.binaries}/linux/ffmpeg64" usetimestamp="true" />
										<get src="${project.binaries-base}/linux/tsMuxeR?p=${binary-revision}" dest="${project.binaries}/linux/tsMuxeR" usetimestamp="true" />
										<get src="${project.binaries-base}/linux/tsMuxeR-new?p=${binary-revision}" dest="${project.binaries}/linux/tsMuxeR-new" usetimestamp="true" />
										<get src="${project.binaries-base}/linux/tsMuxeR_licence.txt?p=${binary-revision}" dest="${project.binaries}/linux/tsMuxeR_license.txt" usetimestamp="true" />
									</target>
								</configuration>
							</execution>
							<execution>
								<id>copy-jar-with-dependencies-linux</id>
								<phase>package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<copy file="${project.basedir}/target/${project.artifactId}-${project.version}-jar-with-dependencies.jar"
										      tofile="${project.basedir}/target/ums.jar" overwrite="true" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!--
			Mac OSX Java 7 profile: takes care of building the final package for macOS using Java 7.
			Note: This does not make the .dmg you will have to do that manually. Use the open source dmgCreator
		-->
		<profile>
			<id>osx-java7</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-enforcer-plugin</artifactId>
						<version>1.4.1</version>
						<executions>
							<execution>
								<id>enforce-java</id>
								<goals>
									<goal>enforce</goal>
								</goals>
								<configuration>
									<rules>
										<requireJavaVersion>
											<version>[1.7.0-80,1.7.0-200]</version>
										</requireJavaVersion>
									</rules>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!--
						Plugin to download binaries before assembly
					-->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.8</version>
						<executions>
							<execution>
								<id>process-resources-osx-java-7</id>
								<phase>test</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<!-- Make sure the binaries folder exists -->
										<mkdir dir="${project.binaries}" />
										<mkdir dir="${project.binaries}/osx" />

										<!-- Download binaries -->
										<get src="${project.binaries-base}/osx/dcraw" dest="${project.binaries}/osx/dcraw" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/ffmpeg" dest="${project.binaries}/osx/ffmpeg" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/flac" dest="${project.binaries}/osx/flac" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/libmediainfo.dylib" dest="${project.binaries}/libmediainfo.dylib" usetimestamp="true" />
										<get src="${project.binaries-base}/MediaInfo-License.html" dest="${project.binaries}/MediaInfo-License.html" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/mencoder" dest="${project.binaries}/osx/mencoder" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/mplayer" dest="${project.binaries}/osx/mplayer" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/tsMuxeR" dest="${project.binaries}/osx/tsMuxeR" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/tsMuxeR-new" dest="${project.binaries}/osx/tsMuxeR-new" usetimestamp="true" />

										<!-- MediaInfo library needs to be in the standard library path to be found -->
										<copy file="${project.binaries}/libmediainfo.dylib" todir="${project.basedir}" />
										<copy file="${project.binaries}/MediaInfo-License.html" todir="${project.basedir}" />

										<!-- Make all downloaded binaries executable -->
										<chmod dir="${project.binaries}/osx" perm="a+x" includes="*" />
									</target>
								</configuration>
							</execution>
							<execution>
								<id>prepare-package-osx-java-7</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<!-- Make sure the target folder exists -->
										<mkdir dir="${project.build.directory}/${project.build.finalName}-distribution" />

										<!-- Create the shortcut to the Applications folder -->
										<exec executable="/usr/bin/osascript">
											<arg value="-e" />
											<arg value="tell application &quot;Finder&quot;" />
											<arg value="-e" />
											<arg value="set src to POSIX file &quot;/Applications&quot;" />
											<arg value="-e" />
											<arg value="set dest to POSIX file &quot;${project.build.directory}/${project.build.finalName}-distribution&quot;" />
											<arg value="-e" />
											<arg value="make new alias file to folder src at folder dest" />
											<arg value="-e" />
											<arg value="end tell" />
										</exec>
									</target>
								</configuration>
							</execution>
							<execution>
								<id>package app</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<taskdef name="bundleapp" classname="com.oracle.appbundler.AppBundlerTask"
											classpath="${basedir}/src/main/external-resources/lib/appbundler-1.3.UMS.jar"/>
										<bundleapp outputdirectory="${project.build.directory}/${project.build.finalName}-distribution"
										           name="${project.name}"
										           displayname="${project.name}"
										           executableName="UMS"
										           identifier="net.pms.PMS"
										           shortversion="${project.version.short}"
										           version="${project.version}"
										           icon="${project.basedir}/src/main/resources/images/logo.icns"
										           applicationCategory="public.app-category.entertainment"
										           workingdirectory="$APP_ROOT/Contents/Resources"
										           mainclassname="net.pms.PMS">
											<!--<runtime dir="/Library/Java/JavaVirtualMachines/jdk1.7.0_21.jdk/Contents/Home"/>-->
											<classpath file="${project.build.directory}/${project.build.finalName}-jar-with-dependencies.jar"/>
											<option value="-Xmx1280M"/>
											<option value="-Xss16M"/>
											<option value="-Dfile.encoding=UTF-8"/>
											<option value="-Djava.net.preferIPv4Stack=true"/>
											<option value="-Xdock:name=UMS"/>
										</bundleapp>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<executions>
							<!-- Assemble a jar with dependencies -->
							<execution>
								<id>make-jar-with-dependencies-osx-java-7</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/jar-with-dependencies.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>
							<!--
								Assemble the DMS files in the right place before
								moving them to the app Bundle.
							-->
							<execution>
								<id>make-assembly-osx-java-7</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/assembly-osx_java7_8.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!--
			macOS Java 8 profile: takes care of building the final package for macOS using Java 8.
			Note: This does not make the .dmg you will have to do that manually. Use the open source dmgCreator
		-->
		<profile>
			<id>osx-java8</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-enforcer-plugin</artifactId>
						<version>1.4.1</version>
						<executions>
							<execution>
								<id>enforce-java</id>
								<goals>
									<goal>enforce</goal>
								</goals>
								<configuration>
									<rules>
										<requireJavaVersion>
											<version>[1.8.0-51,1.8.0-200]</version>
										</requireJavaVersion>
									</rules>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!--
						Plugin to download binaries before assembly
					-->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.8</version>
						<executions>
							<execution>
								<id>process-resources-osx-java-8</id>
								<phase>test</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<!-- Make sure the binaries folder exists -->
										<mkdir dir="${project.binaries}" />
										<mkdir dir="${project.binaries}/osx" />

										<!-- Download binaries -->
										<get src="${project.binaries-base}/osx/dcraw" dest="${project.binaries}/osx/dcraw" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/ffmpeg" dest="${project.binaries}/osx/ffmpeg" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/flac" dest="${project.binaries}/osx/flac" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/libmediainfo.dylib" dest="${project.binaries}/libmediainfo.dylib" usetimestamp="true" />
										<get src="${project.binaries-base}/MediaInfo-License.html" dest="${project.binaries}/MediaInfo-License.html" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/mencoder" dest="${project.binaries}/osx/mencoder" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/mplayer" dest="${project.binaries}/osx/mplayer" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/tsMuxeR" dest="${project.binaries}/osx/tsMuxeR" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/tsMuxeR-new" dest="${project.binaries}/osx/tsMuxeR-new" usetimestamp="true" />

										<!-- MediaInfo library needs to be in the standard library path to be found -->
										<copy file="${project.binaries}/libmediainfo.dylib" todir="${project.basedir}" />
										<copy file="${project.binaries}/MediaInfo-License.html" todir="${project.basedir}" />

										<!-- Make all downloaded binaries executable -->
										<chmod dir="${project.binaries}/osx" perm="a+x" includes="*" />
									</target>
								</configuration>
							</execution>
							<execution>
								<id>prepare-package-osx-java-8</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<!-- Make sure the target folder exists -->
										<mkdir dir="${project.build.directory}/${project.build.finalName}-distribution" />

										<!-- Create the shortcut to the Applications folder -->
										<exec executable="/usr/bin/osascript">
											<arg value="-e" />
											<arg value="tell application &quot;Finder&quot;" />
											<arg value="-e" />
											<arg value="set src to POSIX file &quot;/Applications&quot;" />
											<arg value="-e" />
											<arg value="set dest to POSIX file &quot;${project.build.directory}/${project.build.finalName}-distribution&quot;" />
											<arg value="-e" />
											<arg value="make new alias file to folder src at folder dest" />
											<arg value="-e" />
											<arg value="end tell" />
										</exec>
									</target>
								</configuration>
							</execution>
							<execution>
								<id>package app</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<taskdef name="bundleapp" classname="com.oracle.appbundler.AppBundlerTask"
											classpath="${basedir}/src/main/external-resources/lib/appbundler-1.3.UMS.jar"/>
										<bundleapp outputdirectory="${project.build.directory}/${project.build.finalName}-distribution"
										           name="${project.name}"
										           displayname="${project.name}"
										           executableName="UMS"
										           identifier="net.pms.PMS"
										           shortversion="${project.version.short}"
										           version="${project.version}"
										           icon="${project.basedir}/src/main/resources/images/logo.icns"
										           applicationCategory="public.app-category.entertainment"
										           workingdirectory="$APP_ROOT/Contents/Resources"
										           mainclassname="net.pms.PMS">
											<classpath file="${project.build.directory}/${project.build.finalName}-jar-with-dependencies.jar"/>
											<option value="-Xmx1280M"/>
											<option value="-Xss16M"/>
											<option value="-Dfile.encoding=UTF-8"/>
											<option value="-Djava.net.preferIPv4Stack=true"/>
											<option value="-Xdock:name=UMS"/>
										</bundleapp>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<executions>
							<!-- Assemble a jar with dependencies -->
							<execution>
								<id>make-jar-with-dependencies-osx-java-8</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/jar-with-dependencies.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>
							<!--
								Assemble the DMS files in the right place before
								moving them to the app Bundle.
							-->
							<execution>
								<id>make-assembly-osx-java-8</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/assembly-osx_java7_8.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!--
			Hudson (windows-jar): minimal profile that builds dms.jar with the
			Windows JNA. The POSIX JNA causes snapshot builds to crash the JVM on
			Windows, whereas the Windows JNA only disables MediaInfo for Ubuntu
			users, who can still use ffmpeg.

			Another difference from the other profiles is that we don't download the
			binaries or build the tarball.
		-->
		<profile>
			<id>windows-jar</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<property>
					<name>env.HUDSON_URL</name>
				</property>
			</activation>

			<build>
				<plugins>
					<!-- Plugin to assemble a jar with dependencies -->
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<executions>
							<execution>
								<id>make-jar-with-dependencies-win</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/jar-with-dependencies.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!--
						Use the antrun plugin to: copy the
						dms-x.x.x-jar-with-dependencies.jar to dms.jar
					-->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.8</version>
						<executions>
							<execution>
								<id>copy-jar-with-dependencies-linux</id>
								<phase>package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<copy file="${project.basedir}/target/${project.artifactId}-${project.version}-jar-with-dependencies.jar"
										      tofile="${project.basedir}/target/ums.jar" overwrite="true" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>

				</plugins>
			</build>
		</profile>

		<!--
			This profile allows running DMS from inside Eclipse
			(Requires a "mvn clean package" to download the binaries first)
		-->
		<profile>
			<id>run-from-eclipse</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.5.0</version>
						<executions>
							<execution>
								<phase>test</phase>
								<goals>
									<goal>java</goal>
								</goals>
								<configuration>
									<classpathScope>test</classpathScope>
									<mainClass>net.pms.PMS</mainClass>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
