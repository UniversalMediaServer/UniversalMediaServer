<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<!--
		To build UMS, do:

			mvn clean package

		After building, the "target" directory will contain the binary.
		To generate a full source code report, do:

			mvn site

		After generating, the "target/site" directory will contain the reports.
	-->

	<modelVersion>4.0.0</modelVersion>
	<groupId>net.pms</groupId>
	<artifactId>ums</artifactId>
	<name>Universal Media Server</name>
	<packaging>jar</packaging>
	<version>13.8.0-SNAPSHOT</version>
	<url>https://www.universalmediaserver.com/</url>
	<inceptionYear>2012</inceptionYear>

	<organization>
		<name>Universal Media Server</name>
		<url>https://www.universalmediaserver.com/</url>
	</organization>
	<licenses>
		<license>
			<name>GNU General Public License version 2</name>
			<url>https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt</url>
			<distribution>manual</distribution>
		</license>
	</licenses>
	<description>
		Universal Media Server is a cross-platform DLNA-compliant UPnP Media Server.
		Originally written to support the PlayStation 3, Universal Media Server has been
		expanded to support a range of other media renderers, including smartphones,
		televisions, music players and more.
	</description>
	<scm>
		<connection>scm:git:git://github.com/UniversalMediaServer/UniversalMediaServer.git</connection>
		<developerConnection>scm:git:git@github.com:UniversalMediaServer/UniversalMediaServer.git</developerConnection>
		<tag>main</tag>
		<url>https://github.com/UniversalMediaServer/UniversalMediaServer</url>
	</scm>
	<issueManagement>
		<system>GitHub</system>
		<url>https://github.com/UniversalMediaServer/UniversalMediaServer/issues</url>
	</issueManagement>
	<properties>
		<!-- NSIS needs a version without "-SNAPSHOT" or "-b1" -->
		<project.version.short>13.8.0</project.version.short>
		<project.jre-version>17</project.jre-version>
		<jgoodies-forms-version>1.9.0</jgoodies-forms-version>

		<!-- Version 2.7.0 is the last free version. The latest libraries are shipped only with the commercial JGoodies Smart Client -->
		<jgoodies-looks-version>2.7.0</jgoodies-looks-version>

		<sevenzip-version>16.02-2.01</sevenzip-version>
		<twelvemonkeys-imageio-version>3.10.1</twelvemonkeys-imageio-version>

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.external-resources>${project.basedir}/src/main/external-resources</project.external-resources>
		<project.binaries>${project.basedir}/target/bin</project.binaries>

		<project.binaries-base>https://www.universalmediaserver.com/svn/binaries</project.binaries-base>

		<binary-revision>181</binary-revision>

		<exec-maven-plugin-version>3.1.1</exec-maven-plugin-version>
		<maven-antrun-plugin-version>3.1.0</maven-antrun-plugin-version>
		<maven-javadoc-plugin-version>3.4.1</maven-javadoc-plugin-version>
		<git-commit-id-plugin-version>4.9.10</git-commit-id-plugin-version>
		<maven-assembly-plugin-version>3.6.0</maven-assembly-plugin-version>
		<maven-enforcer-plugin-version>3.4.1</maven-enforcer-plugin-version>

		<!--
			org.slf4j:slf4j-api is shared with
				- net.pms:ums
				- com.rometools:rome
				- ch.qos.logback:logback-classic
				- com.github.junrar:junrar
				- org.digitalmediaserver:cuelib-core
				- su.litvak.chromecast:api-v2
				- fm.last:coverartarchive-api
				- com.github.oshi:oshi-core

			Check the org.slf4j:slf4j-api version of the other libraries before upgrading
		-->
		<slf4j-api-version>2.0.9</slf4j-api-version>

		<!--
			ch.qos.logback:logback-classic and logback-core is shared with
				- net.pms:ums
		-->
		<logback-version>1.4.11</logback-version>

		<!--
			com.fasterxml.jackson.core:logback-classic and logback-core is shared with
				- net.pms:ums
				- su.litvak.chromecast:api-v2
				- fm.last:coverartarchive-api
		-->
		<jackson.version>2.15.3</jackson.version>

		<surefire-version>3.2.2</surefire-version>

		<!--
			net.java.dev.jna:jna-platform is shared with
				- net.pms:ums
				- com.github.oshi:oshi-core

			Check the net.java.dev.jna:jna-platform version of the other libraries before upgrading
		-->
		<jna-version>5.13.0</jna-version>

		<!--
			 use the Windows makensis.exe for Windows builds unless
			 the system makensis is explicitly selected via the
			 system-makensis profile
		 -->
		<makensis-bin>${project.external-resources}/windows/nsis/makensis.exe</makensis-bin>
		<junit5.version>5.10.1</junit5.version>
		<maven.compiler.source>${project.jre-version}</maven.compiler.source>
		<maven.compiler.target>${project.jre-version}</maven.compiler.target>
	</properties>
	<pluginRepositories>
		<pluginRepository>
			<id>ossrh</id>
			<name>Sonatype OSS Repository</name>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
			<layout>default</layout>
		</pluginRepository>
	</pluginRepositories>
	<repositories>
	</repositories>
	<dependencies>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<!-- Check the org.slf4j:slf4j-api version of the other libraries before upgrading -->
			<version>${slf4j-api-version}</version>
		</dependency>
		<dependency>
		    <groupId>com.auth0</groupId>
		    <artifactId>java-jwt</artifactId>
		    <version>4.4.0</version>
		    <exclusions>
				<exclusion>
					<groupId>com.fasterxml.jackson.core</groupId>
					<artifactId>jackson-databind</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- TODO this can be removed when MEncoder is removed -->
		<dependency>
			<groupId>org.apache-extras.beanshell</groupId>
			<artifactId>bsh</artifactId>
			<version>2.0b6</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-collections4</artifactId>
			<version>4.4</version>
		</dependency>
		<dependency>
			<groupId>commons-configuration</groupId>
			<artifactId>commons-configuration</artifactId>
			<!--
				commons-logging:commons-logging is shared with
					- fm.last:coverartarchive-api

				Check the commons-logging:commons-logging version of the other libraries before upgrading
			-->
			<version>1.10</version>
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpasyncclient</artifactId>
			<version>4.1.5</version>
			<exclusions>
				<exclusion>
					<!-- lets us use a newer version of httpclient -->
					<groupId>org.apache.httpcomponents</groupId>
					<artifactId>httpclient</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<!--
				org.apache.httpcomponents:httpclient is shared with
					- net.pms:ums
					- org.apache.httpcomponents:httpasyncclient
					- fm.last:coverartarchive-api

				Check the org.apache.httpcomponents:httpclient version of the other libraries before upgrading
			-->
			<version>4.5.14</version>
			<exclusions>
				<exclusion>
					<!-- org.apache.httpcomponents:httpcore updated from httpasyncclient -->
					<groupId>org.apache.httpcomponents</groupId>
					<artifactId>httpcore</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<!--
				commons-io:commons-io is shared with
					- fm.last:coverartarchive-api

				Check the commons-io:commons-io version of the libraries before upgrading
			-->
			<version>2.15.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.13.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-text</artifactId>
			<version>1.11.0</version>
			<exclusions>
				<exclusion>
					<groupId>org.apache.commons</groupId>
					<artifactId>commons-lang3</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>2.1.214</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<!-- Check the org.slf4j:slf4j-api version of the other libraries before upgrading -->
			<version>${logback-version}</version>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>${logback-version}</version>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.10.1</version>
		</dependency>
		<dependency>
			<groupId>io.netty</groupId>
			<artifactId>netty</artifactId> <!-- Use 'netty-all' for 4.0 or above -->
			<version>3.10.6.Final</version>
			<scope>compile</scope>
		</dependency>

		<!-- maven replacement for nsisant-1.2.jar -->
		<dependency>
			<groupId>maven</groupId>
			<artifactId>maven-nsis-plugin</artifactId>
			<version>2.1</version>
		</dependency>
		<dependency>
			<groupId>com.rometools</groupId>
			<artifactId>rome</artifactId>
			<!-- Check the org.slf4j:slf4j-api version of the other libraries before upgrading -->
			<version>2.1.0</version>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>net.coobird</groupId>
			<artifactId>thumbnailator</artifactId>
			<version>0.4.20</version>
		</dependency>

		<!--
			If any ImageIO plugins are added or removed, corresponding changes
		 	must be made in src/main/external-resources/META-INF/services
		 -->
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-bmp</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-core</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-icns</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-iff</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-jpeg</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-hdr</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-metadata</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-pcx</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-pict</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-pnm</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-psd</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-sgi</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-tga</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-tiff</artifactId>
			<version>${twelvemonkeys-imageio-version}</version>
		</dependency>
		<dependency>
			<groupId>org.sejda.imageio</groupId>
			<artifactId>webp-imageio</artifactId>
			<version>0.1.6</version>
		</dependency>
		<dependency>
			<groupId>com.drewnoakes</groupId>
			<artifactId>metadata-extractor</artifactId>
			<version>2.18.0</version>
		</dependency>
		<dependency>
			<groupId>net.jthink</groupId>
			<artifactId>jaudiotagger</artifactId>
			<version>3.0.1</version>
		</dependency>
		<dependency>
			<groupId>com.jgoodies</groupId>
			<artifactId>jgoodies-forms</artifactId>
			<version>${jgoodies-forms-version}</version>
		</dependency>
		<dependency>
			<groupId>com.jgoodies</groupId>
			<artifactId>jgoodies-looks</artifactId>
			<version>${jgoodies-looks-version}</version>
		</dependency>
		<dependency>
			<groupId>com.github.junrar</groupId>
			<artifactId>junrar</artifactId>
			<!-- Check the org.slf4j:slf4j-api version of the other libraries before upgrading -->
			<version>7.5.5</version>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.digitalmediaserver</groupId>
			<artifactId>cuelib-core</artifactId>
			<!-- Check the org.slf4j:slf4j-api version of the other libraries before upgrading -->
			<version>2.0.0</version>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>xmlwise</groupId>
			<artifactId>xmlwise</artifactId>
			<version>1.2.11</version>
		</dependency>
		<dependency>
			<groupId>net.sf.sevenzipjbinding</groupId>
			<artifactId>sevenzipjbinding</artifactId>
			<version>${sevenzip-version}</version>
		</dependency>
		<dependency>
			<groupId>net.sf.sevenzipjbinding</groupId>
			<artifactId>sevenzipjbinding-all-platforms</artifactId>
			<version>${sevenzip-version}</version>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>${junit5.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<version>${junit5.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>net.java.dev.jna</groupId>
			<artifactId>jna</artifactId>
			<version>${jna-version}</version>
		</dependency>
		<dependency>
			<groupId>net.java.dev.jna</groupId>
			<artifactId>jna-platform</artifactId>
			<version>${jna-version}</version>
		</dependency>
		<dependency>
			<groupId>org.jupnp</groupId>
			<artifactId>org.jupnp</artifactId>
			<version>2.7.1</version>
		</dependency>
		<dependency>
			<groupId>org.jupnp</groupId>
			<artifactId>org.jupnp.support</artifactId>
			<version>2.7.1</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<!-- will include jackson-core and jackson-annotations -->
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>su.litvak.chromecast</groupId>
			<artifactId>api-v2</artifactId>
			<!-- Check the org.slf4j:slf4j-api version of the other libraries before upgrading -->
			<!-- Check the com.fasterxml.jackson.core version of the other libraries before upgrading -->
			<version>0.11.3</version>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.fasterxml.jackson.core</groupId>
					<artifactId>jackson-core</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.fasterxml.jackson.core</groupId>
					<artifactId>jackson-databind</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.fasterxml.jackson.core</groupId>
					<artifactId>jackson-annotations</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.ibm.icu</groupId>
			<artifactId>icu4j</artifactId>
			<version>74.1</version>
		</dependency>
		<dependency>
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>annotations</artifactId>
			<version>3.0.1u2</version>
		</dependency>
		<dependency>
			<groupId>fm.last</groupId>
			<artifactId>coverartarchive-api</artifactId>
			<!-- Check the org.slf4j:slf4j-api version of the other libraries before upgrading -->
			<!-- Check the com.fasterxml.jackson.core version of the other libraries before upgrading -->
			<!--
				commons-logging:commons-logging is shared with
					- commons-configuration:commons-configuration

				Check the commons-logging:commons-logging version of the other libraries before upgrading

				commons-io:commons-io is shared with
					- net.pms:dms

				Check the commons-io:commons-io version before upgrading
			-->
			<version>2.1.1</version>
			<exclusions>
				<!-- This should never have been a dependency in the first place -->
				<exclusion>
					<groupId>com.google.code.findbugs</groupId>
					<artifactId>jsr305</artifactId>
				</exclusion>
				<exclusion>
					<groupId>commons-io</groupId>
					<artifactId>commons-io</artifactId>
				</exclusion>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.httpcomponents</groupId>
					<artifactId>httpclient</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.fasterxml.jackson.core</groupId>
					<artifactId>jackson-core</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.fasterxml.jackson.core</groupId>
					<artifactId>jackson-databind</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.github.oshi</groupId>
			<artifactId>oshi-core</artifactId>
			<!-- Check the org.slf4j:slf4j-api version of the other libraries before upgrading -->
			<!-- Check the net.java.dev.jna:jna version of the other libraries before upgrading -->
			<!-- Check the net.java.dev.jna:jna-platform version of the other libraries before upgrading -->
			<version>6.4.7</version>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>net.java.dev.jna</groupId>
					<artifactId>jna</artifactId>
				</exclusion>
				<exclusion>
					<groupId>net.java.dev.jna</groupId>
					<artifactId>jna-platform</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- start of JAXB dependencies -->
		<dependency>
			<groupId>org.eclipse.angus</groupId>
			<artifactId>angus-activation</artifactId>
			<version>2.0.1</version>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.messaging.saaj</groupId>
			<artifactId>saaj-impl</artifactId>
			<version>3.0.3</version>
			<exclusions>
				<exclusion>
					<groupId>jakarta.activation</groupId>
					<artifactId>jakarta.activation-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.eclipse.angus</groupId>
					<artifactId>angus-activation</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-impl</artifactId>
			<version>4.0.4</version>
			<exclusions>
				<exclusion>
					<groupId>jakarta.activation</groupId>
					<artifactId>jakarta.activation-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.eclipse.angus</groupId>
					<artifactId>angus-activation</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- end of JAXB dependencies -->
		<dependency>
			<groupId>com.vdurmont</groupId>
			<artifactId>semver4j</artifactId>
			<version>3.1.0</version>
		</dependency>
		<dependency>
			<groupId>com.zaxxer</groupId>
			<artifactId>HikariCP</artifactId>
			<version>5.1.0</version>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>pl.jalokim.propertiestojson</groupId>
			<artifactId>java-properties-to-json</artifactId>
			<version>5.3.0</version>
			<exclusions>
				<!-- This should never have been a dependency in the first place -->
				<exclusion>
					<groupId>com.google.code.findbugs</groupId>
					<artifactId>jsr305</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.google.code.findbugs</groupId>
					<artifactId>annotations</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.google.guava</groupId>
					<artifactId>guava</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.projectlombok</groupId>
					<artifactId>lombok</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.commons</groupId>
					<artifactId>commons-lang3</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.google.code.gson</groupId>
					<artifactId>gson</artifactId>
				</exclusion>
				<exclusion>
					<groupId>commons-io</groupId>
					<artifactId>commons-io</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>at.favre.lib</groupId>
			<artifactId>bcrypt</artifactId>
			<version>0.10.2</version>
		</dependency>
		<dependency>
			<groupId>jakarta.servlet</groupId>
			<artifactId>jakarta.servlet-api</artifactId>
			<version>4.0.4</version>
			<type>jar</type>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>5.7.0</version>
			<scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.mockito/mockito-junit-jupiter -->
		<dependency>
		    <groupId>org.mockito</groupId>
		    <artifactId>mockito-junit-jupiter</artifactId>
		    <version>5.7.0</version>
		    <scope>test</scope>
		</dependency>
	</dependencies>
	<build>
		<defaultGoal>assembly:assembly</defaultGoal>

		<!-- specify how files in src/main/resources are bundled in the target jar -->
		<resources>
			<!-- 1) package unfiltered resources -->

			<!--
				This needs to be defined explicitly if a <resources>...</resources>
				section is used
			-->
			<resource>
				<directory>src/main/resources</directory>
				<!--
					By default, Maven packages resources in the top-level of the jar e.g.

						/example.res

					The old UMS ant build packaged them in a "resources" directory
					e.g:

						/resources/example.res

					Currently, we preserve the old destination. If this is ever changed
					to the Maven default, a handful of files will need to be changed to
					reference "/example.res" rather than "/resources/example.res"
				-->
				<targetPath>resources</targetPath>
				<excludes>
					<exclude>project.properties</exclude>
				</excludes>

				<!-- Avoid inadvertently filtering binaries -->
				<filtering>false</filtering>
			</resource>

			<!-- 2) package filtered resources -->
			<resource>
				<directory>src/main/resources</directory>
				<targetPath>resources</targetPath>
				<includes>
					<include>project.properties</include>
				</includes>

				<!-- Filter to replace Maven properties -->
				<filtering>true</filtering>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<includes>
					<include>project.properties</include>
				</includes>
				<targetPath>resources</targetPath>

				<!-- Enable the use of Maven properties -->
				<filtering>true</filtering>
			</testResource>
			<!--*.srt files to test charset detection-->
			<testResource>
				<directory>src/test/resources/net/pms/media/subtitle</directory>
				<includes>
					<include>*.srt</include>
				</includes>
				<targetPath>net/pms/media/subtitle</targetPath>
			</testResource>
			<!--*json file to test filename prettification-->
			<testResource>
				<directory>src/test/resources/net/pms/util</directory>
				<includes>
					<include>*.json</include>
				</includes>
				<targetPath>net/pms/util</targetPath>
			</testResource>
			<!--*media files to test transcoding and identification-->
			<testResource>
				<directory>src/test/resources/net/pms/dlna</directory>
				<includes>
					<include>*.*</include>
				</includes>
				<targetPath>net/pms/dlna</targetPath>
			</testResource>
		</testResources>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${surefire-version}</version>
					<configuration>
						<argLine>-Dfile.encoding=UTF-8</argLine>
					</configuration>
				</plugin>

				<!--
					This plugin's configuration is used to run crowdin plugin from the command line,
					it has no influence on the Maven build itself.
				-->
				<plugin>
					<groupId>org.digitalmediaserver</groupId>
					<artifactId>crowdin-maven-plugin</artifactId>
					<version>0.4.1</version>
					<configuration>
						<project>${project}</project>
						<languageFilesFolder>${project.basedir}/src/main/resources/i18n</languageFilesFolder>
						<downloadFolder>${project.basedir}/extras/crowdin</downloadFolder>
						<statusFile>${project.basedir}/src/main/resources/languages.properties</statusFile>
						<crowdinServerId>crowdin-ums</crowdinServerId>
						<pushFileName>messages.properties</pushFileName>
						<pushFileTitle>Universal Media Server</pushFileTitle>
						<projectName>Universal Media Server</projectName>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>${maven-enforcer-plugin-version}</version>
				<executions>
					<execution>
						<id>enforce</id>
						<configuration>
							<rules>
								<dependencyConvergence/>
								<!-- this is not required, but is recommended for plugin version checks -->
								<requireMavenVersion>
									<version>3.0.0</version>
								</requireMavenVersion>
							</rules>
						</configuration>
						<goals>
							<goal>enforce</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!--
				Plugin to add git commit information properties.
				These are used in the project.properties files.
				See: https://github.com/ktoso/maven-git-commit-id-plugin
			-->
			<plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
				<version>${git-commit-id-plugin-version}</version>
				<executions>
					<execution>
						<phase>initialize</phase>
						<goals>
							<goal>revision</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<dateFormat>yyyy-MM-dd</dateFormat>
					<verbose>false</verbose>
					<generateGitPropertiesFile>false</generateGitPropertiesFile>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.11.0</version>
				<configuration>
					<source>${project.jre-version}</source>
					<target>${project.jre-version}</target>
					<testSource>${project.jre-version}</testSource>
					<testTarget>${project.jre-version}</testTarget>
					<compilerArgument>${compilerArgument}</compilerArgument>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.10</version>
				<configuration>
					<additionalProjectnatures>
						<projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
					</additionalProjectnatures>
					<additionalBuildcommands>
						<buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
					</additionalBuildcommands>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>
					<wtpversion>1.5</wtpversion>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>system-makensis</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>

			<properties>
				<!-- if selected, use the system makensis on Linux, Mac OS X &c. -->
				<makensis-bin>makensis</makensis-bin>
			</properties>
		</profile>

		<!--
			Windows profile: takes care of building the final package for Microsoft Windows
		-->
		<profile>
			<id>windows</id>

			<build>
				<plugins>
					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<version>1.14.2</version>
						<configuration>
							<installDirectory>react-client</installDirectory>
							<workingDirectory>react-client</workingDirectory>
						</configuration>
						<executions>
							<execution>
								<id>install node and yarn</id>
								<goals>
									<goal>install-node-and-yarn</goal>
								</goals>
								<configuration>
									<nodeVersion>v18.14.0</nodeVersion>
									<yarnVersion>v1.22.19</yarnVersion>
								</configuration>
							</execution>
							<!-- download Node.js dependencies -->
							<execution>
								<id>yarn install</id>
								<goals>
									<goal>yarn</goal>
								</goals>
							</execution>
							<!-- compile the react client to the web directory -->
							<execution>
								<id>yarn build</id>
								<goals>
									<goal>yarn</goal>
								</goals>
								<configuration>
									<environmentVariables>
										<PUBLIC_URL>/</PUBLIC_URL>
									</environmentVariables>
									<arguments>build</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- Plugin to assemble a jar with dependencies -->
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<configuration>
							<descriptors>
								<descriptor>${project.basedir}/src/main/assembly/jar-with-dependencies.xml</descriptor>
							</descriptors>
							<archive>
								<manifest>
									<mainClass>net.pms.PMS</mainClass>
									<!--
										this is required to make the ImageIo image "plugins" provided by jai-imageio-core-standalone work.
										without it, the following exception is thrown when UMS starts:

										Configuration error: java.util.ServiceConfigurationError: javax.imageio.spi.ImageInputStreamSpi:
											Provider com.sun.media.imageioimpl.stream.ChannelImageInputStreamSpi could not be instantiated:
												java.lang.IllegalArgumentException: vendorName == null!

										See: https://thierrywasyl.wordpress.com/2009/07/24/jai-how-to-solve-vendorname-null-exception/
									-->
									<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
								</manifest>
							</archive>
						</configuration>
						<executions>
							<execution>
								<id>make-jar-with-dependencies-win</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>single</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<!--
						Plugin to move the ums-x.x.x-jar-with-dependencies.jar to ums.jar
					-->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>${maven-antrun-plugin-version}</version>
						<executions>
							<execution>
								<id>process-resources-windows</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target unless="offline">
										<!-- Make sure the download folders exist -->
										<mkdir dir="${project.binaries}" />
										<mkdir dir="${project.binaries}/bin" />
										<mkdir dir="${project.binaries}/windows" />
										<mkdir dir="${project.binaries}/windows/avisynth" />
										<mkdir dir="${project.binaries}/windows/codecs" />
										<mkdir dir="${project.binaries}/windows/fonts" />
										<mkdir dir="${project.binaries}/windows/fonts/conf.avail" />
										<mkdir dir="${project.binaries}/windows/fonts/conf.d" />
										<mkdir dir="${project.binaries}/windows/x86" />
										<mkdir dir="${project.binaries}/windows/x86/jre${project.jre-version}" />
										<mkdir dir="${project.binaries}/windows/x86_64" />
										<mkdir dir="${project.binaries}/windows/x86_64/jre${project.jre-version}" />
										<mkdir dir="${project.binaries}/windows/mplayer" />

										<!-- Download all necessary Windows binaries. Keep the same structure because NSIS expects it that way. -->
										<get src="${project.binaries-base}/win32/MediaInfo.dll?p=${binary-revision}" dest="${project.binaries}/windows/x86/MediaInfo.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/MediaInfo64.dll?p=${binary-revision}" dest="${project.binaries}/windows/x86_64/MediaInfo.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/MediaInfo64.dll?p=${binary-revision}" dest="${project.binaries}/bin/MediaInfo.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/MediaInfo-License.html?p=${binary-revision}" dest="${project.binaries}/windows/MediaInfo-License.html" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/LICENSE-dsnative.txt?p=${binary-revision}" dest="${project.binaries}/windows/LICENSE-dsnative.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/LICENSE-mplayer.txt?p=${binary-revision}" dest="${project.binaries}/windows/LICENSE-mplayer.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/builds.txt?p=${binary-revision}" dest="${project.binaries}/windows/builds.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/dcrawMS.exe?p=${binary-revision}" dest="${project.binaries}/windows/dcrawMS.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/ffmpeg.exe?p=${binary-revision}" dest="${project.binaries}/windows/x86/ffmpeg.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/ffmpeg64.exe?p=${binary-revision}" dest="${project.binaries}/bin/ffmpeg.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/ffmpeg64.exe?p=${binary-revision}" dest="${project.binaries}/windows/x86_64/ffmpeg.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/flac.exe?p=${binary-revision}" dest="${project.binaries}/windows/flac.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mencoder.exe?p=${binary-revision}" dest="${project.binaries}/windows/mencoder.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mplayer.exe?p=${binary-revision}" dest="${project.binaries}/windows/mplayer.exe"  usetimestamp="true" />
										<get src="${project.binaries-base}/win32/tsMuxeR.exe?p=${binary-revision}" dest="${project.binaries}/windows/tsMuxeR.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/tsMuxeR-new.exe?p=${binary-revision}" dest="${project.binaries}/windows/tsMuxeR-new.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/vcomp100.dll?p=${binary-revision}" dest="${project.binaries}/windows/vcomp100.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/youtube-dl.exe?p=${binary-revision}" dest="${project.binaries}/windows/youtube-dl.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/drv33260.dll?p=${binary-revision}" dest="${project.binaries}/windows/codecs/drv33260.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/drv43260.dll?p=${binary-revision}" dest="${project.binaries}/windows/codecs/drv43260.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/drvc.dll?p=${binary-revision}" dest="${project.binaries}/windows/codecs/drvc.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/pncrt.dll?p=${binary-revision}" dest="${project.binaries}/windows/codecs/pncrt.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/sipr3260.dll?p=${binary-revision}" dest="${project.binaries}/windows/codecs/sipr3260.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/tokr3260.dll?p=${binary-revision}" dest="${project.binaries}/windows/codecs/tokr3260.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/wma9dmod.dll?p=${binary-revision}" dest="${project.binaries}/windows/codecs/wma9dmod.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/wmv9dmod.dll?p=${binary-revision}" dest="${project.binaries}/windows/codecs/wmv9dmod.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/wmvdmod.dll?p=${binary-revision}" dest="${project.binaries}/windows/codecs/wmvdmod.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/fonts.conf?p=${binary-revision}" dest="${project.binaries}/windows/fonts/fonts.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/10-scale-bitmap-fonts.conf?p=${binary-revision}" dest="${project.binaries}/windows/fonts/conf.d/10-scale-bitmap-fonts.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/20-unhint-small-vera.conf?p=${binary-revision}" dest="${project.binaries}/windows/fonts/conf.d/20-unhint-small-vera.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/30-metric-aliases.conf?p=${binary-revision}" dest="${project.binaries}/windows/fonts/conf.d/30-metric-aliases.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/30-urw-aliases.conf?p=${binary-revision}" dest="${project.binaries}/windows/fonts/conf.d/30-urw-aliases.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/40-nonlatin.conf?p=${binary-revision}" dest="${project.binaries}/windows/fonts/conf.d/40-nonlatin.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/45-latin.conf?p=${binary-revision}" dest="${project.binaries}/windows/fonts/conf.d/45-latin.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/49-sansserif.conf?p=${binary-revision}" dest="${project.binaries}/windows/fonts/conf.d/49-sansserif.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/50-user.conf?p=${binary-revision}" dest="${project.binaries}/windows/fonts/conf.d/50-user.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/51-local.conf?p=${binary-revision}" dest="${project.binaries}/windows/fonts/conf.d/51-local.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/60-latin.conf?p=${binary-revision}" dest="${project.binaries}/windows/fonts/conf.d/60-latin.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/65-fonts-persian.conf?p=${binary-revision}" dest="${project.binaries}/windows/fonts/conf.d/65-fonts-persian.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/65-nonlatin.conf?p=${binary-revision}" dest="${project.binaries}/windows/fonts/conf.d/65-nonlatin.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/69-unifont.conf?p=${binary-revision}" dest="${project.binaries}/windows/fonts/conf.d/69-unifont.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/80-delicious.conf?p=${binary-revision}" dest="${project.binaries}/windows/fonts/conf.d/80-delicious.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/90-synthetic.conf?p=${binary-revision}" dest="${project.binaries}/windows/fonts/conf.d/90-synthetic.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/README?p=${binary-revision}" dest="${project.binaries}/windows/fonts/conf.d/README" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/interframe/InterFrame2.avsi?p=${binary-revision}" dest="${project.binaries}/windows/avisynth/InterFrame2.avsi" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/interframe/svpflow1.dll?p=${binary-revision}" dest="${project.binaries}/windows/avisynth/svpflow1.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/interframe/svpflow2.dll?p=${binary-revision}" dest="${project.binaries}/windows/avisynth/svpflow2.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/jre${project.jre-version}-x64.zip?p=${binary-revision}" dest="${project.basedir}/target/jre${project.jre-version}-x64.zip" usetimestamp="true" />
										<unzip src="${project.basedir}/target/jre${project.jre-version}-x64.zip" dest="${project.binaries}/windows/x86_64/jre${project.jre-version}">
											<cutdirsmapper dirs="1" />
										</unzip>
										<get src="${project.binaries-base}/win32/jre${project.jre-version}-x86.zip?p=${binary-revision}" dest="${project.basedir}/target/jre${project.jre-version}-x86.zip" usetimestamp="true" />
										<unzip src="${project.basedir}/target/jre${project.jre-version}-x86.zip" dest="${project.binaries}/windows/x86/jre${project.jre-version}">
											<cutdirsmapper dirs="1" />
										</unzip>
										<get src="${project.binaries-base}/win32/mplayer/config?p=${binary-revision}" dest="${project.binaries}/windows/mplayer/config" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mplayer/input.conf?p=${binary-revision}" dest="${project.binaries}/windows/mplayer/input.conf" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mplayer/subfont.ttf?p=${binary-revision}" dest="${project.binaries}/windows/mplayer/subfont.ttf" usetimestamp="true" />

										<!-- Make sure the download folders exist -->
									</target>
								</configuration>
							</execution>
							<execution>
								<id>prepare-package-windows</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<!-- Copy ums-x.x.x-jar-with-dependencies.jar to ums.jar -->
										<copy file="${project.basedir}/target/${project.artifactId}-${project.version}-jar-with-dependencies.jar"
													tofile="${project.basedir}/target/ums.jar" overwrite="true" />

										<!-- Copy the wrapper to its destination -->
										<mkdir dir="${project.binaries}/windows/service" />
										<copy todir="${project.binaries}/windows/service" overwrite="true">
											<fileset dir="${project.external-resources}/windows/wrapper">
												<exclude name="x86/"/>
												<exclude name="x86_64/"/>
											</fileset>
										</copy>
										<mkdir dir="${project.binaries}/windows/x86/service" />
										<copy todir="${project.binaries}/windows/x86/service" overwrite="true">
											<fileset dir="${project.external-resources}/windows/wrapper/x86" />
										</copy>
										<mkdir dir="${project.binaries}/windows/x86_64/service" />
										<copy todir="${project.binaries}/windows/x86_64/service" overwrite="true">
											<fileset dir="${project.external-resources}/windows/wrapper/x86_64" />
										</copy>

										<!-- Copy the ctrlsender.exe -->
										<copy file="${project.external-resources}/windows/ctrlsender/ctrlsender.exe" todir="${project.binaries}/windows" />

										<!-- Copy the custom jnidispatch.dll for Windows XP -->
										<mkdir dir="${project.binaries}/windows/winxp" />
										<copy file="${project.external-resources}/windows/winxp/jnidispatch.dll" todir="${project.binaries}/windows/winxp" />

										<!-- Copy avisynth -->
										<mkdir dir="${project.binaries}/windows/x86_64/avisynth" />
										<copy file="${project.external-resources}/windows/avisynth/x64/AviSynth.dll" todir="${project.binaries}/windows/x86_64" />
										<copy file="${project.external-resources}/windows/avisynth/x64/system/DevIL.dll" todir="${project.binaries}/windows/x86_64" />
										<copy todir="${project.binaries}/windows/x86_64/avisynth" overwrite="true">
											<fileset dir="${project.external-resources}/windows/avisynth/x64/plugins" />
										</copy>
										<mkdir dir="${project.binaries}/bin/avisynth" />
										<copy file="${project.external-resources}/windows/avisynth/x64/AviSynth.dll" todir="${project.binaries}/bin" />
										<copy file="${project.external-resources}/windows/avisynth/x64/system/DevIL.dll" todir="${project.binaries}/bin" />
										<copy todir="${project.binaries}/bin/avisynth" overwrite="true">
											<fileset dir="${project.external-resources}/windows/avisynth/x64/plugins" />
										</copy>
										<copy file="${project.external-resources}/windows/avisynth/x86/AviSynth.dll" todir="${project.binaries}/windows/x86" />
										<copy file="${project.external-resources}/windows/avisynth/x86/system/DevIL.dll" todir="${project.binaries}/windows/x86" />
										<mkdir dir="${project.binaries}/windows/x86/avisynth" />
										<copy todir="${project.binaries}/windows/x86/avisynth" overwrite="true">
											<fileset dir="${project.external-resources}/windows/avisynth/x86/plugins" />
										</copy>

										<!-- Copy convert2dto3d.avsi -->
										<copy file="${project.external-resources}/windows/avisynth/convert2dto3d.avsi" todir="${project.binaries}/windows/avisynth" />
										<copy file="${project.external-resources}/windows/avisynth/convert2dto3d.avsi" todir="${project.binaries}/bin/avisynth" />
										
										<!-- Copy CropResize.avsi -->
										<copy file="${project.external-resources}/windows/avisynth/CropResize/CropResize.avsi" todir="${project.binaries}/windows/avisynth" />
										<copy file="${project.external-resources}/windows/avisynth/CropResize/CropResize.avsi" todir="${project.binaries}/bin/avisynth" />

										<!-- Copy mvtools2 to its destination -->
										<copy todir="${project.binaries}/windows/x86_64/avisynth" overwrite="true">
											<fileset dir="${project.external-resources}/windows/avisynth/mvtools2/x64" />
										</copy>
										<copy todir="${project.binaries}/bin/avisynth" overwrite="true">
											<fileset dir="${project.external-resources}/windows/avisynth/mvtools2/x64" />
										</copy>
										<copy todir="${project.binaries}/windows/x86/avisynth" overwrite="true">
											<fileset dir="${project.external-resources}/windows/avisynth/mvtools2/x86" />
										</copy>
										
										<!-- Copy masktools2 to its destination -->
										<copy todir="${project.binaries}/windows/x86_64/avisynth" overwrite="true">
											<fileset dir="${project.external-resources}/windows/avisynth/masktools2/x64" />
										</copy>
										<copy todir="${project.binaries}/bin/avisynth" overwrite="true">
											<fileset dir="${project.external-resources}/windows/avisynth/masktools2/x64" />
										</copy>
										<copy todir="${project.binaries}/windows/x86/avisynth" overwrite="true">
											<fileset dir="${project.external-resources}/windows/avisynth/masktools2/x86" />
										</copy>										

										<!-- Copy ffms2 to its destination -->
										<copy todir="${project.binaries}/windows/avisynth" overwrite="true">
											<fileset dir="${project.external-resources}/windows/avisynth/ffms2">
												<exclude name="x86/"/>
												<exclude name="x64/"/>
											</fileset>
										</copy>
										<copy todir="${project.binaries}/bin/avisynth" overwrite="true">
											<fileset dir="${project.external-resources}/windows/avisynth/ffms2">
												<exclude name="x86/"/>
												<exclude name="x64/"/>
											</fileset>
										</copy>
										<copy todir="${project.binaries}/windows/x86_64/avisynth" overwrite="true">
											<fileset dir="${project.external-resources}/windows/avisynth/ffms2/x64" />
										</copy>
										<copy todir="${project.binaries}/bin/avisynth" overwrite="true">
											<fileset dir="${project.external-resources}/windows/avisynth/ffms2/x64" />
										</copy>
										<copy todir="${project.binaries}/windows/x86/avisynth" overwrite="true">
											<fileset dir="${project.external-resources}/windows/avisynth/ffms2/x86" />
										</copy>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!--
						Plugin to add scripts for nullsoft scriptable install system (NSIS).
						The filtered file "target/extra.nsh", contains the definitions for
						project variables like "${PROJECT_JRE_VERSION}" that can be used in the
						"pms.nsi" and "setup.nsi" files.
					-->
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<version>3.3.1</version>
						<executions>
							<execution>
								<id>copy-resources</id>
								<phase>package</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${basedir}/target</outputDirectory>
									<resources>          
										<resource>
											<directory>${project.external-resources}/windows/nsis-scripts</directory>
											<includes>
												<include>extra.nsh</include>
											</includes>
											<filtering>true</filtering>
										</resource>
										<resource>
											<directory>${project.external-resources}/windows/nsis-scripts</directory>
											<excludes>
												<exclude>extra.nsh</exclude>
											</excludes>
											<filtering>false</filtering>
										</resource>
									</resources>              
								</configuration>            
							</execution>
						</executions>
					</plugin>

					<!--
						Plugin to build a Windows installer using the nullsoft scriptable install system (NSIS)
						The "generate-project" goal generates a file "target/project.nsh", which contains the
						definitions for project variables like "${PROJECT_BASEDIR}" that can be used in the
						"pms.nsi" and "setup.nsi" files.
					-->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>nsis-maven-plugin</artifactId>
						<version>1.0-SNAPSHOT</version>
						<executions>
							<execution>
								<id>build-ums-windows</id>
								<configuration>
									<makensisBin>${makensis-bin}</makensisBin>
									<outputFile>${project.build.directory}/UMS.exe</outputFile>
									<setupScript>${project.build.directory}/pms.nsi</setupScript>
								</configuration>
								<phase>package</phase>
								<goals>
									<goal>generate-project</goal>
									<goal>compile</goal>
								</goals>
							</execution>

							<execution>
								<id>build-setup-windows</id>
								<configuration>
									<makensisBin>${makensis-bin}</makensisBin>
									<outputFile>${project.build.directory}/UMS-setup.exe</outputFile>
									<setupScript>${project.build.directory}/setup.nsi</setupScript>
								</configuration>
								<phase>package</phase>
								<goals>
									<goal>generate-project</goal>
									<goal>compile</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>linux-arm64</id>
			<!--
				this setting does the right thing on Linux
				and is needed for the Hudson profile to work
			-->
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<version>1.14.2</version>
						<configuration>
							<installDirectory>react-client</installDirectory>
							<workingDirectory>react-client</workingDirectory>
						</configuration>
						<executions>
							<execution>
								<id>install node and yarn</id>
								<goals>
									<goal>install-node-and-yarn</goal>
								</goals>
								<configuration>
									<nodeVersion>v18.14.0</nodeVersion>
									<yarnVersion>v1.22.19</yarnVersion>
								</configuration>
							</execution>
							<!-- download Node.js dependencies -->
							<execution>
								<id>yarn install</id>
								<goals>
									<goal>yarn</goal>
								</goals>
							</execution>
							<!-- compile the react client to the web directory -->
							<execution>
								<id>yarn build</id>
								<goals>
									<goal>yarn</goal>
								</goals>
								<configuration>
									<environmentVariables>
										<PUBLIC_URL>/</PUBLIC_URL>
									</environmentVariables>
									<arguments>build</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<executions>
							<!-- Assemble a jar with dependencies -->
							<execution>
								<id>make-jar-with-dependencies-linux</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/jar-with-dependencies.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>

							<!-- Assemble the distribution file. -->
							<execution>
								<id>build-pms-linux</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/assembly-linux-arm64.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!--
						Use the antrun plugin to:

						Download the binaries to ${project.binaries}
						Copy the ums-x.x.x-jar-with-dependencies.jar to ums.jar
					-->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>${maven-antrun-plugin-version}</version>
						<executions>
							<execution>
								<id>process-resources-linux</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target unless="offline">
										<!-- Make sure the binaries folder exists -->
										<mkdir dir="${project.binaries}" />
										<mkdir dir="${project.binaries}/linux" />
										<mkdir dir="${project.binaries}/linux/arm64" />
										<mkdir dir="${project.binaries}/linux/arm64/ffmpeg" />

										<!-- Download binaries -->
										<get src="${project.binaries-base}/linux/arm64/ffmpeg/ffmpeg?p=${binary-revision}" dest="${project.binaries}/linux/arm64/ffmpeg/ffmpeg" usetimestamp="true" />
										<get src="${project.binaries-base}/linux/youtube-dl?p=${binary-revision}" dest="${project.binaries}/linux/youtube-dl" usetimestamp="true" />
									</target>
								</configuration>
							</execution>
							<execution>
								<id>copy-jar-with-dependencies-linux</id>
								<phase>package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<copy file="${project.basedir}/target/${project.artifactId}-${project.version}-jar-with-dependencies.jar"
											tofile="${project.basedir}/target/ums.jar" overwrite="true" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>linux-armel</id>
			<!--
				this setting does the right thing on Linux
				and is needed for the Hudson profile to work
			-->
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<version>1.14.2</version>
						<configuration>
							<installDirectory>react-client</installDirectory>
							<workingDirectory>react-client</workingDirectory>
						</configuration>
						<executions>
							<execution>
								<id>install node and yarn</id>
								<goals>
									<goal>install-node-and-yarn</goal>
								</goals>
								<configuration>
									<nodeVersion>v18.14.0</nodeVersion>
									<yarnVersion>v1.22.19</yarnVersion>
								</configuration>
							</execution>
							<!-- download Node.js dependencies -->
							<execution>
								<id>yarn install</id>
								<goals>
									<goal>yarn</goal>
								</goals>
							</execution>
							<!-- compile the react client to the web directory -->
							<execution>
								<id>yarn build</id>
								<goals>
									<goal>yarn</goal>
								</goals>
								<configuration>
									<environmentVariables>
										<PUBLIC_URL>/</PUBLIC_URL>
									</environmentVariables>
									<arguments>build</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<executions>
							<!-- Assemble a jar with dependencies -->
							<execution>
								<id>make-jar-with-dependencies-linux</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/jar-with-dependencies.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>

							<!-- Assemble the distribution file. -->
							<execution>
								<id>build-pms-linux</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/assembly-linux-armel.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!--
						Use the antrun plugin to:

						Download the binaries to ${project.binaries}
						Copy the ums-x.x.x-jar-with-dependencies.jar to ums.jar
					-->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>${maven-antrun-plugin-version}</version>
						<executions>
							<execution>
								<id>process-resources-linux</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target unless="offline">
										<!-- Make sure the binaries folder exists -->
										<mkdir dir="${project.binaries}" />
										<mkdir dir="${project.binaries}/linux" />
										<mkdir dir="${project.binaries}/linux/armel" />
										<mkdir dir="${project.binaries}/linux/armel/ffmpeg" />

										<!-- Download binaries -->
										<get src="${project.binaries-base}/linux/armel/ffmpeg/ffmpeg?p=${binary-revision}" dest="${project.binaries}/linux/armel/ffmpeg/ffmpeg" usetimestamp="true" />
										<get src="${project.binaries-base}/linux/youtube-dl?p=${binary-revision}" dest="${project.binaries}/linux/youtube-dl" usetimestamp="true" />
									</target>
								</configuration>
							</execution>
							<execution>
								<id>copy-jar-with-dependencies-linux</id>
								<phase>package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<copy file="${project.basedir}/target/${project.artifactId}-${project.version}-jar-with-dependencies.jar"
											tofile="${project.basedir}/target/ums.jar" overwrite="true" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>linux-armhf</id>
			<!--
				this setting does the right thing on Linux
				and is needed for the Hudson profile to work
			-->
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<version>1.14.2</version>
						<configuration>
							<installDirectory>react-client</installDirectory>
							<workingDirectory>react-client</workingDirectory>
						</configuration>
						<executions>
							<execution>
								<id>install node and yarn</id>
								<goals>
									<goal>install-node-and-yarn</goal>
								</goals>
								<configuration>
									<nodeVersion>v18.14.0</nodeVersion>
									<yarnVersion>v1.22.19</yarnVersion>
								</configuration>
							</execution>
							<!-- download Node.js dependencies -->
							<execution>
								<id>yarn install</id>
								<goals>
									<goal>yarn</goal>
								</goals>
							</execution>
							<!-- compile the react client to the web directory -->
							<execution>
								<id>yarn build</id>
								<goals>
									<goal>yarn</goal>
								</goals>
								<configuration>
									<environmentVariables>
										<PUBLIC_URL>/</PUBLIC_URL>
									</environmentVariables>
									<arguments>build</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<executions>
							<!-- Assemble a jar with dependencies -->
							<execution>
								<id>make-jar-with-dependencies-linux</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/jar-with-dependencies.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>

							<!-- Assemble the distribution file. -->
							<execution>
								<id>build-pms-linux</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/assembly-linux-armhf.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!--
						Use the antrun plugin to:

						Download the binaries to ${project.binaries}
						Copy the ums-x.x.x-jar-with-dependencies.jar to ums.jar
					-->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>${maven-antrun-plugin-version}</version>
						<executions>
							<execution>
								<id>process-resources-linux</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target unless="offline">
										<!-- Make sure the binaries folder exists -->
										<mkdir dir="${project.binaries}" />
										<mkdir dir="${project.binaries}/linux" />
										<mkdir dir="${project.binaries}/linux/armhf" />
										<mkdir dir="${project.binaries}/linux/armhf/ffmpeg" />

										<!-- Download binaries -->
										<get src="${project.binaries-base}/linux/armhf/ffmpeg/ffmpeg?p=${binary-revision}" dest="${project.binaries}/linux/armhf/ffmpeg/ffmpeg" usetimestamp="true" />
										<get src="${project.binaries-base}/linux/youtube-dl?p=${binary-revision}" dest="${project.binaries}/linux/youtube-dl" usetimestamp="true" />
									</target>
								</configuration>
							</execution>
							<execution>
								<id>copy-jar-with-dependencies-linux</id>
								<phase>package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<copy file="${project.basedir}/target/${project.artifactId}-${project.version}-jar-with-dependencies.jar"
											tofile="${project.basedir}/target/ums.jar" overwrite="true" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>linux-x86</id>
			<!--
				this setting does the right thing on Linux
				and is needed for the Hudson profile to work
			-->
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<version>1.14.2</version>
						<configuration>
							<installDirectory>react-client</installDirectory>
							<workingDirectory>react-client</workingDirectory>
						</configuration>
						<executions>
							<execution>
								<id>install node and yarn</id>
								<goals>
									<goal>install-node-and-yarn</goal>
								</goals>
								<configuration>
									<nodeVersion>v18.14.0</nodeVersion>
									<yarnVersion>v1.22.19</yarnVersion>
								</configuration>
							</execution>
							<!-- download Node.js dependencies -->
							<execution>
								<id>yarn install</id>
								<goals>
									<goal>yarn</goal>
								</goals>
							</execution>
							<!-- compile the react client to the web directory -->
							<execution>
								<id>yarn build</id>
								<goals>
									<goal>yarn</goal>
								</goals>
								<configuration>
									<environmentVariables>
										<PUBLIC_URL>/</PUBLIC_URL>
									</environmentVariables>
									<arguments>build</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<executions>
							<!-- Assemble a jar with dependencies -->
							<execution>
								<id>make-jar-with-dependencies-linux</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/jar-with-dependencies.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>

							<!-- Assemble the distribution file. -->
							<execution>
								<id>build-pms-linux</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/assembly-linux-x86.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!--
						Use the antrun plugin to:

						Download the binaries to ${project.binaries}
						Copy the ums-x.x.x-jar-with-dependencies.jar to ums.jar
					-->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>${maven-antrun-plugin-version}</version>
						<executions>
							<execution>
								<id>process-resources-linux</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target unless="offline">
										<!-- Make sure the binaries folder exists -->
										<mkdir dir="${project.binaries}" />
										<mkdir dir="${project.binaries}/linux" />
										<mkdir dir="${project.binaries}/linux/x86" />
										<mkdir dir="${project.binaries}/linux/x86/ffmpeg" />
										<mkdir dir="${project.binaries}/linux/x86/jre${project.jre-version}" />

										<!-- Download binaries -->
										<get src="${project.binaries-base}/linux/x86/ffmpeg/ffmpeg?p=${binary-revision}" dest="${project.binaries}/linux/x86/ffmpeg/ffmpeg" usetimestamp="true" />
										<get src="${project.binaries-base}/linux/x86/tsMuxeR?p=${binary-revision}" dest="${project.binaries}/linux/x86/tsMuxeR" usetimestamp="true" />
										<get src="${project.binaries-base}/linux/x86/tsMuxeR-new?p=${binary-revision}" dest="${project.binaries}/linux/x86/tsMuxeR-new" usetimestamp="true" />
										<get src="${project.binaries-base}/linux/x86/tsMuxeR_licence.txt?p=${binary-revision}" dest="${project.binaries}/linux/x86/tsMuxeR_license.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/linux/youtube-dl?p=${binary-revision}" dest="${project.binaries}/linux/youtube-dl" usetimestamp="true" />
										<get src="${project.binaries-base}/linux/x86/jre${project.jre-version}.tar.gz?p=${binary-revision}" dest="${project.binaries}/linux/x86/jre${project.jre-version}.tar.gz" usetimestamp="true" />
										<untar src="${project.binaries}/linux/x86/jre${project.jre-version}.tar.gz" dest="${project.binaries}/linux/x86/jre${project.jre-version}" compression="gzip">
											<cutdirsmapper dirs="1" />
										</untar>
									</target>
								</configuration>
							</execution>
							<execution>
								<id>copy-jar-with-dependencies-linux</id>
								<phase>package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<copy file="${project.basedir}/target/${project.artifactId}-${project.version}-jar-with-dependencies.jar"
											tofile="${project.basedir}/target/ums.jar" overwrite="true" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>linux-x86_64</id>
			<!--
				this setting does the right thing on Linux
				and is needed for the Hudson profile to work
			-->
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<version>1.14.2</version>
						<configuration>
							<installDirectory>react-client</installDirectory>
							<workingDirectory>react-client</workingDirectory>
						</configuration>
						<executions>
							<execution>
								<id>install node and yarn</id>
								<goals>
									<goal>install-node-and-yarn</goal>
								</goals>
								<configuration>
									<nodeVersion>v18.14.0</nodeVersion>
									<yarnVersion>v1.22.19</yarnVersion>
								</configuration>
							</execution>
							<!-- download Node.js dependencies -->
							<execution>
								<id>yarn install</id>
								<goals>
									<goal>yarn</goal>
								</goals>
							</execution>
							<!-- compile the react client to the web directory -->
							<execution>
								<id>yarn build</id>
								<goals>
									<goal>yarn</goal>
								</goals>
								<configuration>
									<environmentVariables>
										<PUBLIC_URL>/</PUBLIC_URL>
									</environmentVariables>
									<arguments>build</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<executions>
							<!-- Assemble a jar with dependencies -->
							<execution>
								<id>make-jar-with-dependencies-linux</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/jar-with-dependencies.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>

							<!-- Assemble the distribution file. -->
							<execution>
								<id>build-pms-linux</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/assembly-linux-x86_64.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!--
						Use the antrun plugin to:

						Download the binaries to ${project.binaries}
						Copy the ums-x.x.x-jar-with-dependencies.jar to ums.jar
					-->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>${maven-antrun-plugin-version}</version>
						<executions>
							<execution>
								<id>process-resources-linux</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target unless="offline">
										<!-- Make sure the folders exist -->
										<mkdir dir="${project.binaries}" />
										<mkdir dir="${project.binaries}/linux" />
										<mkdir dir="${project.binaries}/linux/x86_64" />
										<mkdir dir="${project.binaries}/linux/x86_64/ffmpeg" />
										<mkdir dir="${project.binaries}/linux/x86_64/jre${project.jre-version}" />

										<!-- Download binaries -->
										<get src="${project.binaries-base}/linux/x86_64/ffmpeg/ffmpeg?p=${binary-revision}" dest="${project.binaries}/linux/x86_64/ffmpeg/ffmpeg" usetimestamp="true" />
										<get src="${project.binaries-base}/linux/x86_64/tsMuxeR?p=${binary-revision}" dest="${project.binaries}/linux/x86_64/tsMuxeR" usetimestamp="true" />
										<get src="${project.binaries-base}/linux/x86_64/tsMuxeR-new?p=${binary-revision}" dest="${project.binaries}/linux/x86_64/tsMuxeR-new" usetimestamp="true" />
										<get src="${project.binaries-base}/linux/x86_64/tsMuxeR_licence.txt?p=${binary-revision}" dest="${project.binaries}/linux/x86_64/tsMuxeR_license.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/linux/youtube-dl?p=${binary-revision}" dest="${project.binaries}/linux/youtube-dl" usetimestamp="true" />
										<get src="${project.binaries-base}/linux/x86_64/jre${project.jre-version}.tar.gz?p=${binary-revision}" dest="${project.binaries}/linux/x86_64/jre${project.jre-version}.tar.gz" usetimestamp="true" />
										<untar src="${project.binaries}/linux/x86_64/jre${project.jre-version}.tar.gz" dest="${project.binaries}/linux/x86_64/jre${project.jre-version}" compression="gzip">
											<cutdirsmapper dirs="1" />
										</untar>
									</target>
								</configuration>
							</execution>
							<execution>
								<id>copy-jar-with-dependencies-linux</id>
								<phase>package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<copy file="${project.basedir}/target/${project.artifactId}-${project.version}-jar-with-dependencies.jar"
											tofile="${project.basedir}/target/ums.jar" overwrite="true" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!--
			macOS 10.15 (Catalina) onwards
			Note: This does not make the disk image (.dmg), see the wiki for instructions https://github.com/UniversalMediaServer/UniversalMediaServer/wiki/How-to-build-UMS#building-the-macos-disk-image
		-->
		<profile>
			<id>macos</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<version>1.14.2</version>
						<configuration>
							<installDirectory>react-client</installDirectory>
							<workingDirectory>react-client</workingDirectory>
						</configuration>
						<executions>
							<execution>
								<id>install node and yarn</id>
								<goals>
									<goal>install-node-and-yarn</goal>
								</goals>
								<configuration>
									<nodeVersion>v18.14.0</nodeVersion>
									<yarnVersion>v1.22.19</yarnVersion>
								</configuration>
							</execution>
							<!-- download Node.js dependencies -->
							<execution>
								<id>yarn install</id>
								<goals>
									<goal>yarn</goal>
								</goals>
							</execution>
							<!-- compile the react client to the web directory -->
							<execution>
								<id>yarn build</id>
								<goals>
									<goal>yarn</goal>
								</goals>
								<configuration>
									<environmentVariables>
										<PUBLIC_URL>/</PUBLIC_URL>
									</environmentVariables>
									<arguments>build</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-enforcer-plugin</artifactId>
						<version>${maven-enforcer-plugin-version}</version>
						<executions>
							<execution>
								<id>enforce-java</id>
								<goals>
									<goal>enforce</goal>
								</goals>
								<configuration>
									<rules>
										<requireJavaVersion>
											<version>${project.jre-version}</version>
										</requireJavaVersion>
									</rules>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!--
						Plugin to download binaries before assembly
					-->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>${maven-antrun-plugin-version}</version>
						<executions>
							<execution>
								<id>process-resources-macos</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target unless="offline">
										<!-- Make sure the binaries folder exists -->
										<mkdir dir="${project.binaries}" />
										<mkdir dir="${project.binaries}/osx" />
										<mkdir dir="${project.binaries}/osx/10.15" />

										<!-- Download binaries -->
										<get src="${project.binaries-base}/osx/dcraw?p=${binary-revision}" dest="${project.binaries}/osx/dcraw" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/libmediainfo.dylib?p=${binary-revision}" dest="${project.binaries}/libmediainfo.dylib" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/youtube-dl?p=${binary-revision}" dest="${project.binaries}/osx/youtube-dl" usetimestamp="true" />
										<get src="${project.binaries-base}/MediaInfo-License.html?p=${binary-revision}" dest="${project.binaries}/MediaInfo-License.html" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/10.15/ffmpeg?p=${binary-revision}" dest="${project.binaries}/osx/10.15/ffmpeg" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/10.15/flac?p=${binary-revision}" dest="${project.binaries}/osx/10.15/flac" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/10.15/mencoder?p=${binary-revision}" dest="${project.binaries}/osx/10.15/mencoder" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/10.15/mplayer?p=${binary-revision}" dest="${project.binaries}/osx/10.15/mplayer" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/10.15/tsMuxeR?p=${binary-revision}" dest="${project.binaries}/osx/10.15/tsMuxeR" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/10.15/tsMuxeR-new?p=${binary-revision}" dest="${project.binaries}/osx/10.15/tsMuxeR-new" usetimestamp="true" />

										<!-- MediaInfo library needs to be in the standard library path to be found -->
										<copy file="${project.binaries}/libmediainfo.dylib" todir="${project.basedir}" />
										<copy file="${project.binaries}/MediaInfo-License.html" todir="${project.basedir}" />

										<!-- Make all downloaded binaries executable -->
										<chmod dir="${project.binaries}/osx" perm="a+x" includes="*" />
										<chmod dir="${project.binaries}/osx/10.15" perm="a+x" includes="*" />
									</target>
								</configuration>
							</execution>
							<execution>
								<id>prepare-package-macos</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<!-- Make sure the target folder exists -->
										<mkdir dir="${project.build.directory}/${project.build.finalName}-distribution" />

										<!-- Create the shortcut to the Applications folder -->
										<exec executable="/usr/bin/osascript">
											<arg value="-e" />
											<arg value="tell application &quot;Finder&quot;" />
											<arg value="-e" />
											<arg value="set src to POSIX file &quot;/Applications&quot;" />
											<arg value="-e" />
											<arg value="set dest to POSIX file &quot;${project.build.directory}/${project.build.finalName}-distribution&quot;" />
											<arg value="-e" />
											<arg value="make new alias file to folder src at folder dest" />
											<arg value="-e" />
											<arg value="end tell" />
										</exec>
									</target>
								</configuration>
							</execution>
							<execution>
								<id>package app</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<property environment="env" />
									<target name="bundle" unless="jaronly">
										<!-- Obtain path to the selected JRE -->
										<exec executable="/usr/libexec/java_home"
													failonerror="true"
													outputproperty="runtime">
											<arg value="-v"/>
											<arg value="${project.jre-version}"/>
										</exec>

										<!-- This appbundler version is 5946207 from https://github.com/TheInfiniteKind/appbundler -->
										<taskdef name="bundleapp" classname="com.oracle.appbundler.AppBundlerTask"
											classpath="${basedir}/src/main/external-resources/osx/appbundler-1.0ea.jar"/>
										<bundleapp 
											jrePreferred="true"
											outputdirectory="${project.build.directory}/${project.build.finalName}-distribution"
											name="${project.name}"
											displayname="${project.name}"
											executableName="UMS"
											identifier="net.pms.PMS"
											shortversion="${project.version.short}"
											version="${project.version}"
											icon="${project.basedir}/src/main/resources/images/logo.icns"
											applicationCategory="public.app-category.entertainment"
											workingdirectory="$APP_ROOT/Contents/Resources"
											mainclassname="net.pms.PMS"
										>
											<!-- <runtime dir="${runtime}"/> -->
											<!-- the following is needed because jrePreferred option doesn't work, see https://github.com/TheInfiniteKind/appbundler/issues/73 -->
											<runtime dir="/Library/Java/JavaVirtualMachines/liberica-jre-${project.jre-version}.jre/Contents/Home"/>
											<classpath file="${project.build.directory}/${project.build.finalName}-jar-with-dependencies.jar"/>
											<option value="-Xmx2048M"/>
											<option value="-Xss16M"/>
											<option value="-Dfile.encoding=UTF-8"/>
											<option value="-Djava.net.preferIPv4Stack=true"/>
											<option value="-Xdock:name=UMS"/>
										</bundleapp>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<executions>
							<!-- Assemble a jar with dependencies -->
							<execution>
								<id>make-jar-with-dependencies-macos</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/jar-with-dependencies.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>
							<!--
								Assemble the files in the right place before
								moving them to the app Bundle.
							-->
							<execution>
								<id>make-assembly-macos</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/assembly-macos.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!--
			macOS on ARM (Apple Silicon) processors
			Note: This does not make the disk image (.dmg), see the wiki for instructions https://github.com/UniversalMediaServer/UniversalMediaServer/wiki/How-to-build-UMS#building-the-macos-disk-image
		-->
		<profile>
			<id>macos-arm</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<version>1.14.2</version>
						<configuration>
							<installDirectory>react-client</installDirectory>
							<workingDirectory>react-client</workingDirectory>
						</configuration>
						<executions>
							<execution>
								<id>install node and yarn</id>
								<goals>
									<goal>install-node-and-yarn</goal>
								</goals>
								<configuration>
									<nodeVersion>v18.14.0</nodeVersion>
									<yarnVersion>v1.22.19</yarnVersion>
								</configuration>
							</execution>
							<!-- download Node.js dependencies -->
							<execution>
								<id>yarn install</id>
								<goals>
									<goal>yarn</goal>
								</goals>
							</execution>
							<!-- compile the react client to the web directory -->
							<execution>
								<id>yarn build</id>
								<goals>
									<goal>yarn</goal>
								</goals>
								<configuration>
									<environmentVariables>
										<PUBLIC_URL>/</PUBLIC_URL>
									</environmentVariables>
									<arguments>build</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-enforcer-plugin</artifactId>
						<version>${maven-enforcer-plugin-version}</version>
						<executions>
							<execution>
								<id>enforce-java</id>
								<goals>
									<goal>enforce</goal>
								</goals>
								<configuration>
									<rules>
										<requireJavaVersion>
											<version>${project.jre-version}</version>
										</requireJavaVersion>
									</rules>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!--
						Plugin to download binaries before assembly
					-->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>${maven-antrun-plugin-version}</version>
						<executions>
							<execution>
								<id>process-resources-macos</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target unless="offline">
										<!-- Make sure the binaries folder exists -->
										<mkdir dir="${project.binaries}" />
										<mkdir dir="${project.binaries}/osx" />
										<mkdir dir="${project.binaries}/osx/10.15" />
										<mkdir dir="${project.binaries}/osx/arm" />

										<!-- Download binaries -->
										<get src="${project.binaries-base}/osx/dcraw?p=${binary-revision}" dest="${project.binaries}/osx/dcraw" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/libmediainfo.dylib?p=${binary-revision}" dest="${project.binaries}/libmediainfo.dylib" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/youtube-dl?p=${binary-revision}" dest="${project.binaries}/osx/youtube-dl" usetimestamp="true" />
										<get src="${project.binaries-base}/MediaInfo-License.html?p=${binary-revision}" dest="${project.binaries}/MediaInfo-License.html" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/arm/ffmpeg?p=${binary-revision}" dest="${project.binaries}/osx/arm/ffmpeg" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/10.15/flac?p=${binary-revision}" dest="${project.binaries}/osx/10.15/flac" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/10.15/mencoder?p=${binary-revision}" dest="${project.binaries}/osx/10.15/mencoder" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/10.15/mplayer?p=${binary-revision}" dest="${project.binaries}/osx/10.15/mplayer" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/10.15/tsMuxeR?p=${binary-revision}" dest="${project.binaries}/osx/10.15/tsMuxeR" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/10.15/tsMuxeR-new?p=${binary-revision}" dest="${project.binaries}/osx/10.15/tsMuxeR-new" usetimestamp="true" />

										<!-- MediaInfo library needs to be in the standard library path to be found -->
										<copy file="${project.binaries}/libmediainfo.dylib" todir="${project.basedir}" />
										<copy file="${project.binaries}/MediaInfo-License.html" todir="${project.basedir}" />

										<!-- Make all downloaded binaries executable -->
										<chmod dir="${project.binaries}/osx" perm="a+x" includes="*" />
										<chmod dir="${project.binaries}/osx/10.15" perm="a+x" includes="*" />
										<chmod dir="${project.binaries}/osx/arm" perm="a+x" includes="*" />
									</target>
								</configuration>
							</execution>
							<execution>
								<id>prepare-package-macos</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<!-- Make sure the target folder exists -->
										<mkdir dir="${project.build.directory}/${project.build.finalName}-distribution" />

										<!-- Create the shortcut to the Applications folder -->
										<exec executable="/usr/bin/osascript">
											<arg value="-e" />
											<arg value="tell application &quot;Finder&quot;" />
											<arg value="-e" />
											<arg value="set src to POSIX file &quot;/Applications&quot;" />
											<arg value="-e" />
											<arg value="set dest to POSIX file &quot;${project.build.directory}/${project.build.finalName}-distribution&quot;" />
											<arg value="-e" />
											<arg value="make new alias file to folder src at folder dest" />
											<arg value="-e" />
											<arg value="end tell" />
										</exec>
									</target>
								</configuration>
							</execution>
							<execution>
								<id>package app</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<property environment="env" />
									<target name="bundle">
										<!-- Obtain path to the selected JRE -->
										<exec executable="/usr/libexec/java_home"
													failonerror="true"
													outputproperty="runtime">
											<arg value="-v"/>
											<arg value="${project.jre-version}"/>
										</exec>

										<!-- This appbundler version is 5946207 from https://github.com/TheInfiniteKind/appbundler -->
										<taskdef name="bundleapp" classname="com.oracle.appbundler.AppBundlerTask"
											classpath="${basedir}/src/main/external-resources/osx/appbundler-1.0ea.jar"/>
										<bundleapp 
											jrePreferred="true"
											outputdirectory="${project.build.directory}/${project.build.finalName}-distribution"
											name="${project.name}"
											displayname="${project.name}"
											executableName="UMS"
											identifier="net.pms.PMS"
											shortversion="${project.version.short}"
											version="${project.version}"
											icon="${project.basedir}/src/main/resources/images/logo.icns"
											applicationCategory="public.app-category.entertainment"
											workingdirectory="$APP_ROOT/Contents/Resources"
											mainclassname="net.pms.PMS"
										>
											<!-- <runtime dir="${runtime}"/> -->
											<!-- the following is needed because jrePreferred option doesn't work, see https://github.com/TheInfiniteKind/appbundler/issues/73 -->
											<runtime dir="/Library/Java/JavaVirtualMachines/liberica-jre-${project.jre-version}.jre/Contents/Home"/>
											<classpath file="${project.build.directory}/${project.build.finalName}-jar-with-dependencies.jar"/>
											<option value="-Xmx2048M"/>
											<option value="-Xss16M"/>
											<option value="-Dfile.encoding=UTF-8"/>
											<option value="-Djava.net.preferIPv4Stack=true"/>
											<option value="-Xdock:name=UMS"/>
										</bundleapp>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<executions>
							<!-- Assemble a jar with dependencies -->
							<execution>
								<id>make-jar-with-dependencies-macos</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/jar-with-dependencies.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>
							<!--
								Assemble the files in the right place before
								moving them to the app Bundle.
							-->
							<execution>
								<id>make-assembly-macos</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/assembly-macos-arm.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!--
			macOS pre-10.15 (Catalina)
			Note: This does not make the disk image (.dmg), see the wiki for instructions https://github.com/UniversalMediaServer/UniversalMediaServer/wiki/How-to-build-UMS#building-the-macos-disk-image
		-->
		<profile>
			<id>macos-pre1015</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<version>1.14.2</version>
						<configuration>
							<installDirectory>react-client</installDirectory>
							<workingDirectory>react-client</workingDirectory>
						</configuration>
						<executions>
							<execution>
								<id>install node and yarn</id>
								<goals>
									<goal>install-node-and-yarn</goal>
								</goals>
								<configuration>
									<nodeVersion>v18.14.0</nodeVersion>
									<yarnVersion>v1.22.19</yarnVersion>
								</configuration>
							</execution>
							<!-- download Node.js dependencies -->
							<execution>
								<id>yarn install</id>
								<goals>
									<goal>yarn</goal>
								</goals>
							</execution>
							<!-- compile the react client to the web directory -->
							<execution>
								<id>yarn build</id>
								<goals>
									<goal>yarn</goal>
								</goals>
								<configuration>
									<environmentVariables>
										<PUBLIC_URL>/</PUBLIC_URL>
									</environmentVariables>
									<arguments>build</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-enforcer-plugin</artifactId>
						<version>${maven-enforcer-plugin-version}</version>
						<executions>
							<execution>
								<id>enforce-java</id>
								<goals>
									<goal>enforce</goal>
								</goals>
								<configuration>
									<rules>
										<requireJavaVersion>
											<version>${project.jre-version}</version>
										</requireJavaVersion>
									</rules>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!--
						Plugin to download binaries before assembly
					-->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>${maven-antrun-plugin-version}</version>
						<executions>
							<execution>
								<id>process-resources-macos-pre1015</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target unless="offline">
										<!-- Make sure the binaries folder exists -->
										<mkdir dir="${project.binaries}" />
										<mkdir dir="${project.binaries}/osx" />

										<!-- Download binaries -->
										<get src="${project.binaries-base}/osx/dcraw?p=${binary-revision}" dest="${project.binaries}/osx/dcraw" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/ffmpeg?p=${binary-revision}" dest="${project.binaries}/osx/ffmpeg" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/flac?p=${binary-revision}" dest="${project.binaries}/osx/flac" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/libmediainfo.dylib?p=${binary-revision}" dest="${project.binaries}/libmediainfo.dylib" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/youtube-dl?p=${binary-revision}" dest="${project.binaries}/osx/youtube-dl" usetimestamp="true" />
										<get src="${project.binaries-base}/MediaInfo-License.html?p=${binary-revision}" dest="${project.binaries}/MediaInfo-License.html" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/mencoder?p=${binary-revision}" dest="${project.binaries}/osx/mencoder" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/mplayer?p=${binary-revision}" dest="${project.binaries}/osx/mplayer" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/tsMuxeR?p=${binary-revision}" dest="${project.binaries}/osx/tsMuxeR" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/tsMuxeR-new?p=${binary-revision}" dest="${project.binaries}/osx/tsMuxeR-new" usetimestamp="true" />

										<!-- MediaInfo library needs to be in the standard library path to be found -->
										<copy file="${project.binaries}/libmediainfo.dylib" todir="${project.basedir}" />
										<copy file="${project.binaries}/MediaInfo-License.html" todir="${project.basedir}" />

										<!-- Make all downloaded binaries executable -->
										<chmod dir="${project.binaries}/osx" perm="a+x" includes="*" />
									</target>
								</configuration>
							</execution>
							<execution>
								<id>prepare-package-macos-pre1015</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<!-- Make sure the target folder exists -->
										<mkdir dir="${project.build.directory}/${project.build.finalName}-distribution" />

										<!-- Create the shortcut to the Applications folder -->
										<exec executable="/usr/bin/osascript">
											<arg value="-e" />
											<arg value="tell application &quot;Finder&quot;" />
											<arg value="-e" />
											<arg value="set src to POSIX file &quot;/Applications&quot;" />
											<arg value="-e" />
											<arg value="set dest to POSIX file &quot;${project.build.directory}/${project.build.finalName}-distribution&quot;" />
											<arg value="-e" />
											<arg value="make new alias file to folder src at folder dest" />
											<arg value="-e" />
											<arg value="end tell" />
										</exec>
									</target>
								</configuration>
							</execution>
							<execution>
								<id>package app</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<property environment="env" />
									<target name="bundle">
										<!-- Obtain path to the selected JRE -->
										<exec executable="/usr/libexec/java_home"
													failonerror="true"
													outputproperty="runtime">
											<arg value="-v"/>
											<arg value="${project.jre-version}"/>
										</exec>

										<!-- This appbundler version is 12422ee from https://github.com/TheInfiniteKind/appbundler -->
										<taskdef name="bundleapp" classname="com.oracle.appbundler.AppBundlerTask"
											classpath="${basedir}/src/main/external-resources/osx/appbundler-1.0ea.jar"/>
										<bundleapp 
											jrePreferred="true"
											outputdirectory="${project.build.directory}/${project.build.finalName}-distribution"
											name="${project.name}"
											displayname="${project.name}"
											executableName="UMS"
											identifier="net.pms.PMS"
											shortversion="${project.version.short}"
											version="${project.version}"
											icon="${project.basedir}/src/main/resources/images/logo.icns"
											applicationCategory="public.app-category.entertainment"
											workingdirectory="$APP_ROOT/Contents/Resources"
											mainclassname="net.pms.PMS"
										>
											<!-- <runtime dir="${runtime}"/> -->
											<!-- the following is needed because jrePreferred option doesn't work, see https://github.com/TheInfiniteKind/appbundler/issues/73 -->
											<runtime dir="/Library/Java/JavaVirtualMachines/liberica-jre-${project.jre-version}.jre/Contents/Home"/>
											<classpath file="${project.build.directory}/${project.build.finalName}-jar-with-dependencies.jar"/>
											<option value="-Xmx2048M"/>
											<option value="-Xss16M"/>
											<option value="-Dfile.encoding=UTF-8"/>
											<option value="-Djava.net.preferIPv4Stack=true"/>
											<option value="-Xdock:name=UMS"/>
										</bundleapp>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<executions>
							<!-- Assemble a jar with dependencies -->
							<execution>
								<id>make-jar-with-dependencies-macos-pre1015</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/jar-with-dependencies.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>
							<!--
								Assemble the files in the right place before
								moving them to the app Bundle.
							-->
							<execution>
								<id>make-assembly-macos-pre1015</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/assembly-macos-pre10.15.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!--
			Hudson (windows-jar): minimal profile that builds ums.jar with the
			Windows JNA. The POSIX JNA causes snapshot builds to crash the JVM on
			Windows, whereas the Windows JNA only disables MediaInfo for Ubuntu
			users, who can still use ffmpeg.

			Another difference from the other profiles is that we don't download the
			binaries or build the tarball.
		-->
		<profile>
			<id>windows-jar</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<property>
					<name>env.HUDSON_URL</name>
				</property>
			</activation>

			<build>
				<plugins>
					<!-- Plugin to assemble a jar with dependencies -->
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<executions>
							<execution>
								<id>make-jar-with-dependencies-win</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/jar-with-dependencies.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!--
						Use the antrun plugin to: copy the
						ums-x.x.x-jar-with-dependencies.jar to ums.jar
					-->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>${maven-antrun-plugin-version}</version>
						<executions>
							<execution>
								<id>copy-jar-with-dependencies-linux</id>
								<phase>package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<copy file="${project.basedir}/target/${project.artifactId}-${project.version}-jar-with-dependencies.jar"
													tofile="${project.basedir}/target/ums.jar" overwrite="true" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>

				</plugins>
			</build>
		</profile>

		<!--
			This profile allows running UMS from inside Eclipse
			(Requires a "mvn clean package" to download the binaries first)
		-->
		<profile>
			<id>run-from-eclipse</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${exec-maven-plugin-version}</version>
						<executions>
							<execution>
								<phase>test</phase>
								<goals>
									<goal>java</goal>
								</goals>
								<configuration>
									<classpathScope>test</classpathScope>
									<mainClass>net.pms.PMS</mainClass>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!--
			This profile is only active when the property "m2e.version"
			is set, which is the case when building in Eclipse with m2e.
		-->
		<profile>
			<id>m2e</id>
			<activation>
				<property>
					<name>m2e.version</name>
				</property>
			</activation>
			<build>
				<pluginManagement>
					<plugins>
						<!--
							This plugin's configuration is used to store Eclipse m2e settings only.
							It has no influence on the Maven build itself.
						-->
						<plugin>
							<groupId>org.eclipse.m2e</groupId>
							<artifactId>lifecycle-mapping</artifactId>
							<version>1.0.0</version>
							<configuration>
								<lifecycleMappingMetadata>
									<pluginExecutions>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>
													org.apache.maven.plugins
												</groupId>
												<artifactId>
													maven-antrun-plugin
												</artifactId>
												<versionRange>
													[1.7,)
												</versionRange>
												<goals>
													<goal>run</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore></ignore>
											</action>
										</pluginExecution>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>
													pl.project13.maven
												</groupId>
												<artifactId>
													git-commit-id-plugin
												</artifactId>
												<versionRange>
													[${git-commit-id-plugin-version},)
												</versionRange>
												<goals>
													<goal>revision</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore></ignore>
											</action>
										</pluginExecution>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>com.universalmediaserver</groupId>
												<artifactId>
													crowdin-maven-plugin
												</artifactId>
												<versionRange>
													[0.1,)
												</versionRange>
												<goals>
													<goal>fetch</goal>
													<goal>push</goal>
													<goal>build</goal>
													<goal>apply</goal>
													<goal>pull</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<execute></execute>
											</action>
										</pluginExecution>
									</pluginExecutions>
								</lifecycleMappingMetadata>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>

		<!--
			Quick run profiles: Builds, replaces and runs ums.jar in the default installation directory.
			For extra quickness, run with the skipTests and offline flags: mvn -P quickrun-windows package -DskipTests -Doffline
		-->
		<profile>
			<id>quickrun-windows-x86</id>
			<build>
				<plugins>
					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<version>1.14.2</version>
						<configuration>
							<installDirectory>react-client</installDirectory>
							<workingDirectory>react-client</workingDirectory>
						</configuration>
						<executions>
							<execution>
								<id>install node and yarn</id>
								<goals>
									<goal>install-node-and-yarn</goal>
								</goals>
								<configuration>
									<nodeVersion>v18.14.0</nodeVersion>
									<yarnVersion>v1.22.19</yarnVersion>
								</configuration>
							</execution>
							<!-- download Node.js dependencies -->
							<execution>
								<id>yarn install</id>
								<goals>
									<goal>yarn</goal>
								</goals>
							</execution>
							<!-- compile the react client to the web directory -->
							<execution>
								<id>yarn build</id>
								<goals>
									<goal>yarn</goal>
								</goals>
								<configuration>
									<environmentVariables>
										<PUBLIC_URL>/</PUBLIC_URL>
									</environmentVariables>
									<arguments>build</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- Plugin to assemble a jar with dependencies -->
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<configuration>
							<descriptors>
								<descriptor>${project.basedir}/src/main/assembly/jar-with-dependencies.xml</descriptor>
							</descriptors>
							<archive>
								<manifest>
									<mainClass>net.pms.PMS</mainClass>
									<!--
										this is required to make the ImageIo image "plugins" provided by jai-imageio-core-standalone work.
										without it, the following exception is thrown when UMS starts:

										Configuration error: java.util.ServiceConfigurationError: javax.imageio.spi.ImageInputStreamSpi:
											Provider com.sun.media.imageioimpl.stream.ChannelImageInputStreamSpi could not be instantiated:
												java.lang.IllegalArgumentException: vendorName == null!

										See: https://thierrywasyl.wordpress.com/2009/07/24/jai-how-to-solve-vendorname-null-exception/
									-->
									<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
								</manifest>
							</archive>
						</configuration>
						<executions>
							<execution>
								<id>make-jar-with-dependencies-win</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>single</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<!--
						Plugin to move the ums-x.x.x-jar-with-dependencies.jar to ums.jar
					-->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>${maven-antrun-plugin-version}</version>
						<executions>
							<execution>
								<id>prepare-package-windows</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<copy file="${project.basedir}/target/${project.artifactId}-${project.version}-jar-with-dependencies.jar"
													tofile="C:/Program Files (x86)/Universal Media Server/ums.jar" overwrite="true" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<version>3.3.1</version>
						<executions>
							<execution>
								<id>copy-resources</id>
								<phase>validate</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>C:/Program Files (x86)/Universal Media Server</outputDirectory>
									<fileMode>0644</fileMode>
									<directoryMode>0755</directoryMode>
									<resources>
										<resource>
											<directory>${project.external-resources}</directory>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${exec-maven-plugin-version}</version>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>C:/Program Files (x86)/Universal Media Server/UMS.exe</executable>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>quickrun-windows</id>
			<build>
				<plugins>
					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<version>1.14.2</version>
						<configuration>
							<installDirectory>react-client</installDirectory>
							<workingDirectory>react-client</workingDirectory>
						</configuration>
						<executions>
							<execution>
								<id>install node and yarn</id>
								<goals>
									<goal>install-node-and-yarn</goal>
								</goals>
								<configuration>
									<nodeVersion>v18.14.0</nodeVersion>
									<yarnVersion>v1.22.19</yarnVersion>
								</configuration>
							</execution>
							<!-- download Node.js dependencies -->
							<execution>
								<id>yarn install</id>
								<goals>
									<goal>yarn</goal>
								</goals>
							</execution>
							<!-- compile the react client to the web directory -->
							<execution>
								<id>yarn build</id>
								<goals>
									<goal>yarn</goal>
								</goals>
								<configuration>
									<environmentVariables>
										<PUBLIC_URL>/</PUBLIC_URL>
									</environmentVariables>
									<arguments>build</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- Plugin to assemble a jar with dependencies -->
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<configuration>
							<descriptors>
								<descriptor>${project.basedir}/src/main/assembly/jar-with-dependencies.xml</descriptor>
							</descriptors>
							<archive>
								<manifest>
									<mainClass>net.pms.PMS</mainClass>
									<!--
										this is required to make the ImageIo image "plugins" provided by jai-imageio-core-standalone work.
										without it, the following exception is thrown when UMS starts:

										Configuration error: java.util.ServiceConfigurationError: javax.imageio.spi.ImageInputStreamSpi:
											Provider com.sun.media.imageioimpl.stream.ChannelImageInputStreamSpi could not be instantiated:
												java.lang.IllegalArgumentException: vendorName == null!

										See: https://thierrywasyl.wordpress.com/2009/07/24/jai-how-to-solve-vendorname-null-exception/
									-->
									<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
								</manifest>
							</archive>
						</configuration>
						<executions>
							<execution>
								<id>make-jar-with-dependencies-win</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>single</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<!--
						Plugin to move the ums-x.x.x-jar-with-dependencies.jar to ums.jar
					-->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>${maven-antrun-plugin-version}</version>
						<executions>
							<execution>
								<id>prepare-package-windows</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<copy file="${project.basedir}/target/${project.artifactId}-${project.version}-jar-with-dependencies.jar"
													tofile="C:/Program Files/Universal Media Server/ums.jar" overwrite="true" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<version>3.3.1</version>
						<executions>
							<execution>
								<id>copy-resources</id>
								<phase>validate</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>C:/Program Files/Universal Media Server</outputDirectory>
									<fileMode>0644</fileMode>
									<directoryMode>0755</directoryMode>
									<resources>
										<resource>
											<directory>${project.external-resources}</directory>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${exec-maven-plugin-version}</version>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>C:/Program Files/Universal Media Server/UMS.exe</executable>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>quickrun-macos</id>
			<build>
				<plugins>
					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<version>1.14.2</version>
						<configuration>
							<installDirectory>react-client</installDirectory>
							<workingDirectory>react-client</workingDirectory>
						</configuration>
						<executions>
							<execution>
								<id>install node and yarn</id>
								<goals>
									<goal>install-node-and-yarn</goal>
								</goals>
								<configuration>
									<nodeVersion>v18.14.0</nodeVersion>
									<yarnVersion>v1.22.19</yarnVersion>
								</configuration>
							</execution>
							<!-- download Node.js dependencies -->
							<execution>
								<id>yarn install</id>
								<goals>
									<goal>yarn</goal>
								</goals>
							</execution>
							<!-- compile the react client to the web directory -->
							<execution>
								<id>yarn build</id>
								<goals>
									<goal>yarn</goal>
								</goals>
								<configuration>
									<environmentVariables>
										<PUBLIC_URL>/</PUBLIC_URL>
									</environmentVariables>
									<arguments>build</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- Plugin to assemble a jar with dependencies -->
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<configuration>
							<descriptors>
								<descriptor>${project.basedir}/src/main/assembly/jar-with-dependencies.xml</descriptor>
							</descriptors>
							<archive>
								<manifest>
									<mainClass>net.pms.PMS</mainClass>
									<!--
										this is required to make the ImageIo image "plugins" provided by jai-imageio-core-standalone work.
										without it, the following exception is thrown when UMS starts:

										Configuration error: java.util.ServiceConfigurationError: javax.imageio.spi.ImageInputStreamSpi:
											Provider com.sun.media.imageioimpl.stream.ChannelImageInputStreamSpi could not be instantiated:
												java.lang.IllegalArgumentException: vendorName == null!

										See: https://thierrywasyl.wordpress.com/2009/07/24/jai-how-to-solve-vendorname-null-exception/
									-->
									<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
								</manifest>
							</archive>
						</configuration>
						<executions>
							<execution>
								<id>make-jar-with-dependencies-win</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>single</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<!--
						Plugin to move the ums-x.x.x-jar-with-dependencies.jar to ums.jar
					-->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>${maven-antrun-plugin-version}</version>
						<executions>
							<execution>
								<id>prepare-package-windows</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<copy file="${project.basedir}/target/${project.artifactId}-${project.version}-jar-with-dependencies.jar"
											tofile="/Applications/Universal Media Server.app/Contents/Java/${project.artifactId}-${project.version}-jar-with-dependencies.jar" overwrite="true" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- Copy Web resources -->
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<version>3.3.1</version>
						<executions>
							<execution>
								<id>copy-resources</id>
								<phase>validate</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>/Applications/Universal Media Server.app/Contents/Resources</outputDirectory>
									<resources>
										<resource>
											<directory>${project.external-resources}</directory>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${exec-maven-plugin-version}</version>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>/Applications/Universal Media Server.app/Contents/MacOS/UMS</executable>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!--
			Testing profiles below
		-->
		<profile>
			<id>testing</id>
			<!--
				this setting does the right thing on Linux
				and is needed for the Hudson profile to work
			-->
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>

			<build>
				<plugins>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<executions>
							<!-- Assemble a jar with dependencies -->
							<execution>
								<id>make-jar-with-dependencies-testing</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/jar-with-dependencies.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>

							<!-- Assemble the distribution file. -->
							<execution>
								<id>build-ums-testing</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/assembly-testing.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
											<addDefaultImplementationEntries>true</addDefaultImplementationEntries> <!-- see above for documentation -->
										</manifest>
									</archive>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!--
						Use the antrun plugin to:

						Copy ums-x.x.x-jar-with-dependencies.jar to ums.jar
					-->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>${maven-antrun-plugin-version}</version>
						<executions>
							<execution>
								<id>copy-jar-with-dependencies-test</id>
								<phase>package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<copy file="${project.basedir}/target/${project.artifactId}-${project.version}-jar-with-dependencies.jar"
											tofile="${project.basedir}/target/ums.jar" overwrite="true" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>testing-macos</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<configuration>
							<descriptors>
								<descriptor>${project.basedir}/src/main/assembly/jar-with-dependencies.xml</descriptor>
							</descriptors>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>${maven-antrun-plugin-version}</version>
						<executions>
							<execution>
								<id>process-resources-windows</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target unless="offline">
										<mkdir dir="${project.binaries}" />
										<get src="${project.binaries-base}/osx/libmediainfo.dylib?p=${binary-revision}" dest="${project.basedir}/libmediainfo.dylib" usetimestamp="true" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>linter</id>
			<build>
				<plugins>
					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<version>1.14.2</version>
						<configuration>
							<installDirectory>react-client</installDirectory>
							<workingDirectory>react-client</workingDirectory>
						</configuration>
						<executions>
							<execution>
								<id>install node and yarn</id>
								<goals>
									<goal>install-node-and-yarn</goal>
								</goals>
								<configuration>
									<nodeVersion>v18.14.0</nodeVersion>
									<yarnVersion>v1.22.19</yarnVersion>
								</configuration>
							</execution>
							<!-- download Node.js dependencies -->
							<execution>
								<id>yarn install</id>
								<goals>
									<goal>yarn</goal>
								</goals>
							</execution>
							<!-- compile the react client to the web directory -->
							<execution>
								<id>yarn build</id>
								<goals>
									<goal>yarn</goal>
								</goals>
								<configuration>
									<environmentVariables>
										<PUBLIC_URL>/</PUBLIC_URL>
									</environmentVariables>
									<arguments>build</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>${maven-assembly-plugin-version}</version>
						<configuration>
							<descriptors>
								<descriptor>${project.basedir}/src/main/assembly/jar-with-dependencies.xml</descriptor>
							</descriptors>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>${maven-antrun-plugin-version}</version>
						<executions>
							<execution>
								<id>process-resources-windows</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target unless="offline">
										<mkdir dir="${project.binaries}/bin" />
										<get src="${project.binaries-base}/win32/MediaInfo64.dll?p=${binary-revision}" dest="${project.binaries}/bin/MediaInfo.dll" usetimestamp="true" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- Checkstyle report -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-checkstyle-plugin</artifactId>
						<version>3.3.1</version>
						<dependencies>
							<dependency>
								<groupId>com.puppycrawl.tools</groupId>
								<artifactId>checkstyle</artifactId>
								<version>10.12.5</version>
							</dependency>
						</dependencies>
						<configuration>
							<configLocation>CheckStyle.xml</configLocation>
							<encoding>UTF-8</encoding>
							<consoleOutput>true</consoleOutput>
							<failsOnError>true</failsOnError>
							<linkXRef>false</linkXRef>
						</configuration>
						<executions>
							<execution>
								<id>validate</id>
								<phase>validate</phase>
								<goals>
									<goal>check</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
