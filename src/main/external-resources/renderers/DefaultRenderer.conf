#-----------------------------------------------------------------------------
# Profile for Default Renderer.
#
# This is an example configuration file which should be used as a reference
# for creating your own renderer config. It contains descriptions of all of
# the available options.
#
# Configuration profiles serve two purposes:
#
#   - Allow UMS to recognize a specific connecting renderer
#   - Define the possibilities of that renderer
#
# When a new renderer config is added to the program, a line for it should be
# added to the uninstall section of src/main/external-resources/nsis/setup.nsi
#

#-----------------------------------------------------------------------------
# RENDERER INFORMATION
#

# Determines the name that is displayed in the UMS user interface when this
# renderer connects. The convention is [Vendor name] [space] [Model].
# Default: Unknown renderer
RendererName = 

# Determines the icon that is displayed in the UMS user interface when this
# renderer connects. By default, these icons are bundled with UMS in ums.jar,
# but they can easily be customised:
# http://www.ps3mediaserver.org/forum/viewtopic.php?f=6&t=3507&p=49536#p49536
# Default: unknown.png
RendererIcon = 

#-----------------------------------------------------------------------------
# RENDERER RECOGNITION
#
# When a renderer connects, it sends a "User-Agent" header. UMS tries to
# match that header with all configuration profiles. If none of the profiles
# match, the message "Unknown User-Agent:" will be displayed in the logs and
# UMS will switch to a default profile.
#
# Because matching involves all renderer configuration profiles, it is
# important to match as long a string as possible. This increases the chances
# that a match is unique. Version numbers are best avoided.
#
# To learn the exact headers of any renderer, set the logging level in
# "logback.xml" to "TRACE" and look for messages like "Received on socket:".
#

# Optional regular expression to detect a connected renderer.
# The expression is case insensitive. When the expression is empty User-Agent
# headers are not used, this is the default. Note that one renderer can use
# several different User-Agent headers.
#
# Note that UMS will attempt to match UserAgentSearch to the header block
# as a whole, so if the same identifier sometimes appears in other headers
# UserAgentSearch will return a positive match in those cases as well. For
# example the PS3 uses the phrase 'PLAYSTATION 3' sometimes in User-Agent
# and sometimes in X-AV-Client-Info (or both) and just defining
# 'UserAgentSearch = PLAYSTATION 3' will cover all these cases.
#
# Examples:
#
# UserAgentSearch = Platinum/.*DLNADOC/|yxplayer2|MPlayer |NSPlayer/
# UserAgentSearch = Windows-Media-Player-DMS|Microsoft-Windows
#
# Ignoring the "UPnP/1.0" and "UPnP/1.0 DLNADOC/1.50" headers since they are
# too general, plus they can be detected from the additional header.
# Default: ""
UserAgentSearch = 

# Regular expression to recognize the dlna details of a upnp-advertising renderer.
#
# When a upnp-advertising renderer connects, it provides a set of "dlna details"
# which UMS will reorganize in a consistent format on the renderer's gui panel
#
#    * friendlyName     : Blu-ray Disc Player
#      address          : 192.168.1.12
#      udn              : uuid:00000000-0000-1010-8000-0024bef844bb
#    * manufacturer     : Sony Corporation
#    * modelName        : Blu-ray Disc Player
#    * modelDescription :
#    * manufacturerURL  : http://www.sony.net/
#    * modelURL         :
#
# as well as logging it in the logfile (search for 'dlna details')
#
#    DEBUG 19:12:32.712 [cling-6] New renderer found: "Blu-ray Disc Player" with dlna details: {friendlyName=Blu-ray Disc Player, address=192.168.1.12, udn=uuid:00000000-0000-1010-8000-0024bef844bb, manufacturer=Sony Corporation, modelName=Blu-ray Disc Player, modelDescription=, manufacturerURL=http://www.sony.net/, modelURL=}
#
# UpnpDetailsSearch is an expression that matches the right-hand values as shown in
# the renderer's gui panel (for fields marked '*' above, reading top to bottom), or
# the equivalent right-hand values from the 'dlna details' logged in the logfile.
#
# A good starting point is to use unique parts of '<manufacturer> , <modelName>'
# with each part separated by ' , '. For instance here we use
#
#     UpnpDetailsSearch = Sony , Blu-ray Disc Player
#
# For users familiar with regular expression syntax, the separator ' , ' is just a
# UMS synonym for '.*', so the example above could also have been written as
#
#     UpnpDetailsSearch = Sony.*Blu-ray Disc Player
#
# and of course any valid regular expression is acceptable.
#
# Default: ""
UpnpDetailsSearch = 

# Optional additional HTTP header for better detection. When defined, UMS also
# considers this header when trying to find a match.
#
# Note that UMS will combine UserAgentSearch and UserAgentAdditionalHeaderSearch
# into a single expression before attempting to match it to the header block
# as a whole, so this setting should only be defined if the additional header
# is always present and required for making a unique match, i.e. only when the
# UserAgentSearch setting is omitted or insufficient by itself.
# Default: ""
UserAgentAdditionalHeader = 

# Regular expression to search for in the additional HTTP header.
# Default: ""
UserAgentAdditionalHeaderSearch = 

# The loading priority of this renderer. This should be set to 1 (or greater)
# if this renderer config is a more specific version of one we already have.
# For example, we have a Panasonic TVs config that is used for all
# Panasonic TVs, except the ones we have specific configs for, so the
# specific ones have a greater priority to ensure they are used when
# applicable instead of the less-specific renderer config.
# Default: 0
LoadingPriority = 

#-----------------------------------------------------------------------------
# BASIC CAPABILITIES
#
# This indicates to UMS what kind of media the renderer can handle. Files that
# the renderer cannot handle will be hidden from it.
#

# Whether the renderer can play video.
# Default: true
Video = 

# Whether the renderer can play audio.
# Default: true
Audio = 

# Whether the renderer can display images.
# Default: true
Image = 

#-----------------------------------------------------------------------------
# DLNA SETTINGS
#

# Set to true to use the DLNA feature seek-by-time instead of the default
# seek-by-byte method.
#
# Valid values:
#
#     true:
#
#         The renderer supports seek-by-time and seek-by-byte (DLNA.ORG_OP=11).
#
#     false:
#
#         The renderer doesn't support seek-by-time, so it should
#         only use the default seek-by-byte method (DLNA.ORG_OP=01).
#
#     exclusive:
#
#         While most renderers that support seek-by-time also support
#         seek-by-byte, some (e.g. the PS3 [1] and Panasonic TVs [2])
#         behave unreliably if both are permitted when transcoding files.
#         This option works around this by disabling seek-by-byte for
#         transcoded files when permitting seek-by-time (DLNA.ORG_OP=10).
#
# [1] Seeking via "Go To" with the PS3 (firmware 4.31) and MEncoder works with
#     "exclusive", but hangs or crashes with "true".
# [2] http://www.ps3mediaserver.org/forum/viewtopic.php?f=6&t=15841
#
# Default: false
SeekByTime = 

# Serve different flavors of localization in the DLNA parameters (PAL/NTSC,
# NA/EU/JP) to allow every world wide renderer to see the files. Important for
# Sony Bravia TVs.
# Default: false
DLNALocalizationRequired = 

# Useful for renderers without SeekByTime support. It does time2byte conversion
# to support FF/RW.
# Only possibility how to predict where we are when seeking is using CBR bitrate
# instead of VBR used by default.
# Creating a CBR stream with MEncoder is 3 times slower than using VBR so bear
# this in mind if you have a slow computer!
# Speed can hopefully be optimized a little bit in the future:
# http://www.ps3mediaserver.org/forum/viewtopic.php?f=14&t=8883&p=53706&hilit=ditlew#p53700
# http://www.ps3mediaserver.org/forum/viewtopic.php?f=11&t=11284&p=62765&hilit=1835#p62765
# Default: 0
CBRVideoBitrate = 

# Used for fine-tuning
# Default: 0
ByteToTimeseekRewindSeconds = 

# MaxVolume: the renderer's maximum volume setting (typically 100). If your renderer's
# volume fluctuates when you try to adjust it via the remote controls it likely means
# that its highest volume setting is not 100, for example some Android phones.
# Default: 100
MaxVolume = 

#-----------------------------------------------------------------------------
# MEDIAINFO
#

# Whether UMS should parse files with MediaInfo. This will give UMS more
# accurate information, speed up browsing and prevent potential playback errors.
# It also enables the use of "Supported" to more accurately define the supported
# formats for the renderer.
# Default: false
MediaInfo = 

# Use a faster method to create the DLNA tree using the MediaInfo library. It is
# not supported by some renderers and violates UPnP specifications.
# Default: false
CreateDLNATreeFaster = 

#-----------------------------------------------------------------------------
# TRANSCODING AND MUXING CAPABILITIES
#
# It is very likely that a renderer cannot render all file formats. If this is
# the case, UMS should transcode or mux the file to a format that the renderer
# can display. This section defines the format that UMS should transcode or
# mux to.
#

# Profile to use for transcoding video files.
# Options:
#
#    Profile            Video           Audio   Container   Notes
#    ------------------------------------------------------------
#    MPEGPS-MPEG2-AC3   MPEG-2          AC-3    MPEG-PS     VLC only outputs 2-channel AC-3 audio
#    MPEGTS-MPEG2-AC3   MPEG-2          AC-3    MPEG-TS     VLC only outputs 2-channel AC-3 audio
#    MPEGTS-H264-AC3    H.264 (AVC)     AC-3    MPEG-TS     VLC only outputs 2-channel AC-3 audio
#    MPEGTS-H264-AAC    H.264 (AVC)     AAC     MPEG-TS
#    MPEGTS-H265-AC3    H.265 (HEVC)    AC-3    MPEG-TS     Only FFmpeg outputs H.265, others will output H.264
#    MPEGTS-H265-AAC    H.265 (HEVC)    AAC     MPEG-TS     Only FFmpeg outputs H.265, others will output H.264
#    WMV:               WMV 2 (WMV 8)   WMA 2   ASF
#
# These profiles are supported by the MEncoder, FFmpeg and VLC engines.
# Default: MPEGPS-MPEG2-AC3
TranscodeVideo = 

# Profile to use for transcoding audio files
# Options: "LPCM", "MP3" or "WAV".
# Default: LPCM
TranscodeAudio = 

# Whether to use the default DVD buffer size. Setting this to "false" means a
# greater bitrate and faster encoding, but it can generate incompatible videos
# dependent on the renderer.
# Default: false
DefaultVBVBufSize = 

# Whether the media renderer supports H.264 in a MPEG-TS file.
# Ignored if "MediaInfo" is set to true or on OS X 10.4.
# Default: true (conditions above)
MuxH264ToMpegTS = 

# Whether the media renderer supports DTS in an MPEG file.
# Ignored if MediaInfo = true.
# Default: false (condition above)
MuxDTSToMpeg = 

# Whether the media renderer supports DTS wrapped into LPCM in a MPEG file.
# Default: false
WrapDTSIntoPCM = 

# Whether the media renderer supports AC-3/DTS wrapped into LPCM in a MPEG file.
# It must be also enabled in GUI and overrides WrapDTSIntoPCM if set to true.
# Default: false 
WrapEncodedAudioIntoPCM = 

# Whether the media renderer supports LPCM in an MPEG file.
# Ignored if MediaInfo = true.
# Default: true
MuxLPCMToMpeg = 

# The maximum bitrate supported by the media renderer.
# If the CPU is not very fast, it may be better to avoid using bandwidth limit
# and instead lower the bitrate by defining "CustomMencoderQualitySettings"
# and/or "CustomFFmpegOptions" since they can be less CPU-intensive.
# This is only reliable when MediaInfo = true.
#
# Note: Testing should be done on a wired network because otherwise it's hard to
# tell whether the limit is actually your network instead of the renderer.
# Default: 0 (unlimited)
MaxVideoBitrateMbps = 

# Halve bitrate
# Some renderers need the bitrate to be half of the network's maximum bitrate in
# order to have smooth playback.
# Default: false
HalveBitrate = 

# The maximum width and height supported by the renderer. 0 means unlimited.
# Both must be 0, or both must be higher than 0.
# Defaults: 1920 and 1080
MaxVideoWidth = 
MaxVideoHeight = 

# Whether to transcode H.264 video if it exceeds level 4.1
# Default: true
H264Level41Limited = 

# Whether to transcode linear PCM audio files at 44.1 kHz.
# By default they are resampled at 48 kHz. Resampling occurs only if resample
# function is enable. This makes LPCM audio files strictly DLNA compliant.
# Default: false
TranscodeAudioTo441kHz = 

# Whether the renderer has a short timeout delay and needs to receive transcoded
# audio or video with minimal delay. If set to "false", UMS will take some time
# to buffer some of the transcoded video or audio.
# Default: false
TranscodeFastStart = 

# The amount of transcoded data is unknown at the time of transcoding. Still,
# some renderers expect a size for the video file to be returned.
# Options:
#            0: No size is sent to the renderer.
# 100000000000: Fake size of 100 GB is sent to the renderer.
#           -1: Specific value that works perfect for the PS3. It is against
#               the DLNA spec though.
# Default: 0
TranscodedVideoFileSize = 

# The audio sample rate to use in transcoded video.
# Default: 48000
TranscodedVideoAudioSampleRate = 

# A list of mimetype transformations, separated by |.
# Example: MimeTypesChanges = old/mime1=new/mime1|old/mime2=new/mime2
# Default: ""
MimeTypesChanges = 

# A comma-separated list of file extensions that are forced to be transcoded and
# never streamed. If MediaInfo = true, define "Supported" formats instead.
# Default: ""
TranscodeExtensions =

# A comma-separated list of file extensions that are forced to be streamed and
# never transcoded. If MediaInfo = true, define "Supported" formats instead.
# Default: ""
StreamExtensions =

# Whether the renderer can display thumbnails
# Default: true
Thumbnails = 

# Whether we should add black padding to thumbnails so they are always at the
# same resolution, or just scale to within the limits.
# Default: false
ThumbnailPadding = 

# Some renderers are particular about the "Content-Length" headers in requests
# (e.g. Sony Blu-ray Disc players). By default, UMS will send a "Content-Length"
# that refers to the total media size, even if the exact length is unknown.
# Set this option to true to omit sending a length when it is unknown.
# Default: false
ChunkedTransfer = 

# Overrides the FFmpeg custom options in UMS for this renderer. Default is
# empty, which means the UMS settings will be used.
# All setting for output formats, codecs, bitrate e.g. can be used except video,
# audio and subs mapping (-map).
# Do not use it to override -vf; use OverrideFFmpegVideoFilter instead.
# Default: ""
CustomFFmpegOptions = 

# Overrides the scale and pad part of FFmpeg VideoFilter options in UMS for this
# renderer. It leaves all internal VideoFilter setting for subtitles untouched.
# Do not use -vf in this option, and add only VideoFilter parameters (filters)
# separated by commas. Commas inside the filters are taken as a break so they
# must have a prefix.
# Example: OverrideFFmpegVideoFilter = pad=max(iw\\,ih*16/9)
# Default: ""
OverrideFFmpegVideoFilter = 

# Overrides the MEncoder transcoding quality settings in UMS for this renderer.
# Default: ""
CustomMencoderQualitySettings = 

# Overrides the MEncoder custom options for this renderer.
# Many values will work, but particularly safe ones are:
# channels, lavcopts vcodec, lavcopts acodec, lavcopts abitrate
# Default: ""
CustomMencoderOptions = 

# Prevents -noskip from being used by MEncoder.
# Default: false
DisableMencoderNoskip = 

# Some devices recognize a custom HTTP header for retrieving the contents of a
# subtitles file. Set this option to the name of that custom header and UMS will
# send the URL for the subtitles file in that header (e.g. Samsung devices
# recognize the "CaptionInfo.sec" header).
# Default: "", i.e. UMS will not send such header information.
SubtitleHttpHeader = 

# If this is true, it will always output video at 16/9 aspect ratio to the renderer,
# meaning that all transcoded videos with different aspect ratios will have black
# bars added to the edges to make them 16/9. It doesn't work with 3D SBS video.
# If some videos on your renderer looked either stretched or squashed, enabling
# this setting may fix that.
# Default: false
KeepAspectRatio = 

# This option adds black borders to the transcoded video to prevent the renderer
# from displaying an incorrect aspect ratio.
# If this is true, it will always output transcoded video at 16/9 aspect ratio to
# the renderer, meaning that all transcoded videos with different aspect ratios
# will have black bars added to the edges to make them 16/9.
# If some transcoded videos on your renderer looked either stretched or squashed,
# enabling this setting may fix that, excepted for the 3D SBS videos.
# Default: false
KeepAspectRatioTranscoding = 

# If this is false, FFmpeg will upscale videos with resolutions lower than SD
# (720 pixels wide) to the maximum resolution your renderer supports.
# Changing it to false is only recommended if your renderer has poor-quality
# upscaling, since we will use more CPU and network bandwidth when it is false.
# To use it, MaxVideoWidth and MaxVideoHeight must be set.
# Default: true
RescaleByRenderer = 

# Whether the renderer has a maximum folder limit.
# Default: true
LimitFolders = 

#-----------------------------------------------------------------------------
# Other useful hidden params and their default values if not defined:
#

# Display audio tag in TRANSCODE folder if defined in container (useful to find
# out correct audio track like commentary etc.)
# Default: true
ShowAudioMetadata = 

# Display subtitle tag in TRANSCODE folder if defined in container (showing
# subtitles info like forced, full, documentary etc.)
# Default: true
ShowSubMetadata = 

# Some renderers can't show length of DVD titles so it will add it directly to
# title name to be shown
# Default: false
ShowDVDTitleDuration = 

# Specified extension will be added to every file shared by UMS
# Default: ""
UseSameExtension = 

# Change DLNA PN arguments, separated by |.
# Example: OldDlnaPn=NewDlnaPn|OldDlnaPn2=NewDlnaPn2
# Default: ""
DLNAProfileChanges = 

# PN is defined for every file sent to the renderer via DLNAOrgPN value. If
# this value is wrong, the renderer may refuse listing or playing this file.
# When it is set to false, no DLNAOrgPN is sent to renderer, which can help
# with troubleshooting.
# The PN is a description of the file, e.g. AVC_TS_HD_60_AC3_ISO
# Most renderers require this to be true.
# Default: true
DLNAOrgPN = 

# Spends a longer time analyzing the contents of files to determine the most accurate information to send renderers.
# Some renderers like Sony TVs need the extra accuracy.
# Warning: This can cause significantly slower browse times.
# Default: false
AccurateDLNAOrgPN = 

# Whether to send folder thumbnails.
# Default: true
SendFolderThumbnails = 

# This option allows thumbnails to be generated with MediaInfo.
# It is automatically used with unknown renderer.
# This is only reliable when MediaInfo = true.
# Default: false
MediaParserV2_ThumbnailGeneration = 

# Wrap and/or truncate long labels. Sony Blu-ray Disc (and possibly other)
# renderers truncate long labels by default, but will process newline characters
# normally if the label contains them.
#
# Options:
#    width:        max number of chars per line (0=text wrap off)
#    height:       max number of lines per xmb item (0=no limit)
#    indent:       number of "hanging indent" whitespace chars to use
#                  (to avoid being overwritten by format icons)
#    whitespace:   decimal ascii # of the whitespace char to use (9=tab 32=space
#                  etc)
#    dots:         number of dots... to add at the end of truncated labels
#
# Example: TextWrap = width:0 indent:0 height:0 whitespace:9 dots:0
# Default: ""
TextWrap = 

# Whether to send the last modified date metadata for files and folders, which
# can take up screen space on some renderers.
# Default: true
SendDateMetadata = 

# Whether to prepend audio track numbers to audio titles.
# e.g. "Stairway to Heaven" becomes "4: Stairway to Heaven".
# This is to provide a workaround for devices that order everything
# alphabetically instead of in the order we give, like Samsung devices.
# Default: false
PrependTrackNumbers = 

# Whether to allow videos with resolutions that are not divisible by 4.
# Default: false
MuxNonMod4Resolution = 

# Perform a renderer-specific character substitution.
# Allows you to change unsupported/unwanted characters or strings.
# A space-separated list ordered by pairs "unwanted" "wanted".
# Example: CharMap = / : \n :
# Default: ""
CharMap =

#-----------------------------------------------------------------------------
# SUPPORTED MEDIA FORMATS
#
# This section defines which media formats are supported by this renderer. If
# a file is supported and its mediainfo indicates that it falls within the
# capabilities of this renderer, UMS will stream the file to the renderer. All
# other files will be transcoded to the format specified in "TranscodeVideo"
# or "TranscodeAudio" before being sent to the renderer.
#
# Each format that the renderer supports should result in a "Supported" line
# that defines the capabilities of the renderer. When MediaInfo = true, media
# files are parsed and their properties are matched against all "Supported"
# lines. If a value for a specific property cannot be parsed, that property
# is assumed to match.
#
# The order of the "Supported" lines matters: when multiple lines match, the
# first match is used.
#
# The media parser and this configuration file will recognize the following
# formats and codecs. Use lower case names only. Regular expressions are
# supported.
#
# The following is a list of tags, full names, usual MIME types and notes:
#
#    Tag:     Full Name:                                    MIME type:                         Notes:
#    --------------------------------------------------------------------------------------------------------
#    3ga      3rd Generation Partnership Project Audio      audio/3gpp
#    3gp      3rd Generation Partnership Project            video/3gpp
#    3g2a     3rd Generation Partnership Project 2 Audio    audio/3gpp2
#    3g2      3rd Generation Partnership Project 2          video/3gpp2
#    aac-lc   Advanced Audio Coding Low Complexity
#    aac-ltp  Advanced Audio Coding Long Term Predictor
#    aac-main Advanced Audio Coding Main
#    aac-ssr  Advanced Audio Coding Scalable Sample Rate
#    ac3      Audio Codec 3 (Dolby Digital)                 audio/vnd.dolby.dd-raw
#    acelp    Algebraic Code Excited Linear Prediction                                      Audio codec
#    adpcm    Adaptive differential pulse-code modulation
#    adts     Audio Data Transport Stream                   audio/vnd.dlna.adts
#    aiff     Audio Interchange File Format                 audio/L16                       Also audio/aiff or audio/x-aiff
#    alac     Apple Lossless Audio Codec                                                    Need audio/x-m4a or audio/m4a
#    als      Audio Lossless Coding (MPEG-4 ALS)
#    amr      Adaptive Multi-Rate audio codec               audio/amr
#    ape      Monkey's Audio                                audio/x-ape
#    asf      Advanced Systems Format                       video/x-ms-asf                  Also used for DVR-MS videos
#    atmos    Dolby Atmos audio
#    atrac    Adaptive Transform Acoustic Coding            audio/x-sony-oma
#    avi      Audio Video Interleave                        video/avi                       Also video/x-avi or video/x-msvideo
#    bmp      Bitmap                                        image/bmp
#    caf      Core Audio Format                             audio/x-caf
#    celp     Code-Excited Linear Prediction
#    cook     RealAudio audio codec                         audio/vnd.rn-realaudio
#    cvid     Cinepak (previously CompactVideo)             video/x-cinepak
#    dff      DSD File Format                               audio/x-dff
#    divx     DivX Video                                    video/avi                       Also video/x-divx with Samsung J series
#    dsf      DSD Storage Facility                          audio/x-dsf
#    dts      Digital Theater Systems                       audio/vnd.dts
#    dtshd    Digital Theater Systems (HD)                  audio/vnd.dts.hd
#    dv       Digital Video                                 video/dv
#    eac3     Enhanced AC-3 (Dolby Digital Plus, DD+)       audio/eac3
#    erbsac   Error Resilient Bit-Sliced Arithmetic Coding
#    ffv1     FF video codec 1
#    flac     Free Lossless Audio Codec                     audio/x-flac
#    flv      Flash Video                                   video/x-flv
#    g729     G.729                                                                         Also known as Coding of speech-ACELP
#    gif      Graphics Interchange Format                   image/gif
#    h261     H.261 video compression standard
#    h263     H.263 video compression standard
#    h264     H.264/MPEG-4 Part 10 (AVC)
#    h265     High Efficiency Video Coding (HEVC)
#    he-aac   Advanced Audio Coding (High-Efficiency)
#    indeo    Intel Indeo Video                                                             IV31, IV32, IV41 and IV50
#    jpg      Joint Photographic Experts Group              image/jpeg
#    jpeg     Motion JPEG A
#    jpeg2000 Motion JPEG 2000
#    lpcm     Linear Pulse-Code Modulation                  audio/L16
#    mace3    Macintosh Audio Compression/Expansion 3:1
#    mace6    Macintosh Audio Compression/Expansion 6:1
#    mjpeg    Motion JPEG B
#    mka      Matroska Audio                                audio/x-matroska
#    mkv      Matroska Video                                video/x-matroska
#    mlp      Meridian Lossless Packing                     audio/vnd.dolby.mlp
#    mov      QuickTime File Format                         video/quicktime
#    mp2      MPEG Audio Layer II                           audio/mpeg
#    mp3      MPEG-1 or MPEG-2 Audio Layer III              audio/mpeg
#    mp4      ISOM/MPEG4 container, or MPEG-4 codec         video/mp4                          For Video files
#    m4a      ISOM/MPEG4 container, AAC-LC/HE-AAC/ALAC      audio/mp4                          For Audio files
#    mpa      MPEG Audio                                    audio/mpeg
#    mpc      MusePack                                      audio/x-musepack
#    mpeg1    MPEG-1                                        video/mpeg                         Used in VCDs
#    mpeg2    MPEG-2                                        video/mpeg                         Used in DVDs and HDTV broadcasts
#    mpegps   MPEG Program Stream                           video/mpeg                         Used in DVDs and VCDs
#    mpegts   MPEG Transport Stream                         video/vnd.dlna.mpeg-tts            Used in sat TV and Blu-ray Discs
#    nellymoser                                                                                Also known as Asao. Used in Flash
#    oga      Ogg container with only audio content         audio/ogg
#    ogg      Ogg container                                 video/ogg                          Applies for Vorbis I files only, use with FLAC and Theora should use oga and ogv respectively
#    ogv      Ogg container with video content              video/ogg
#    ogx      Ogg container                                 application/ogg
#    opus     Ogg Opus                                                                         Need audio/ogg or audio/opus
#    png      Portable Network Graphics                     image/png
#    qcelp    Qualcomm Code-Excited Linear Prediction                                          Also known as Qualcomm PureVoice
#    qdmc     QDesign Music Codec (RaveSound)
#    ralf     RealAudio Lossless Format                     audio/vnd.rn-realaudio
#    rgb      Uncompressed video (Red, Green and Blue)
#    rle      Run Length Encoding
#    rm       RealMedia (RMVB)                              application/vnd.rn-realmedia-vbr
#    shn      Shorten                                       audio/x-shorten
#    sipro    Sipro Lab Telecom
#    sls      Scalable to Lossless                                                             Also known as MPEG-4 SLS
#    sor      Sorenson Spark
#    tga      Truevision Advanced Raster Graphics Adapter
#    tiff     Tagged Image File Format                      image/tiff
#    theora   Ogg Theora
#    tta      True Audio codec                              audio/x-tta
#    truehd   Dolby TrueHD                                  audio/vnd.dolby.mlp
#    vc1      Microsoft VC-1                                                                   Also known as WMV 9 and WMV3
#    vorbis   Ogg Vorbis
#    vp6      On2 TrueMotion VP6
#    vp7      On2 TrueMotion VP7
#    vp8      Google VP8
#    vp9      Google VP9
#    wavpack  WavPack                                       audio/wavpack
#    wav      Waveform Audio File Format                    audio/wav
#    weba     Webm Audio                                    audio/webm
#    webm     WebM Video                                    video/webm
#    wma      Windows Media Audio                           audio/x-ms-wma
#    wma10    Windows Media Audio 10 Professional
#    wmalossless      ""          Lossless
#    wmapro           ""          Pro
#    wmavoice         ""          Voice
#    wmv      Windows Media Video                           video/x-ms-wmv                     Matches WMV1, WMV2, WMV7 and WMV8 (see "vc1" above for more). Tag also used for asf files
#    yuv      Uncompressed video                                                               Luminance (Y) and two chrominance (UV)
#
#    und      Undetermined, if the parser did not recognize one of above
#
# There are a lot of good resources for finding MIME types on the Internet, one
# of which is http://www.iana.org/assignments/media-types/media-types.xhtml
#
# Each of the "Supported" lines contains the following parameters separated by
# spaces or tabs:
#
#    f:         Regular expression to match the format of a file, see the list
#               above. This parameter is mandatory.
#    v:         Regular expression to match the video codec, see the list above.
#    a:         Regular expression to match the audio codec, see the list above.
#    m:         The MIME type to send to the renderer. Use of this parameter is
#               strongly recommended. If it is not set, an estimated value will
#               be assigned.
#    n:         The maximum number of audio channels.
#    s:         The maximum audio sample frequency (Hertz).
#    b:         The maximum bitrate (bits per second) of the whole file.
#    w:         The maximum video/image width (pixels).
#    h:         The maximum video/image height (pixels).
#    qpel:      Quarter pixel codec setting (yes or no).
#    gmc:       The number of global motion compensation warp points.
#    gop:static Whether the only supported MPEG-2 GOP type is static.
#    vbd:       The video depth supported in current video format. ( e.g. "vbd:8|10")
#

# Supported video formats:
# Supported audio formats:

# A comma-separated list of supported text-based external subtitles formats
# for streaming together with streaming (not transcoded) video.
#
#    Supported formats:   File extension:
#    ------------------------------------
#    ASS                  .ass or .ssa
#    MICRODVD             .sub
#    SAMI                 .smi
#    SUBRIP               .srt
#    TEXT                 .txt
#    WEBVTT               .vtt
#
# Example: SupportedExternalSubtitlesFormats = SUBRIP,ASS,MICRODVD
# Default: ""
SupportedExternalSubtitlesFormats =

# Some renderers like Panasonic TVs support streaming subtitles together with
# the streamed video only for some video formats(codecs). This is a
# comma-separated list of supported video formats for which supported external
# subtitles formats listed in the "SupportedExternalSubtitlesFormats" are
# streamed together with streaming (not transcoded) videos.
# If empty, all subtitles listed in "SupportedExternalSubtitlesFormats" will be
# streamed.
# If not empty, we only stream external subtitles for the formats in this list.
#
# Example: VideoFormatsSupportingStreamedExternalSubtitles = divx,mp4
# Default: ""
VideoFormatsSupportingStreamedExternalSubtitles = 

# A comma-separated list of supported embedded subtitles formats.
#
#    Supported formats:
#    ------------------
#    ASS
#    BMP
#    DIVX (XSUB)
#    MICRODVD
#    PGS
#    SAMI
#    SUBRIP
#    TEXT
#    TX3G
#    USF
#    VOBSUB
#    WEBVTT
#
# Example: SupportedInternalSubtitlesFormats = ASS,DIVX,PGS,SUBRIP
# Default: ""
SupportedInternalSubtitlesFormats = 

# Whether to use the "sec:CaptionInfoEx" parameter to stream external subtitles.
# Supported subtitles are defined in SupportedExternalSubtitlesFormats.
# Default: false
UseClosedCaption = 

# Whether to offer external subtitles to stream to renderer by the protocol info.
# Supported subtitles are defined in SupportedExternalSubtitlesFormats.
# Default: true
OfferSubtitlesByProtocolInfo =

# Whether to offer external subtitles to renderer as an additional stream.
# Supported subtitles are defined in SupportedExternalSubtitlesFormats.
# Default: true
OfferSubtitlesAsSource =

# Whether to stream subtitles even if the video is transcoded. When enabled the
# subtitles are not transcoded. It may work on some renderers.
# Supported subtitles are defined in SupportedExternalSubtitlesFormats.
# Default: false
StreamSubsForTranscodedVideo =

# Remove the (HTML) tags: 
# <b> </b> <i> </i> <u> </u> <s> </s> <font *> </font> and any ASS tags {\*}
# from SubRip subtitles files for renderers not capable of showing SubRip tags
# correctly. * is used as a wildcard in the definition above.
# Users can try to set it to false when the renderer is capable to use those tags.
# Default: true
RemoveTagsFromSRTSubtitles =

# The preferred 3D video format. This option forces FFmpeg to convert it.
# Note: The conversion is CPU-intensive so some CPUs may not be fast enough.
# 
# Options:
#
#    Preset:   Description:
#    ----------------------
#    arcg      Anaglyph (Red, cyan, gray)
#    arch      Anaglyph (Red, cyan, half color)
#    arcc      Anaglyph (Red, cyan, color)
#    arcd      Anaglyph (Red, cyan, dubois)
#    agmg      Anaglyph (Green, magenta, gray)
#    agmh      Anaglyph (Green, magenta, half color)
#    agmc      Anaglyph (Green, magenta, color)
#    agmd      Anaglyph (Green, magenta, dubois)
#    aybg      Anaglyph (Yellow, blue, gray)
#    aybh      Anaglyph (Yellow, blue, half color)
#    aybc      Anaglyph (Yellow, blue, color)
#    aybd      Anaglyph (Yellow, blue, dubois)
#    ml        Mono (Left eye first). It converts 3D video to 2D
#    mr        Mono (Right eye first). It converts 3D video to 2D
#    sbsl      Side by side (Left eye first)
#    sbsr      Side by side (Right eye first)
#    sbs2l     Half side by side (Left eye first)
#    sbs2r     Half side by side (Right eye first)
#    abl       Over under (Left eye first)
#    abr       Over under (Right eye first)
#    ab2l      Half over under (Left eye first)
#    ab2r      Half over under (Right eye first)
#    irl       Interleave rows (Left eye first)
#    irr       Interleave rows (Right eye first)
#
# Default: ""
Output3DFormat = 

# How to start upnp services (event-monitoring, remote-control) if supported by this renderer
#
# Options:
#    true      Activate normally, as soon as the device is seen
#    postpone  Wait until the device has sent an http request before activating upnp services
#              (i.e. use http header recognition procedures first)
#    false     Don't activate any upnp services for this device
# Default: true
UpnpAllow = 


# Whether to include metadata when pushing uris to this renderer via the gui renderer panel
# or 'bump' remote-controls. Try setting this to false if remote-controlled playback fails.
# Default: true
PushMetadata = 

# Which video bit depths are supported.
# Example: "8,10,12"
# Default: "8"
SupportedVideoBitDepths = 


