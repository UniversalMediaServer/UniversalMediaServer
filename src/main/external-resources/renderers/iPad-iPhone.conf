#----------------------------------------------------------------------------
# Profile for iPad, iPhone and iPod.
# See PS3.conf for a description of all possible configuration options.
#
# This profile is still in a highly experimental stage. Playback quality
# (if at all) depends very much on the app that is used and is sketchy at best
# at this time.
# You are encouraged to experiment and report back the results on the forums
# at http://www.universalmediaserver.com
#
# TODO: rewrite to use MediaInfo=true
#

#------------------------------------------------------------
# General informations / detection

RendererName=iPad / iPhone
RendererIcon=ipad-iphone.png

# UserAgentSearch: regular expression to detect the connected renderer.
#
# Note that apps typically identify themselves as different user agents to handle 
# different types of media. Make sure to search them all!
#
# Working(-ish):
# --------------
# App: AcePlayer
# User-Agent: AcePlayer/1.07 CFNetwork/548.1.4 Darwin/11.0.0
#
# App: AirPlayer - handled by renderer "AirPlayer.conf"
#
# App: AirAV
# User-Agent: AirAV/1.00 CFNetwork/548.0.4 Darwin/11.0.0
#
# App: yxplayer2 lite
# User-Agent: Platinum/0.5.3.0, DLNADOC/1.50
# User agent: yxplayer2%20lite/1.2.7 CFNetwork/485.13.9 Darwin/11.0.0
# User-Agent: MPlayer 1.0rc4-4.2.1
# User-Agent: NSPlayer/4.1.0.3856
#
# App: BUZZ Player
# User-Agent: Platinum/0.5.3.0, DLNADOC/1.50
#             (Note: XBMC.conf tries to detect this exact same header on Mac OS X!)
# User-Agent: AppleCoreMedia/1.0.0.9A405 (iPad; U; CPU OS 5_0_1 like Mac OS X; nl_nl)
# User-Agent: Lavf52.79.0
#
# Not working:
# ------------
# App: Air Video Free
# User-Agent: AirVideoFree/2.4.9 CFNetwork/485.13.9 Darwin/11.0.0
#
# App: 8 Player Lite:
# User-Agent: UPnP/1.0 DLNADOC/1.50 Platinum/0.6.6.0
# User-Agent: 8player lite 2.2.3 (iPad; iPhone OS 5.0.1; nl_NL)
# User-Agent: Lavf53.4.0
# User-Agent: AppleCoreMedia/1.0.0.8J2 (iPad; U; CPU OS 4_3_3 like Mac OS X; nl_nl)
#

# Combined regular expression of working user agents
UserAgentSearch=8player|yxplayer2|MPlayer |NSPlayer/|AirAV|AcePlayer

# UserAgentAdditionalHeaders: additional http header for better detection
#UserAgentAdditionalHeader=
#UserAgentAdditionalHeaderSearch=

#Basic capabilities
Video=true
Audio=true
Image=true

#------------------------------------------------------------
# DLNA settings

# Use the DLNA feature seek by time and not by range
SeekByTime=false

# Serve different flavors of localization in the DLNA parameters (PAL/NTSC, NA/EU/JP)
# to allow every worldwide renderer to see the files. Important for Sony Bravia's TVs
#DLNALocalizationRequired=false

#------------------------------------------------------------
# Transcoding/Muxing capabilities
#

# Transcode profiles for video and audio engines
# currently supported: MPEGPSAC3, MPEGTSAC3 or WMV for video, LPCM, WAV or MP3 for audio
TranscodeVideo=MPEGPSAC3
TranscodeAudio=WAV

# Use default DVD buffer size: false = greater bitrate and faster encoding,
# but can generate incompatible videos, depends of your media renderer
DefaultVBVBufSize=true

# Muxing capabilities: Does the media renderer supports H264 and MPEG2 in a mpegts file ?
# Deprecated if MediaInfo=true
MuxH264ToMpegTS=true

# Does the media renderer supports DTS in a mpeg file ?
# Do not use if MediaInfo=true
MuxDTSToMpeg=false

#Does the media renderer supports DTS wrapped into LPCM in a mpeg file ?
WrapDTSIntoPCM=true

# Does the media renderer supports LPCM in a mpeg file ?
# Do not use if MediaInfo=true
MuxLPCMToMpeg=true

# Maximum bitrate supported by the media renderer (0=unlimited)
MaxVideoBitrateMbps=0

# Max Width and Height supported by the media renderer (0=unlimited)
MaxVideoWidth=0
MaxVideoHeight=0

# Does the media renderer supports only H264 L4.1 at most ?
H264Level41Limited=true

# Does music files need to be resampled at 44.1kHz?
TranscodeAudioTo441kHz=false

# Does the client need to receive transcoded video with minimal delay ?
# (Useful when the client has a small timeout delay)
TranscodeFastStart=false

# Size of the transcoded file (unknown length) sent to the renderer (could determine browsing failure/success)
# Possible values: 
#           -1: Specific value working with the PS3, means perfect transcoding and copying support (it's against the dlna spec though)
#            0: size attribute is NOT sent to the renderer (defaut value if this parameter isn't used)
# 100000000000: 100Gb, if you want to be sure that the media file is not cutted before the end ?
# TranscodedVideoFileSize=0

#-----------------------------------------------------------
# Misc Images

# Rotate Jpeg files based on EXIF infos
AutoExifRotate=true

#------------------------------------------------------------
# Misc Files

# Mime types transforms (oldmime=newmime|olemime2=newmime2|...)
# Deprecated if MediaInfo=true
MimeTypesChanges=

# What extensions are forcefully transcoded
# Don't use this if MediaInfo=true, prefer codec configurations
TranscodeExtensions=
# What extensions are forcefully streamed as is (and not transcoded)
# Don't use this if MediaInfo=true, prefer codec configurations
StreamExtensions=mkv,mov,ogg,hdmov,hdm,flac,fla,dts,asf,asx,m2v



# ===========================================================================
# All supported media formats of this renderer (the rest will be transcoded)
# First steps towards a faster/proper file/codec/mimetype management system (false by default)
# 1- Parse files with mediainfo on Windows/OSX (Linux too if libmediainfo and libzen installed)
# 2- Deprecate following parameters: MuxH264ToMpegTS,MuxDTSToMpeg,MuxLPCMToMpeg,MimeTypesChanges
# 3- The server will skip badly parsed, corrupted files or wrong coding, preventing potential playback errors
# 4- Faster browsing, due to the launch of ffmpeg/mplayer first thumbnailer process with each http client request, rather than in the browse DLNA request
MediaInfo=false

# The media parser and this configuration file will recognize the following formats/codecs (lowercase only, regex supported):
# Chosen from the most common used and supported formats/codecs (no need to manage ADPCM, nobody cares)
#        mpegps		(mpeg presentation stream, used in DVD Videos, VCDs, etc.)
#        mpegts		(mpeg transport stream, used in sat tv, blu rays, etc.)
#        wmv		(Windows Media Video, tag also used for asf files)
#        avi		(AVI container)
#        mp4		(ISOM/MPEG4 container, or MPEG4 codec)
#        mov		(Quicktime container, Apple)
#        flv		(Flash Video)
#        rm		(Real Media, RMVB)
#        mkv		(Matroska)
#        wav		(WAVE file)
#        wavpac		(WavPack)
#        lpcm		(Linear PCM)
#        aac		(Advanced Audio Codec)
#        ac3		(Audio Coding 3)
#        mp3		(Mpeg Audio Layer 3)
#        mpa		(Mpeg Audio)
#        ogg		(Ogg Vorbis)
#        wma		(Windows Media Audio)
#        dts		(Digital Theater Systems)
#        dtshd		(Digital Theater Systems)
#        truehd		(TrueHD)
#        eac3		(Extended AC3)
#        atrac		(Atrac)
#        flac		(Free Lossless Audio Codec)
#        ape		(Monkey's Audio)
#        ra		(Real Audio)
#        mpc		(MusePack)
#        aiff		(AIFF)
#        alac		(Apple Lossless)
#        dv		(Digital Video)
#        mpeg1		(Codec used in VCD)
#        mpeg2		(Codec used in DVD Videos and HDTV)
#        divx		(DivX Video)
#        h264		(H264)
#        mjpeg		(M-JPEG)
#        vc1		(VC-1)
#        jpg		(Jpeg)
#        png		(PNG)
#        gif		(GIF)
#        tiff		(TIFF)
#        bmp		(Bitmap)
#        und		(Undetermined, if the parser did not recognize one of above)
# Usage:
#    f: format, MANDATORY (the only conf for a 'eat everything' renderer would be f:.+)
#    m: mimetype, STRONGLY RECOMMENDED (if not declared, an estimated value is assigned)
#    v: video codec
#    a: audio codec
#    n: max nb of audio channels
#    s: max audio sample frequency in Hz
#    b: max audio bitrate in bps
#    w: max width in pixels
#    h: max height in pixels
#    other flags: right now, only qpel and gmc (see avi)

# In case of multiple matches, the first mime type of the list is the used one.
# Be careful with regexps such as .+ : You shouldn't use these only if you're sure your renderer is quite versatile

# [Supported video formats]: 
# Here we declare support (or lack) of DTS (here, none of the entries declare dts as a supported audio codec) 
#Supported = f:mpegps|mpegts    v:mpeg1|mpeg2|mp4|h264    a:ac3|lpcm|aac|mpa	m:video/mpeg
# No H264 for AVI files, plus specific mediainfo attributes, for better auto detection (qpel and gmc are not supported here)
#Supported = f:avi|divx    v:mp4|divx|mjpeg	a:mp3|lpcm|mpa|ac3	m:video/x-divx	qpel:no	gmc:0
#Supported = f:mp4    v:mp4|h264	a:ac3|aac	m:video/mp4
# WMV files are supported, but not with 5.1 audio: (hence the n:2)
#Supported = f:wmv    v:wmv|vc1	a:wma	n:2	m:video/x-ms-wmv

# [Supported audio formats]:
#Supported = f:wav	a:dts|lpcm	n:6	s:48000	m:audio/wav
#Supported = f:wav	n:2	s:48000	m:audio/wav
#Supported = f:mp3	n:2	m:audio/mpeg
# Apple lossless not supported
#Supported = f:aac	n:2	a:(?!alac).+	m:audio/x-m4a
#Supported = f:wma	n:2	m:audio/x-ms-wma
#Supported = f:atrac	n:2	m:audio/x-oma

# [Supported image formats]
#Supported = f:jpg	m:image/jpeg
#Supported = f:png	m:image/png
#Supported = f:gif	m:image/gif
#Supported = f:tiff	m:image/tiff

# Use faster method to create DLNA tree with MediaInfo. Not supported by some renderers, false by default (upnp specification violation).
#CreateDLNATreeFaster = true

# ===========================================================================

