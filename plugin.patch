From 14396b6d9706a8c10fc520dead3eb08bb98d4741 Mon Sep 17 00:00:00 2001
From: SharkHunter <bajen.hasse@gmail.com>
Date: Thu, 7 Jun 2012 14:55:11 +0200
Subject: [PATCH] Download plugin

---
 .../net/pms/configuration/DownloadPlugins.java     |  236 ++++++++++++++++++++
 .../java/net/pms/external/ExternalFactory.java     |  139 +++++++++---
 src/main/java/net/pms/newgui/GeneralTab.java       |   79 +++++++
 3 files changed, 416 insertions(+), 38 deletions(-)
 create mode 100644 src/main/java/net/pms/configuration/DownloadPlugins.java

diff --git a/src/main/java/net/pms/configuration/DownloadPlugins.java b/src/main/java/net/pms/configuration/DownloadPlugins.java
new file mode 100644
index 0000000..dc0c1c4
--- /dev/null
+++ b/src/main/java/net/pms/configuration/DownloadPlugins.java
@@ -0,0 +1,236 @@
+package net.pms.configuration;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URLConnection;
+import java.util.ArrayList;
+import java.util.List;
+
+import net.pms.PMS;
+import net.pms.external.ExternalFactory;
+import net.pms.external.ExternalListener;
+import net.pms.newgui.GeneralTab;
+
+import org.apache.commons.lang.StringUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class DownloadPlugins {
+	
+	private final static String PLUGIN_LIST_URL="file:///tst.txt";
+	private static final Logger LOGGER = LoggerFactory.getLogger(DownloadPlugins.class);
+	
+	private static final int TYPE_JAR=0;
+	private static final int TYPE_LIST=1;
+	private static final int TYPE_BUNDLE=2;
+	
+	private String name;
+	private String rating;
+	private String desc;
+	private String url;
+	private String author;
+	private int type;
+	private ArrayList<URL> jars;
+	
+	public static ArrayList<DownloadPlugins> downloadList() {
+		ArrayList<DownloadPlugins> res=new ArrayList<DownloadPlugins>();
+		try {
+			URL u=new URL(PLUGIN_LIST_URL);
+			URLConnection connection=u.openConnection();
+			BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
+		    String str;
+			DownloadPlugins plugin=new DownloadPlugins();
+		    while ((str = in.readLine()) != null) {
+		    	str=str.trim();
+				if(StringUtils.isEmpty(str)) {
+					if(plugin.isOk())
+						res.add(plugin);
+					plugin=new DownloadPlugins();
+				}
+				String[] keyval=str.split("=",2);
+				if(keyval.length<2)
+					continue;
+				if(keyval[0].equalsIgnoreCase("name"))
+					plugin.name=keyval[1];
+				if(keyval[0].equalsIgnoreCase("rating"))
+					plugin.rating=keyval[1];
+				if(keyval[0].equalsIgnoreCase("desc"))
+					plugin.desc=keyval[1];
+				if(keyval[0].equalsIgnoreCase("url"))
+					plugin.url=keyval[1];	
+				if(keyval[0].equalsIgnoreCase("author"))
+					plugin.author=keyval[1];	
+				if(keyval[0].equalsIgnoreCase("type")) {
+					if(keyval[1].equalsIgnoreCase("jar"))
+						plugin.type=DownloadPlugins.TYPE_JAR;
+					if(keyval[1].equalsIgnoreCase("list"))
+						plugin.type=DownloadPlugins.TYPE_LIST;
+					if(keyval[1].equalsIgnoreCase("bundle"))
+						plugin.type=DownloadPlugins.TYPE_BUNDLE;
+				}
+			}
+		    if(plugin.isOk()) // add the last one
+				res.add(plugin);
+		    in.close();
+		} catch (Exception e) {
+			LOGGER.debug("bad plugin list "+e);
+		}
+		return res;
+	}
+	public DownloadPlugins() {
+		type=DownloadPlugins.TYPE_JAR;
+		rating="--";
+		jars=null;
+	}
+	
+	public String getName() {
+		return name;
+	}
+	
+	public String getRating() {
+		return rating;
+	}
+	
+	public String getAuthor() {
+		return author;
+	}
+	
+	public String getDescription() {
+		return desc;
+	}
+	
+	public boolean isOk() {
+		// we must have a name and an url
+		return (!StringUtils.isEmpty(name))&&(!StringUtils.isEmpty(url));
+	}
+	
+	private	String splitString(String string) {
+		StringBuffer buf = new StringBuffer();
+		String tempString = string;	
+
+		if (string != null) {
+			while(tempString.length() > 60) {  
+				String block = tempString.substring(0, 60);                                           
+				int index = block.lastIndexOf(' ');                                             
+				if(index < 0) {
+					index = tempString.indexOf(' ');
+				}
+				if (index >= 0){
+					buf.append(tempString.substring(0, index) + "<BR>");                                        
+				} 
+				tempString = tempString.substring(index+1);
+			}
+		}
+		else {
+			tempString = " ";
+		}
+		buf.append(tempString);
+		return buf.toString();
+	}
+	
+	private String header(String hdr) {
+		return "<br><b>"+hdr+":  </b>";
+	}
+	
+	public String htmlString() {
+		String res="<html>";
+		res+="<b>Name:  </b>"+getName();
+		if(!StringUtils.isEmpty(getRating()))
+			res+=header("Rating")+getRating();
+		if(!StringUtils.isEmpty(getAuthor()))
+			res+=header("Author")+getAuthor();
+		if(!StringUtils.isEmpty(getDescription()))
+			res+=header("Description")+splitString(getDescription());
+		return res;
+	}
+	
+	private String extractFileName(String str) {
+		int pos=str.lastIndexOf("/");
+		if(pos==-1)
+			return name;
+		return str.substring(pos+1);
+	}
+	
+	private void ensureCreated(String p) {
+		File f=new File(p);
+		f.mkdirs();
+	}
+	
+	private boolean downloadFile(String url,String dir) throws Exception {
+		URL u=new URL(url);
+		ensureCreated(dir);
+		File f=new File(dir+File.separator+extractFileName(url));
+		URLConnection connection=u.openConnection();
+		connection.setDoInput(true);
+		connection.setDoOutput(true);
+		InputStream in=connection.getInputStream();
+		FileOutputStream out=new FileOutputStream(f);
+		byte[] buf = new byte[4096];
+		int len;
+		while((len=in.read(buf))!=-1)
+			out.write(buf, 0, len);
+		out.flush();
+		out.close();
+		in.close();
+		// if we got down here add the jar to the list (if it is a jar)
+		if(f.getAbsolutePath().endsWith(".jar"))	
+			jars.add(f.toURI().toURL());
+		return true;
+	}
+	
+	private boolean downloadList(String url) throws Exception {
+		URL u=new URL(url);
+		URLConnection connection=u.openConnection();
+		BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
+	    String str;
+	    boolean res=true;
+	    while ((str = in.readLine()) != null) {
+	    	str=str.trim();
+	    	if(StringUtils.isEmpty(str))
+	    		continue;
+	    	String[] tmp=str.split(",",2);
+	    	String dir=PMS.getConfiguration().getPluginDirectory();
+	    	if(tmp.length>1) {
+	    		String rootDir=new File("").getAbsolutePath();
+	    		if(tmp[1].equalsIgnoreCase("root"))
+	    			dir=rootDir;
+	    		else {
+	    			dir=rootDir+File.separator+tmp[1];
+	    		}	    		
+	    	}
+	    	res&=downloadFile(tmp[0],dir);
+	    }
+	    return res;
+	}
+	
+	private boolean download() throws Exception {
+		if(type==DownloadPlugins.TYPE_JAR)
+			return downloadFile(url,PMS.getConfiguration().getPluginDirectory());
+		if(type==DownloadPlugins.TYPE_LIST)
+			return downloadList(url);
+		return false;
+	}
+	
+	public boolean install() throws Exception {
+		LOGGER.debug("install plugin "+name+" type "+type);
+		// init the jar file list
+		jars=new ArrayList<URL>();
+		// 1st download the
+		if(!download()) // download failed, bail out
+			return false;
+		// 2nd load the jars (if any)
+		if(jars.isEmpty())
+			return true;
+		URL[] jarURLs = new URL[jars.size()];
+		jars.toArray(jarURLs);
+		ExternalFactory.loadJARs(jarURLs,true);
+		// Finally create the instaces of the plugins
+		ExternalFactory.instantiateDownloaded();
+		return true;
+	}
+}
diff --git a/src/main/java/net/pms/external/ExternalFactory.java b/src/main/java/net/pms/external/ExternalFactory.java
index 96df873..2fedbdd 100644
--- a/src/main/java/net/pms/external/ExternalFactory.java
+++ b/src/main/java/net/pms/external/ExternalFactory.java
@@ -22,6 +22,9 @@ import java.io.File;
 import java.io.FileFilter;
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.net.URLClassLoader;
@@ -34,6 +37,7 @@ import net.pms.PMS;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+
 /**
  * This class takes care of registering plugins. Plugin jars are loaded,
  * instantiated and stored for later retrieval.
@@ -55,6 +59,14 @@ public class ExternalFactory {
 	private static List<Class<?>> externalListenerClasses = new ArrayList<Class<?>>();
 
 	/**
+	 * List of external listener classes (not yet started).
+	 */
+	private static List<Class<?>> downloadedListenerClasses = new ArrayList<Class<?>>();
+	
+	private static boolean allDone=false;
+
+	
+	/**
 	 * Returns the list of external listener class instances.
 	 *
 	 * @return The instances.
@@ -86,6 +98,54 @@ public class ExternalFactory {
 			externalListenerClasses.add(clazz);
 		}
 	}
+	
+	/**
+	 * This method loads the jar files found in the plugin dir
+	 * or if installed from the web.
+	 */
+	
+	public static void loadJARs(URL[] jarURLs,boolean download) {
+		// Create a classloader to take care of loading the plugin classes from
+		// their URL.
+		URLClassLoader classLoader = new URLClassLoader(jarURLs);
+		Enumeration<URL> resources;
+
+		try {
+			// Each plugin .jar file has to contain a resource named "plugin"
+			// which should contain the name of the main plugin class.
+			resources = classLoader.getResources("plugin");
+		} catch (IOException e) {
+			LOGGER.error("Can't load plugin resources", e);
+			return;
+		}
+
+		while (resources.hasMoreElements()) {
+			URL url = resources.nextElement();
+
+			try {
+				// Determine the plugin main class name from the contents of
+				// the plugin file.
+				InputStreamReader in = new InputStreamReader(url.openStream());
+				char[] name = new char[512];
+				in.read(name);
+				in.close();
+				String pluginMainClassName = new String(name).trim();
+
+				LOGGER.info("Found plugin: " + pluginMainClassName);
+
+				// Try to load the class based on the main class name
+				Class<?> clazz = classLoader.loadClass(pluginMainClassName);
+				registerListenerClass(clazz);
+				if(download)
+					downloadedListenerClasses.add(clazz);
+					
+			} catch (Exception e) {
+				LOGGER.error("Error loading plugin", e);
+			} catch (NoClassDefFoundError e) {
+				LOGGER.error("Error loading plugin", e);
+			}
+		}
+	}
 
 	/**
 	 * This method scans the plugins directory for ".jar" files and processes
@@ -137,44 +197,10 @@ public class ExternalFactory {
 
 		URL[] jarURLs = new URL[jarURLList.size()];
 		jarURLList.toArray(jarURLs);
-
-		// Create a classloader to take care of loading the plugin classes from
-		// their URL.
-		URLClassLoader classLoader = new URLClassLoader(jarURLs);
-		Enumeration<URL> resources;
-
-		try {
-			// Each plugin .jar file has to contain a resource named "plugin"
-			// which should contain the name of the main plugin class.
-			resources = classLoader.getResources("plugin");
-		} catch (IOException e) {
-			LOGGER.error("Can't load plugin resources", e);
-			return;
-		}
-
-		while (resources.hasMoreElements()) {
-			URL url = resources.nextElement();
-
-			try {
-				// Determine the plugin main class name from the contents of
-				// the plugin file.
-				InputStreamReader in = new InputStreamReader(url.openStream());
-				char[] name = new char[512];
-				in.read(name);
-				in.close();
-				String pluginMainClassName = new String(name).trim();
-
-				LOGGER.info("Found plugin: " + pluginMainClassName);
-
-				// Try to load the class based on the main class name
-				Class<?> clazz = classLoader.loadClass(pluginMainClassName);
-				registerListenerClass(clazz);
-			} catch (Exception e) {
-				LOGGER.error("Error loading plugin", e);
-			} catch (NoClassDefFoundError e) {
-				LOGGER.error("Error loading plugin", e);
-			}
-		}
+		
+		// Load the jars
+		
+		loadJARs(jarURLs,false);
 
 		// Instantiate the early external listeners immediately.
 		instantiateEarlyListeners();
@@ -232,5 +258,42 @@ public class ExternalFactory {
 				}
 			}
 		}
+		allDone=true;
+	}
+	
+	private static void postInstall(Class<?> clazz) {
+		Method postInstall;
+		try {
+			postInstall = clazz.getDeclaredMethod("postInstall", null);
+			if(Modifier.isStatic(postInstall.getModifiers()))
+				postInstall.invoke(null, null);
+		}
+		// Ignore all errors
+		catch (SecurityException e) {
+		} catch (NoSuchMethodException e) { 
+		} catch (IllegalArgumentException e) {
+		} catch (IllegalAccessException e) {
+		} catch (InvocationTargetException e) {
+		}
+	}
+	
+	public static void instantiateDownloaded() {
+		// These are found in the uninstancedListenerClasses list
+		for (Class<?> clazz: downloadedListenerClasses) {
+			ExternalListener instance;
+			try {
+				postInstall(clazz);
+				instance = (ExternalListener) clazz.newInstance();
+				registerListener(instance);
+			} catch (InstantiationException e) {
+				LOGGER.error("Error instantiating plugin", e);
+			} catch (IllegalAccessException e) {
+				LOGGER.error("Error instantiating plugin", e);
+			} 
+		}
+	}
+	
+	public static boolean localPluginsInstalled() {
+		return allDone;
 	}
 }
diff --git a/src/main/java/net/pms/newgui/GeneralTab.java b/src/main/java/net/pms/newgui/GeneralTab.java
index aa35348..2147c72 100644
--- a/src/main/java/net/pms/newgui/GeneralTab.java
+++ b/src/main/java/net/pms/newgui/GeneralTab.java
@@ -18,6 +18,7 @@
  */
 package net.pms.newgui;
 
+import java.awt.BorderLayout;
 import java.awt.Component;
 import java.awt.ComponentOrientation;
 import java.awt.Font;
@@ -28,6 +29,7 @@ import java.awt.event.ItemEvent;
 import java.awt.event.ItemListener;
 import java.awt.event.KeyEvent;
 import java.awt.event.KeyListener;
+import java.awt.event.MouseEvent;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Locale;
@@ -39,13 +41,21 @@ import javax.swing.JComponent;
 import javax.swing.JFrame;
 import javax.swing.JOptionPane;
 import javax.swing.JPanel;
+import javax.swing.JProgressBar;
 import javax.swing.JScrollPane;
+import javax.swing.JSeparator;
+import javax.swing.JTable;
+import javax.swing.JTextArea;
 import javax.swing.JTextField;
+import javax.swing.Popup;
+import javax.swing.PopupFactory;
 import javax.swing.SwingUtilities;
+import javax.swing.table.TableCellRenderer;
 
 import net.pms.Messages;
 import net.pms.PMS;
 import net.pms.configuration.Build;
+import net.pms.configuration.DownloadPlugins;
 import net.pms.configuration.PmsConfiguration;
 import net.pms.configuration.RendererConfiguration;
 import net.pms.external.ExternalFactory;
@@ -216,6 +226,75 @@ public class GeneralTab {
 			checkForUpdates.setEnabled(false);
 			autoUpdateCheckBox.setEnabled(false);
 		}
+		
+		// Add find plugin support here
+		JButton checkForPlugins=new JButton(/*Messages.getString("NetworkTab.999")*/"Plugins");
+		checkForPlugins.addActionListener(new ActionListener() {
+			@Override
+			public void actionPerformed(ActionEvent e) {
+				if(!ExternalFactory.localPluginsInstalled()) {
+					JOptionPane.showMessageDialog((JFrame) (SwingUtilities.getWindowAncestor((Component) PMS.get().getFrame())),
+												  "Plugins are not loaded yet. Please wait.");
+					return;
+				}
+				final ArrayList<DownloadPlugins> plugins=DownloadPlugins.downloadList();
+				if(plugins.isEmpty())
+					return;
+				JTable tab=new JTable(plugins.size()+1,3) {
+					 public String getToolTipText(MouseEvent e) {
+						 java.awt.Point p = e.getPoint();
+						 int rowIndex = rowAtPoint(p);
+						 if(rowIndex==0)
+							 return "";
+						 DownloadPlugins plugin=plugins.get(rowIndex-1);
+						 return plugin.htmlString();
+					 }
+				};
+				tab.setValueAt("Name", 0, 0);
+				tab.setValueAt("Rating",0,1);
+				tab.setValueAt("Author",0,2);
+				for(int i=0;i<plugins.size();i++) {
+					DownloadPlugins p=plugins.get(i);
+					tab.setValueAt(p.getName(), i+1, 0);
+					tab.setValueAt(p.getRating(),i+1,1);
+					tab.setValueAt(p.getAuthor(),i+1,2);
+				}
+				String[] opts={"Install","Cancel"};
+				int id=JOptionPane.showOptionDialog((JFrame) (SwingUtilities.getWindowAncestor((Component) PMS.get().getFrame())), 
+							tab, "Plugins", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, opts, null);
+				if(id!=0) // cancel, do nothing
+					return;
+				// Install the stuff
+				final int[] rows=tab.getSelectedRows();
+				JPanel panel=new JPanel();
+				final JFrame frame=new JFrame("Install Plugins");	
+				JProgressBar progressBar=new JProgressBar();
+				progressBar.setIndeterminate(true);
+				panel.add(progressBar);
+				frame.add(panel);
+				frame.pack();
+				frame.setVisible(true);
+				Runnable r=new Runnable() {
+					public void run() {
+						for(int i=0;i<rows.length;i++) {
+							if(rows[i]==0)
+								continue;
+							DownloadPlugins plugin=plugins.get(rows[i]-1);
+							try {
+								plugin.install();
+							} catch (Exception e) {
+								LOGGER.debug("download of plugin "+plugin.getName()+
+										" failed "+e);
+							}
+						}
+						frame.setVisible(false);
+					}
+				};
+				new Thread(r).start();
+			}
+		});
+		builder.add(checkForPlugins, FormLayoutUtil.flip(cc.xy(1, 14), colSpec, orientation));
+		
 
 		host = new JTextField(configuration.getServerHostname());
 		host.addKeyListener(new KeyListener() {
-- 
1.7.3.1.msysgit.0

